<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2022/12/13/about/"/>
    <url>/2022/12/13/about/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一名菜鸟程序员，渴望力量！坚持从外边砍点柴火！</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PC列表通用排序功能</title>
    <link href="/2022/12/10/%E9%80%9A%E7%94%A8%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/12/10/%E9%80%9A%E7%94%A8%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>之前做过好多外包都没写过排序的实现，这次发现同事写的有问题，所以手动实现一个。不知是否有用。直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给表的排序字段排序</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年07月17日 16:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Api(tags = &quot;给列表排序&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/common/sort&quot;)</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortTableController</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ICommonSV commonSV;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拖拽标志对应的表和字段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拖拽标志对应的表和字段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; tablesWhere = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-comment">// 表名</span><br>tables.put(<span class="hljs-string">&quot;app_banner&quot;</span>, <span class="hljs-string">&quot;sort_num&quot;</span>);<br>tables.put(<span class="hljs-string">&quot;app_health_plate&quot;</span>, <span class="hljs-string">&quot;sort_num&quot;</span>);<br>tables.put(<span class="hljs-string">&quot;app_start_page&quot;</span>, <span class="hljs-string">&quot;sort_num&quot;</span>);<br>tables.put(<span class="hljs-string">&quot;clinic_manual&quot;</span>, <span class="hljs-string">&quot;sort&quot;</span>);<br>tables.put(<span class="hljs-string">&quot;sys_menu&quot;</span>, <span class="hljs-string">&quot;menu_order&quot;</span>);<br>tables.put(<span class="hljs-string">&quot;nav_dept_adv&quot;</span>, <span class="hljs-string">&quot;sort_num&quot;</span>);<br><span class="hljs-comment">// 排序条件</span><br>tablesWhere.put(<span class="hljs-string">&quot;sys_menu&quot;</span>, <span class="hljs-string">&quot;and parent_id = #&#123;params.p0&#125;&quot;</span>);<br>tablesWhere.put(<span class="hljs-string">&quot;clinic_manual&quot;</span>, <span class="hljs-string">&quot;and deleted !=&#x27;01&#x27; &quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Log</span><br><span class="hljs-meta">@ApiOperation(&quot;排序&quot;)</span><br><span class="hljs-meta">@ApiImplicitParams(&#123;</span><br><span class="hljs-meta">@ApiImplicitParam(value = &quot;拖拽标志(nav_doctor_infor,nav_popu_dept_infor,nav_quick_entry_infor)&quot;, name = &quot;tableName&quot;, paramType = &quot;form&quot;),</span><br><span class="hljs-meta">@ApiImplicitParam(value = &quot;上&quot;, name = &quot;top&quot;, paramType = &quot;form&quot;),</span><br><span class="hljs-meta">@ApiImplicitParam(value = &quot;中&quot;, name = &quot;mid&quot;, paramType = &quot;form&quot;),</span><br><span class="hljs-meta">@ApiImplicitParam(value = &quot;下&quot;, name = &quot;bottom&quot;, paramType = &quot;form&quot;),</span><br><span class="hljs-meta">@ApiImplicitParam(value = &quot;条件&quot;, name = &quot;whereCase&quot;, paramType = &quot;form&quot;),</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@PostMapping(&quot;/sortTable&quot;)</span><br><span class="hljs-keyword">public</span> APIResponse <span class="hljs-title function_">sortTable</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@NotNull</span> String tableName,</span><br><span class="hljs-params">Long top,</span><br><span class="hljs-params"><span class="hljs-meta">@NotNull</span> Long mid,</span><br><span class="hljs-params">Long bottom,</span><br><span class="hljs-params">String[] whereCase</span><br><span class="hljs-params">)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> tables.get(tableName);<br><span class="hljs-keyword">if</span> (StringUtils.isBlank(sort)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br>Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">//根据上下判定是上移还是下移</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">down</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Long</span> <span class="hljs-variable">midSort</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Long</span> <span class="hljs-variable">topSort</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Long</span> <span class="hljs-variable">bottomSort</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (top == <span class="hljs-literal">null</span>) &#123;<br>down = <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bottom == <span class="hljs-literal">null</span>) &#123;<br>down = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>midSort = findSort(mid, tableName);<br>topSort = findSort(top, tableName);<br>bottomSort = findSort(bottom, tableName);<br>down = midSort &gt; topSort &amp;&amp; midSort &gt; bottomSort;<br>&#125;<br><span class="hljs-comment">// 执行更新操作</span><br><span class="hljs-type">String</span> <span class="hljs-variable">updateSql</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (down) &#123;<br><span class="hljs-keyword">if</span> (topSort == <span class="hljs-literal">null</span>) &#123;<br>topSort = findSort(top, tableName);<br>&#125;<br>List&lt;Long&gt; ids = findIds(top, mid, tableName, whereCase, <span class="hljs-string">&quot;first&quot;</span>);<br><span class="hljs-keyword">if</span> (ids.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> APIResponseBuilder.successNoData();<br>&#125;<br>updateSql = <span class="hljs-string">&quot;update &quot;</span> + tableName + <span class="hljs-string">&quot; set &quot;</span> + sort + <span class="hljs-string">&quot; = &quot;</span> + sort + <span class="hljs-string">&quot; + 1 where id in ( &quot;</span> + StringUtils.join(ids, <span class="hljs-string">&quot;,&quot;</span>) + <span class="hljs-string">&quot; )&quot;</span>;<br>commonSV.updateByParams(updateSql, params);<br>params.put(<span class="hljs-string">&quot;newSort&quot;</span>, topSort);<br>params.put(<span class="hljs-string">&quot;id&quot;</span>, mid);<br>updateSql = <span class="hljs-string">&quot;update &quot;</span> + tableName + <span class="hljs-string">&quot; set &quot;</span> + sort + <span class="hljs-string">&quot; = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; &quot;</span>;<br>commonSV.updateByParams(updateSql, params);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!down) &#123;<br><span class="hljs-keyword">if</span> (bottomSort == <span class="hljs-literal">null</span>) &#123;<br>bottomSort = findSort(bottom, tableName);<br>&#125;<br>List&lt;Long&gt; ids = findIds(mid, bottom, tableName, whereCase, <span class="hljs-string">&quot;last&quot;</span>);<br><span class="hljs-keyword">if</span> (ids.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> APIResponseBuilder.successNoData();<br>&#125;<br>updateSql = <span class="hljs-string">&quot;update &quot;</span> + tableName + <span class="hljs-string">&quot; set &quot;</span> + sort + <span class="hljs-string">&quot; = &quot;</span> + sort + <span class="hljs-string">&quot; - 1 where id in ( &quot;</span> + StringUtils.join(ids, <span class="hljs-string">&quot;,&quot;</span>) + <span class="hljs-string">&quot; )&quot;</span>;<br>commonSV.updateByParams(updateSql, params);<br>params.put(<span class="hljs-string">&quot;newSort&quot;</span>, bottomSort);<br>params.put(<span class="hljs-string">&quot;id&quot;</span>, mid);<br>updateSql = <span class="hljs-string">&quot;update &quot;</span> + tableName + <span class="hljs-string">&quot; set &quot;</span> + sort + <span class="hljs-string">&quot; = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; &quot;</span>;<br>commonSV.updateByParams(updateSql, params);<br>&#125;<br><span class="hljs-keyword">return</span> APIResponseBuilder.successNoDataWithMsg(<span class="hljs-string">&quot;排序成功!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询两个ID之间的ID有哪些</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> startId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> endId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tableName</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> whereCase</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> removeTag</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> List&lt;Long&gt; <span class="hljs-title function_">findIds</span><span class="hljs-params">(Long startId, Long endId, String tableName, String[] whereCase, String removeTag)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> tables.get(tableName);<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; select id &quot;</span> +<br><span class="hljs-string">&quot; from &quot;</span> + tableName + <span class="hljs-string">&quot; &quot;</span> +<br><span class="hljs-string">&quot; where &quot;</span> + sort + <span class="hljs-string">&quot; &gt;= (select &quot;</span> + sort + <span class="hljs-string">&quot; from &quot;</span> + tableName + <span class="hljs-string">&quot; where id = #&#123;params.startId&#125;) &quot;</span> +<br><span class="hljs-string">&quot; and &quot;</span> + sort + <span class="hljs-string">&quot; &lt;= (select &quot;</span> + sort + <span class="hljs-string">&quot; from &quot;</span> + tableName + <span class="hljs-string">&quot; where id = #&#123;params.endId&#125;) &quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">whereCaseStr</span> <span class="hljs-operator">=</span> tablesWhere.get(tableName);<br><span class="hljs-keyword">if</span> (whereCaseStr != <span class="hljs-literal">null</span>) &#123;<br>sql += whereCaseStr;<br>&#125;<br>sql += <span class="hljs-string">&quot; order by  &quot;</span> + sort + <span class="hljs-string">&quot; desc &quot;</span>;<br>Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>params.put(<span class="hljs-string">&quot;startId&quot;</span>, startId);<br>params.put(<span class="hljs-string">&quot;endId&quot;</span>, endId);<br><span class="hljs-keyword">if</span> (whereCase != <span class="hljs-literal">null</span> &amp;&amp; whereCase.length &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; whereCase.length; i++) &#123;<br>params.put(<span class="hljs-string">&quot;p&quot;</span> + i, whereCase[i]);<br>&#125;<br>&#125;<br>List&lt;JSONObject&gt; longs = commonSV.queryListJSONObject(sql, params);<br><span class="hljs-keyword">if</span> (StringUtils.isNotBlank(removeTag) &amp;&amp; !longs.isEmpty()) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;last&quot;</span>.equals(removeTag)) &#123;<br>longs.remove(longs.size() - <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;first&quot;</span>.equals(removeTag)) &#123;<br>longs.remove(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> longs.stream().map(n -&gt; n.getLong(<span class="hljs-string">&quot;id&quot;</span>)).collect(Collectors.toList());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据ID查询序号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tableName</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Long <span class="hljs-title function_">findSort</span><span class="hljs-params">(Long id, String tableName)</span> &#123;<br><span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; select &quot;</span> + tables.get(tableName) + <span class="hljs-string">&quot; from &quot;</span> + tableName + <span class="hljs-string">&quot; where id = #&#123;params.id&#125;&quot;</span>;<br>Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>params.put(<span class="hljs-string">&quot;id&quot;</span>, id);<br><span class="hljs-type">Number</span> <span class="hljs-variable">sortNum</span> <span class="hljs-operator">=</span> commonSV.selectField(sql, params, Number.class);<br><span class="hljs-keyword">return</span> sortNum.longValue();<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决PropertySource不能读取yml的问题</title>
    <link href="/2022/12/10/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/10/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决PropertySource不能读取yml的问题</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2020年03月26日 17:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YamlConfigFactory</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultPropertySourceFactory</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sourceName</span> <span class="hljs-operator">=</span> name != <span class="hljs-literal">null</span> ? name : resource.getResource().getFilename();<br><span class="hljs-keyword">if</span> (!resource.getResource().exists()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(sourceName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>());<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sourceName.endsWith(<span class="hljs-string">&quot;.yml&quot;</span>) || sourceName.endsWith(<span class="hljs-string">&quot;.yaml&quot;</span>)) &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">propertiesFromYaml</span> <span class="hljs-operator">=</span> loadYml(resource);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(sourceName, propertiesFromYaml);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.createPropertySource(name, resource);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">loadYml</span><span class="hljs-params">(EncodedResource resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">YamlPropertiesFactoryBean</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlPropertiesFactoryBean</span>();<br>factory.setResources(resource.getResource());<br>factory.afterPropertiesSet();<br><span class="hljs-keyword">return</span> factory.getObject();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户自定义配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年07月05日 16:44</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@PropertySource(value=&quot;classpath:file-table-config.yml&quot;,factory = YamlConfigFactory.class)</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTableConfig</span> &#123;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 表达式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String corn;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 表和资源字段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> List&lt;String&gt; tables;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>轮子</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案</title>
    <link href="/2022/12/10/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/12/10/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Tom-shushu</p><p>cnblogs.com&#x2F;Tom-shushu&#x2F;p&#x2F;10636382.html</p></blockquote><h2 id="1-我们使用缓存时的业务流程大概为："><a href="#1-我们使用缓存时的业务流程大概为：" class="headerlink" title="1.我们使用缓存时的业务流程大概为："></a>1.我们使用缓存时的业务流程大概为：</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java10-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><p>当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能出现下面的一些现象。</p><h2 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2.缓存穿透"></a>2.缓存穿透</h2><h3 id="2-1什么是缓存穿透"><a href="#2-1什么是缓存穿透" class="headerlink" title="2.1什么是缓存穿透"></a>2.1什么是缓存穿透</h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><h3 id="2-2缓存穿透带来的问题"><a href="#2-2缓存穿透带来的问题" class="headerlink" title="2.2缓存穿透带来的问题"></a>2.2缓存穿透带来的问题</h3><p>试想一下，如果有黑客对你的系统进行攻击，拿一个不存在的id去查询数据，会产生大量的请求到你的数据库去查询，可能会导致你的数据库由于压力过大而宕掉。</p><h3 id="2-3解决的办法"><a href="#2-3解决的办法" class="headerlink" title="2.3解决的办法"></a>2.3解决的办法</h3><h4 id="2-3-1缓存空值"><a href="#2-3-1缓存空值" class="headerlink" title="2.3.1缓存空值"></a>2.3.1缓存空值</h4><p>之所以会发生穿透，就是因为缓存中没有储存这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key对应的值设置为null丢到缓存里面去。后面出现查询这个key的请求的时候直接返回null。</p><p>这样就不用再到数据库中去走一圈了，但是别忘了设置过期时间。</p><p>缓存空对象会有两个问题：</p><ul><li><p>第一，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</p></li><li><p>第二，缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</p></li></ul><h4 id="2-3-2用布隆过滤器BloomFilter"><a href="#2-3-2用布隆过滤器BloomFilter" class="headerlink" title="2.3.2用布隆过滤器BloomFilter"></a>2.3.2用布隆过滤器BloomFilter</h4><p>BloomFilter类似于一个hbase set用来判断某个元素(key)是否存在于某个集合中。</p><p>这种方式在大数据场景应用比较多，比如Hbase中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url是否已经被爬取过。</p><p>这种方案可以加在第一种方案中，在缓存之前加一层BloomFilter，在查询的时候先去BloomFilter去查询key是否存在，如果不存在就直接返回，存在再去查缓存——–&gt;差数据库。</p><p>流程图如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586143832-1.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="2-4如何选择"><a href="#2-4如何选择" class="headerlink" title="2.4如何选择"></a>2.4如何选择</h3><p>针对于一些恶意攻击，攻击带来大量key是不存在的，那么我们采用第一种方案就会缓存大量不存在的数据。此时我们采用第一种方案就不合适了，我们完全可以先使用第二种方案过滤掉这些key。</p><p>针对这些key异常多，请求多，重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。</p><p>而对于空数据的key有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。</p><h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><h3 id="3-1什么是缓存击穿"><a href="#3-1什么是缓存击穿" class="headerlink" title="3.1什么是缓存击穿"></a>3.1什么是缓存击穿</h3><p>缓存击穿是我们使用缓存可能遇到的第二个问题。</p><p>在平时高并发的系统中，大量的请求同时查询一个key时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为缓存击穿。</p><h3 id="3-2会带来什么问题"><a href="#3-2会带来什么问题" class="headerlink" title="3.2会带来什么问题"></a>3.2会带来什么问题</h3><p>会造成某一时刻数据请求量过大，压力剧增。</p><h3 id="3-3如何解决"><a href="#3-3如何解决" class="headerlink" title="3.3如何解决"></a>3.3如何解决</h3><p>上面现象是多个线程同时去查询数据库的这一条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。（如果是单机，可以用synchronized或者lock来处理，如果是分布式环境可以用分布式锁就可以了（分布式锁，可以用memcache的add, redis的setnx, zookeeper的添加节点操作））</p><p>其他线程走到这一步拿不到锁就等着，等待第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有了缓存，就直接走缓存。</p><h2 id="4-缓存雪崩"><a href="#4-缓存雪崩" class="headerlink" title="4.缓存雪崩"></a>4.缓存雪崩</h2><h3 id="4-1什么是缓存雪崩"><a href="#4-1什么是缓存雪崩" class="headerlink" title="4.1什么是缓存雪崩"></a>4.1什么是缓存雪崩</h3><p>缓存雪崩的情况是指：当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到数据库上面，结果就是数据库挂掉。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="4-2解决办法"><a href="#4-2解决办法" class="headerlink" title="4.2解决办法"></a>4.2解决办法</h3><h4 id="4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用"><a href="#4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用" class="headerlink" title="4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用"></a>4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用</h4><p>这种方案就是在发生雪崩前对缓存集群，实现高可用，如果是使用Redis，可以使用（主从 + 哨兵），Redis Cluster来避免Redis全盘崩溃的情况。</p><h4 id="4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死"><a href="#4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死" class="headerlink" title="4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死"></a>4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死</h4><p>使用ehcache本地缓存的目的也是考虑Redis Cluster完全不可用的时候，ehcache本地缓存还能够支撑一阵。</p><p>使用Hystrix进行限流 &amp; 降级，比如一秒来了5000个请求，我们可以设置假设一秒只能有2000个请求可以通过这个组件，那么其他剩余的3000请求就会走限流逻辑。</p><p>然后去调用我们自己开发的降级组件（降级）,比如设置的一些默认值等等之类的。以此来保护最后的MySQl不会被大量的请求打死。</p><h4 id="4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。"><a href="#4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。" class="headerlink" title="4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。"></a>4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。</h4><h2 id="5-解决热点数据集中失效问题"><a href="#5-解决热点数据集中失效问题" class="headerlink" title="5.解决热点数据集中失效问题"></a>5.解决热点数据集中失效问题</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效的时间，过了这个时间，缓存就失效了。</p><p>对于一些热点数据来说，当缓存失效后会存在大量的请求到数据库上来，从而可能导致数据库崩溃的情况。</p><h3 id="5-1解决办法"><a href="#5-1解决办法" class="headerlink" title="5.1解决办法"></a>5.1解决办法</h3><h4 id="5-1-1设置不同的失效时间"><a href="#5-1-1设置不同的失效时间" class="headerlink" title="5.1.1设置不同的失效时间"></a>5.1.1设置不同的失效时间</h4><p>为了避免这些热点数据集体失效，那么我们在设置缓存过期时间的时侯，让他们失效的时间错开。比如我们可以在原有的失效时间基础上增加一个随机值。</p><h4 id="5-1-2互斥锁"><a href="#5-1-2互斥锁" class="headerlink" title="5.1.2互斥锁"></a>5.1.2互斥锁</h4><p>结合上面的击穿情况，在第一个请求去查询数据库的时候对它加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。</p><p>但是也是由于它会阻塞其他线程，此时系统的吞吐量会下降。需要结合实际业务去考虑。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超长JVM总结</title>
    <link href="/2022/12/10/%E8%B6%85%E9%95%BFJVM%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/10/%E8%B6%85%E9%95%BFJVM%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h3><p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接的交互。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125197.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>我们都知道 Java 源文件，通过编译器，能够生产相应的.Class 文件，也就是字节码文件，而字节码文件又通过 Java 虚拟机中的解释器，编译成特定机器上的机器码 。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1588125197.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不能共享。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java8-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h6 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h6><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程 。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</p><ul><li><p>Hotspot JVM 后台运行的系统线程主要有下面几个：</p></li><li><p><strong>虚拟机线程</strong>:这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM位于安全点。这些操作的类型有：stop-the-world 垃圾回收、线程栈dump、线程暂停、线程偏向锁（biased  locking）解除。</p></li><li><p><strong>周期性任务线程</strong>:这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</p></li><li><p><strong>GC 线程</strong>  :这些线程支持 JVM 中不同的垃圾回收活动。</p></li><li><p><strong>编译器线程</strong>:这些线程在运行时将字节码动态编译成本地平台相关的机器码。</p></li><li><p><strong>信号分发线程</strong>:这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</p></li></ul><h3 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><ul><li><p>JVM 内存区域主要分为线程私有区域【<strong>程序计数器、虚拟机栈、本地方法区</strong>】、线程共享区域【<strong>JAVA 堆、方法区</strong>】、直接内存。<br>-<strong>线程私有数据区域生命周期与线程相同</strong>, 依赖用户线程的启动&#x2F;结束 而 创建&#x2F;销毁(在 HotspotVM 内, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存&#x2F;否跟随本地线程的生&#x2F;死对应)。</p></li><li><p><strong>线程共享区域</strong>随虚拟机的启动&#x2F;关闭而创建&#x2F;销毁。</p></li></ul><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h6 id="程序计数器-线程私有）"><a href="#程序计数器-线程私有）" class="headerlink" title="程序计数器( 线程私有）"></a>程序计数器( 线程私有）</h6><ul><li><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有”的内存。</p></li><li><p>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址）。如果还是 Native 方法，则为空。</p></li><li><p>这个内存区域是唯一一个在虚拟机中没有规定任OutOfMemoryError 情况的区域。</p></li></ul><h6 id="JAVA虚拟机栈-线程私有"><a href="#JAVA虚拟机栈-线程私有" class="headerlink" title="JAVA虚拟机栈( 线程私有)"></a>JAVA虚拟机栈( 线程私有)</h6><ul><li><p><strong>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p></li><li><p>栈帧（ Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接(Dynamic Linking)、 方法返回值和异常分派（ Dispatch Exception）。<strong>栈帧随着方法调用而创建，随着方法结束而销毁</strong>——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h6 id="本地方法区-线程私有）"><a href="#本地方法区-线程私有）" class="headerlink" title="本地方法区(线程私有）"></a>本地方法区(线程私有）</h6><ul><li>本地方法区和 <strong>Java Stack</strong> 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而<strong>本地方法栈则为Native 方法服务</strong>, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</li></ul><h6 id="堆（Heap-线程共享）运行时数据区"><a href="#堆（Heap-线程共享）运行时数据区" class="headerlink" title="堆（Heap- 线程共享）运行时数据区"></a>堆（Heap- 线程共享）运行时数据区</h6><ul><li>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为: <strong>新生代( Eden 区 、 From Survivor 区 和 To Survivor 区 )和老年代</strong>(jdk1.7)。</li></ul><h6 id="方法区-x2F-永久代-（线程共享）"><a href="#方法区-x2F-永久代-（线程共享）" class="headerlink" title="方法区&#x2F; 永久代 （线程共享）"></a>方法区&#x2F; 永久代 （线程共享）</h6><ul><li>即我们常说的永久代(Permanent Generation), 用于存储被 <strong>JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存,而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小)。</li></ul><h6 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h6><ul><li>（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对 Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。</li></ul><h6 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h6><ul><li>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用DirectByteBuffer 对象作为这块内存的引用进行操作， 这样就避免了在 Java堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</li></ul><h3 id="JVM运行时内存-jdk1-7"><a href="#JVM运行时内存-jdk1-7" class="headerlink" title="JVM运行时内存(jdk1.7)"></a>JVM运行时内存(jdk1.7)</h3><ul><li><p>Java 堆从 GC 的角度还可以细分为: <strong>新生代</strong>( Eden 区 、 From Survivor 区 和 To Survivor 区 )和<strong>老年代</strong>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java2-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h6 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h6><p>是用来存放新生的对象。一般占据堆的1&#x2F;3空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden 区、ServivorFrom、ServivorTo 三个区。</p><ul><li><p>Eden区：Java新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当Eden区内存不够的时候就会触发MinorGC，对新生代区进行一次垃圾回收。</p></li><li><p>ServivorFrom：上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p></li><li><p>ServivorTo：保留了一次 MinorGC 过程中的幸存者。</p></li><li><p>MinorGC 的过程：（复制-&gt;清空-&gt;互换）MinorGC 采用复制算法。</p></li><li><p><strong>eden 、 servicorFrom  复制到 ServicorTo，年龄+1</strong><br>    首先，把 Eden和 ServivorFrom区域中存活的对象复制到 ServicorTo区域（如果有对象的年龄以及达到了老年的(默认15岁，可以通过-XXMaxTenuringThreshold设置)，则赋值到老年代区），同时把这些对象的年龄+1（如果 ServicorTo 不够位置了就放到老年区）。</p></li><li><p><strong>清空 eden 、 servicorFrom</strong>**<br>   清空 Eden 和 ServicorFrom 中的对象；</p></li><li><p><strong>ServicorTo 和 ServicorFrom 互换</strong><br>   最后，ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom区。</p></li></ul><h6 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h6><ul><li><p>主要存放应用程序中生命周期长的内存对象。</p></li><li><p>老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行 MajorGC 前一般都先进行了一次 MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。</p></li><li><p>MajorGC 采用<strong>标记清除算法</strong>：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。MajorGC 的耗时比较长，因为要扫描再回收。MajorGC 会产生内存碎片，为了减少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的时候，就会抛出 OOM（Out of Memory）异常。</p></li></ul><h6 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h6><p>-指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,<strong>GC 不会在主程序运行期对永久区域进行清理</strong>。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。</p><h6 id="JAVA8-与元数据"><a href="#JAVA8-与元数据" class="headerlink" title="JAVA8 与元数据"></a>JAVA8 与元数据</h6><p>在Java8中，<strong>永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代</strong>。元空间的本质和永久代类似，元空间与永久代之间最大的区别在于：<strong>元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制</strong>。类的元数据放入 nativememory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><h3 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1588125198-1.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h4><h6 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h6><ul><li>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用，即他们的引用计数都不为 0，则说明对象不太可能再被用到，那么这个对象就是可回收对象。</li></ul><h6 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h6><ul><li>为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索<strong>。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的</strong>。要注意的是，不可达对象不等价于可回收对象，<strong>不可达对象变为可回收对象至少要经过两次标记过程</strong>。两次标记后仍然是可回收对象，则将面临回收。</li></ul><h4 id="标记清除算法（-Mark-Sweep-）"><a href="#标记清除算法（-Mark-Sweep-）" class="headerlink" title="标记清除算法（ Mark-Sweep ）"></a>标记清除算法（ Mark-Sweep ）</h4><ol><li><p>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。如图  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>从图中我们就可以发现，该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可利用空间的问题。</p></li></ol><h4 id="复制算法（copying-）"><a href="#复制算法（copying-）" class="headerlink" title="复制算法（copying ）"></a>复制算法（copying ）</h4><ul><li><p>为了解决 Mark-Sweep 算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉，如图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原本的一半。且存活对象增多的话，Copying 算法的效率会大大降低。</p></li></ul><h4 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法(Mark-Compact)"></a>标记整理算法(Mark-Compact)</h4><p>结合了以上两个算法，为了避免缺陷而提出。标记阶段和 Mark-Sweep 算法相同，标<strong>记后不是清理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象</strong>。如图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul><li>分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将 GC 堆划分为老生代(Tenured&#x2F;Old Generation)和新生(YoungGeneration)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</li></ul><h5 id="新生代与复制算法"><a href="#新生代与复制算法" class="headerlink" title="新生代与复制算法"></a>新生代与复制算法</h5><ul><li><p>目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java2-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h5 id="老年代与标记复制算法"><a href="#老年代与标记复制算法" class="headerlink" title="老年代与标记复制算法"></a>老年代与标记复制算法</h5><p>而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</p><ul><li><p>JAVA 虚拟机提到过的处于<strong>方法区的永生代(Permanet Generation)，它用来存储 class 类，常量，方法描述等</strong>。对永生代的回收主要包括废弃常量和无用的类。</p></li><li><p>对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。</p></li><li><p>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，EdenSpace 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 FromSpace 进行清理。</p></li><li><p>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</p></li><li><p>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</p></li><li><p>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。</p></li></ul><h3 id="GC-分代收集算法-VS-分区收集算法"><a href="#GC-分代收集算法-VS-分区收集算法" class="headerlink" title="GC  分代收集算法 VS  分区收集算法"></a>GC  分代收集算法 VS  分区收集算法</h3><h4 id="分代收集算法-1"><a href="#分代收集算法-1" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前主流 JVM 垃圾收集都采用”分代收集”(Generational Collection)算法, 这种算法会根据对象存活周期的不同将内存划分为几块, 如 JVM 中的 <strong>新生代、老年代、永久代</strong>，这样就可以根据各年代特点分别采用最适当的 GC 算法。</p><ul><li><p><strong>在新生代-复制算法</strong>      <br>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法, 只需要付出少量存活对象的复制成本就可以完成收集。</p></li><li><p><strong>在老年代-标记整理算法</strong><br>因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“<strong>标记—清理”或“标记—整理”</strong>算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存。</p></li></ul><h4 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h4><p><strong>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间</strong> , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。</p><h3 id="GC-垃圾收集器"><a href="#GC-垃圾收集器" class="headerlink" title="GC 垃圾收集器"></a>GC 垃圾收集器</h3><p>Java 堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收 算法 ,年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="Serial-垃圾收集器-（单线程、-复制算法-）"><a href="#Serial-垃圾收集器-（单线程、-复制算法-）" class="headerlink" title="Serial  垃圾收集器 （单线程、 复制算法 ）"></a>Serial  垃圾收集器 （单线程、 复制算法 ）</h4><ul><li><strong>Serial（英文连续）是最基本垃圾收集器，使用复制算法</strong>，曾经是JDK1.3.1之前新生代唯一的垃圾收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 <strong>Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</strong></li></ul><h4 id="ParNew-垃圾收集器-（Serial-多线程-）"><a href="#ParNew-垃圾收集器-（Serial-多线程-）" class="headerlink" title="ParNew  垃圾收集器 （Serial+ 多线程 ）"></a>ParNew  垃圾收集器 （Serial+ 多线程 ）</h4><ul><li><strong>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法</strong>，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限制垃圾收集器的线程数。【Parallel：平行的】ParNew虽然是除了多线程外和Serial收集器几乎完全一样，<strong>但是ParNew垃圾收集器是很多java虚拟机运行在 Server 模式下新生代的默认垃圾收集器。</strong></li></ul><h4 id="Parallel-Scavenge-收集器-（多线程复制算法、高效）"><a href="#Parallel-Scavenge-收集器-（多线程复制算法、高效）" class="headerlink" title="Parallel Scavenge  收集器 （多线程复制算法、高效）"></a>Parallel Scavenge  收集器 （多线程复制算法、高效）</h4><ul><li>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，<strong>它重点关注的是程序达到一个可控制的吞吐量</strong>（Thoughput，CPU 用于运行用户代码的时间&#x2F;CPU 总消耗时间，即吞吐量&#x3D;运行用户代码时间&#x2F;(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。<strong>自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别。</strong></li></ul><h4 id="Serial-Old-收集器-单线程标记整理算法）"><a href="#Serial-Old-收集器-单线程标记整理算法）" class="headerlink" title="Serial Old  收集器 (单线程标记整理算法）"></a>Serial Old  收集器 (单线程标记整理算法）</h4><p>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。在 Server 模式下，主要有两个用途：<br>   1. 在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。<br>   2. 作为年老代中使用 CMS 收集器的后备垃圾收集方案。<br>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>新生代 Parallel Scavenge 收集器与 ParNew 收集器工作原理类似，都是多线程的收集器，都使用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 ParallelScavenge&#x2F;ParNew 与年老代 Serial Old 搭配垃圾收集过程图：                   </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="Parallel-Old-收集器（多线程标记整理算法）"><a href="#Parallel-Old-收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old  收集器（多线程标记整理算法）"></a>Parallel Old  收集器（多线程标记整理算法）</h4><p>Parallel Old收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="CMS-收集器-（多线程标记清除算法）"><a href="#CMS-收集器-（多线程标记清除算法）" class="headerlink" title="CMS  收集器 （多线程标记清除算法）"></a>CMS  收集器 （多线程标记清除算法）</h4><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：<br> <strong>1.初始标记</strong>：只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。<br> <strong>2.并发标记：</strong> 进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。<br> <strong>3.重新标记：</strong> 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。<br> <strong>4.并发清除：</strong> 清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并<br>发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看<strong>CMS 收集器的内存回收和用户线程是一起并发地执行。</strong>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1  收集器"></a>G1  收集器</h4><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收<br>集器两个最突出的改进是：</p><ol><li><p>基于标记-整理算法，不产生内存碎片。</p></li><li><p>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。<br><strong>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域</strong>，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，<strong>优先回收垃圾最多的区域</strong>。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爱心动画脚本</title>
    <link href="/2022/12/10/%E7%88%B1%E5%BF%83%E5%8A%A8%E7%94%BB/"/>
    <url>/2022/12/10/%E7%88%B1%E5%BF%83%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[ <style>        html, body {            height: 100%;            padding: 0;            margin: 0;        }        canvas {            width: 100%;            height: 350px;        }    </style><p><canvas id="pinkboard"></canvas></p><script>    /*     * Settings     */    var settings = {        particles: {            length:   500, // maximum amount of particles            duration:   2, // particle duration in sec            velocity: 100, // particle velocity in pixels/sec            effect: -0.75, // play with this for a nice effect            size:      30, // particle size in pixels        },    };    /*     * RequestAnimationFrame polyfill by Erik M?ller     */    (function(){var b=0;var c=["ms","moz","webkit","o"];for(var a=0;a<c.length&&!window.requestAnimationFrame;++a){window.requestAnimationFrame=window[c[a]+"RequestAnimationFrame"];window.cancelAnimationFrame=window[c[a]+"CancelAnimationFrame"]||window[c[a]+"CancelRequestAnimationFrame"]}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(h,e){var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f)},f);b=d+f;return g}}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d)}}}());    /*     * Point class     */    var Point = (function() {        function Point(x, y) {            this.x = (typeof x !== 'undefined') ? x : 0;            this.y = (typeof y !== 'undefined') ? y : 0;        }        Point.prototype.clone = function() {            return new Point(this.x, this.y);        };        Point.prototype.length = function(length) {            if (typeof length == 'undefined')                return Math.sqrt(this.x * this.x + this.y * this.y);            this.normalize();            this.x *= length;            this.y *= length;            return this;        };        Point.prototype.normalize = function() {            var length = this.length();            this.x /= length;            this.y /= length;            return this;        };        return Point;    })();    /*     * Particle class     */    var Particle = (function() {        function Particle() {            this.position = new Point();            this.velocity = new Point();            this.acceleration = new Point();            this.age = 0;        }        Particle.prototype.initialize = function(x, y, dx, dy) {            this.position.x = x;            this.position.y = y;            this.velocity.x = dx;            this.velocity.y = dy;            this.acceleration.x = dx * settings.particles.effect;            this.acceleration.y = dy * settings.particles.effect;            this.age = 0;        };        Particle.prototype.update = function(deltaTime) {            this.position.x += this.velocity.x * deltaTime;            this.position.y += this.velocity.y * deltaTime;            this.velocity.x += this.acceleration.x * deltaTime;            this.velocity.y += this.acceleration.y * deltaTime;            this.age += deltaTime;        };        Particle.prototype.draw = function(context, image) {            function ease(t) {                return (--t) * t * t + 1;            }            var size = image.width * ease(this.age / settings.particles.duration);            context.globalAlpha = 1 - this.age / settings.particles.duration;            context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);        };        return Particle;    })();    /*     * ParticlePool class     */    var ParticlePool = (function() {        var particles,            firstActive = 0,            firstFree   = 0,            duration    = settings.particles.duration;        function ParticlePool(length) {            // create and populate particle pool            particles = new Array(length);            for (var i = 0; i < particles.length; i++)                particles[i] = new Particle();        }        ParticlePool.prototype.add = function(x, y, dx, dy) {            particles[firstFree].initialize(x, y, dx, dy);            // handle circular queue            firstFree++;            if (firstFree   == particles.length) firstFree   = 0;            if (firstActive == firstFree       ) firstActive++;            if (firstActive == particles.length) firstActive = 0;        };        ParticlePool.prototype.update = function(deltaTime) {            var i;            // update active particles            if (firstActive < firstFree) {                for (i = firstActive; i < firstFree; i++)                    particles[i].update(deltaTime);            }            if (firstFree < firstActive) {                for (i = firstActive; i < particles.length; i++)                    particles[i].update(deltaTime);                for (i = 0; i < firstFree; i++)                    particles[i].update(deltaTime);            }            // remove inactive particles            while (particles[firstActive].age >= duration && firstActive != firstFree) {                firstActive++;                if (firstActive == particles.length) firstActive = 0;            }        };        ParticlePool.prototype.draw = function(context, image) {            // draw active particles            if (firstActive < firstFree) {                for (i = firstActive; i < firstFree; i++)                    particles[i].draw(context, image);            }            if (firstFree < firstActive) {                for (i = firstActive; i < particles.length; i++)                    particles[i].draw(context, image);                for (i = 0; i < firstFree; i++)                    particles[i].draw(context, image);            }        };        return ParticlePool;    })();    /*     * Putting it all together     */    (function(canvas) {        var context = canvas.getContext('2d'),            particles = new ParticlePool(settings.particles.length),            particleRate = settings.particles.length / settings.particles.duration, // particles/sec            time;        // get point on heart with -PI <= t <= PI        function pointOnHeart(t) {            return new Point(                160 * Math.pow(Math.sin(t), 3),                130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25            );        }        // creating the particle image using a dummy canvas        var image = (function() {            var canvas  = document.createElement('canvas'),                context = canvas.getContext('2d');            canvas.width  = settings.particles.size;            canvas.height = settings.particles.size;            // helper function to create the path            function to(t) {                var point = pointOnHeart(t);                point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;                point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;                return point;            }            // create the path            context.beginPath();            var t = -Math.PI;            var point = to(t);            context.moveTo(point.x, point.y);            while (t < Math.PI) {                t += 0.01; // baby steps!                point = to(t);                context.lineTo(point.x, point.y);            }            context.closePath();            // create the fill            context.fillStyle = '#f10404';            context.fill();            // create the image            var image = new Image();            image.src = canvas.toDataURL();            return image;        })();        // render that thing!        function render() {            // next animation frame            requestAnimationFrame(render);            // update time            var newTime   = new Date().getTime() / 1000,                deltaTime = newTime - (time || newTime);            time = newTime;            // clear canvas            context.clearRect(0, 0, canvas.width, canvas.height);            // create new particles            var amount = particleRate * deltaTime;            for (var i = 0; i < amount; i++) {                var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());                var dir = pos.clone().length(settings.particles.velocity);                particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);            }            // update and draw particles            particles.update(deltaTime);            particles.draw(context, image);        }        // handle (re-)sizing of the canvas        function onResize() {            canvas.width  = canvas.clientWidth;            canvas.height = canvas.clientHeight;        }        window.onresize = onResize;        // delay rendering bootstrap        setTimeout(function() {            onResize();            render();        }, 10);    })(document.getElementById('pinkboard'));</script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>秒杀系统设计的 5 个要点：前端三板斧＋后端两条路！</title>
    <link href="/2022/12/10/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%205%20%E4%B8%AA%E8%A6%81%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%8B%E5%90%8E%E7%AB%AF%E4%B8%A4%E6%9D%A1%E8%B7%AF%EF%BC%81/"/>
    <url>/2022/12/10/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%205%20%E4%B8%AA%E8%A6%81%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%8B%E5%90%8E%E7%AB%AF%E4%B8%A4%E6%9D%A1%E8%B7%AF%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：cfyme</p><p><a href="https://www.tuicool.com/articles/JzQvUb">https://www.tuicool.com/articles/JzQvUb</a></p></blockquote><h2 id="秒杀系统涉及到的知识点："><a href="#秒杀系统涉及到的知识点：" class="headerlink" title="秒杀系统涉及到的知识点："></a>秒杀系统涉及到的知识点：</h2><ul><li><p>高并发，cache，锁机制</p></li><li><p>基于缓存架构redis,Memcached的先进先出队列。</p></li><li><p>稍微大一点的秒杀，肯定是分布式的集群的，并发来自于多个节点的JVM，synchronized所有在JVM上加锁是不行了</p></li><li><p>数据库压力</p></li><li><p>秒杀超卖问题</p></li><li><p>如何防止用户来刷， 黑名单？IP限制？</p></li><li><p>利用memcached的带原子性特性的操作做并发控制.</p></li></ul><h2 id="秒杀简单设计方案如："><a href="#秒杀简单设计方案如：" class="headerlink" title="秒杀简单设计方案如："></a>秒杀简单设计方案如：</h2><p>比如有10件商品要秒杀，可以放到缓存中，读写时不要加锁。当并发量大的时候，可能有25个人秒杀成功，这样后面的就可以直接抛秒杀结束的静态页面。进去的25个人中有15个人是不可能获得商品的。所以可以根据进入的先后顺序只能前10个人购买成功。后面15个人就抛商品已秒杀完。</p><h2 id="假设我们的秒杀场景："><a href="#假设我们的秒杀场景：" class="headerlink" title="假设我们的秒杀场景："></a>假设我们的秒杀场景：</h2><p>比如某商品10件物品待秒. 假设有100台web服务器(假设web服务器是Nginx + Tomcat),n台app服务器,n个数据库</p><ol><li><p>第一步 如果Java层做过滤, 可以在每台web服务器的业务处理模块里做个计数器AtomicInteger(10)&#x3D;待秒商品总数,decreaseAndGet()&gt;＝0的继续做后续处理, &lt;0的直接返回秒杀结束页面.<code>这样经过第一步的处理只剩下100台*10个=1000个请求</code>.</p></li><li><p>第二步, memcached 里以商品id作为key的value放个10, 每个web服务器在接到每个请求的同时, 向memcached服务器发起请求, 利用memcached的decr(key,1)操作返回值&gt;&#x3D;0的继续处理, 其余的返回秒杀失败页面.<code>这样经过第二步的处理只剩下100台中最快速到达的10个请求</code>.</p></li><li><p>第三步, 向App服务器发起下单操作事务.</p></li><li><p>第四步, App服务器向商品所在的数据库请求减库存操作,</p></li></ol><p>(操作数据库时可以 <code>update table set count=count-1 where id=商品id and count&gt;0;</code> update 成功记录数为1, 再向订单数据库添加订单记录, 都成功后提交整个事务, 否则的话提示秒杀失败. 用户进入支付流程.</p><h2 id="在看看淘宝的秒杀："><a href="#在看看淘宝的秒杀：" class="headerlink" title="在看看淘宝的秒杀："></a>在看看淘宝的秒杀：</h2><h3 id="1、前端"><a href="#1、前端" class="headerlink" title="1、前端"></a>1、前端</h3><p>面对高并发的抢购活动，前端常用的三板斧是【扩容】【静态化】【限流】</p><ul><li><strong>扩容</strong></li></ul><p>加机器，这是最简单的方法，通过增加前端池的整体承载量来抗峰值。</p><ul><li><strong>静态化</strong></li></ul><p>将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素。通过CDN来抗峰值。</p><ul><li><strong>限流</strong></li></ul><p>一般都会采用IP级别的限流，即针对某一个IP，限制单位时间内发起请求数量。</p><p>或者活动入口的时候增加游戏或者问题环节进行消峰操作。</p><ul><li><strong>有损服务</strong></li></ul><p>最后一招，在接近前端池承载能力的水位上限的时候，随机拒绝部分请求来保护活动整体的可用性。</p><h3 id="2、后端"><a href="#2、后端" class="headerlink" title="2、后端"></a>2、后端</h3><p>那么后端的数据库在高并发和超卖下会遇到什么问题呢</p><ul><li><p>首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差。</p></li><li><p>其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的。</p></li><li><p>最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。</p></li></ul><h2 id="针对上述问题，如何解决呢？淘宝的高大上解决方案："><a href="#针对上述问题，如何解决呢？淘宝的高大上解决方案：" class="headerlink" title="针对上述问题，如何解决呢？淘宝的高大上解决方案："></a>针对上述问题，如何解决呢？淘宝的高大上解决方案：</h2><ul><li><p>关闭死锁检测，提高并发处理性能。</p></li><li><p>修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度。</p></li><li><p>组提交，降低server和引擎的交互次数，降低IO消耗。</p></li></ul><h3 id="解决方案1："><a href="#解决方案1：" class="headerlink" title="解决方案1："></a>解决方案1：</h3><p>将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。</p><p><strong>优点：</strong>解决性能问题</p><p><strong>缺点：</strong>没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险。</p><h3 id="解决方案2："><a href="#解决方案2：" class="headerlink" title="解决方案2："></a>解决方案2：</h3><p>引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。</p><p><strong>优点：</strong>解决超卖问题，略微提升性能。</p><p><strong>缺点：</strong>性能受限于队列处理机处理性能和DB的写入性能中最短的那个，另外多商品同时抢购的时候需要准备多条队列。</p><h3 id="解决方案3："><a href="#解决方案3：" class="headerlink" title="解决方案3："></a>解决方案3：</h3><p>将写操作前移到MC中，同时利用MC的轻量级的锁机制CAS来实现减库存操作。</p><p><strong>优点：</strong>读写在内存中，操作性能快，引入轻量级锁之后可以保证同一时刻只有一个写入成功，解决减库存问题。</p><p><strong>缺点：</strong>没有实测，基于CAS的特性不知道高并发下是否会出现大量更新失败？不过加锁之后肯定对并发性能会有影响。</p><h3 id="解决方案4："><a href="#解决方案4：" class="headerlink" title="解决方案4："></a>解决方案4：</h3><p>将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作，同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。</p><p><strong>优点：</strong>解决超卖问题，库存读写都在内存中，故同时解决性能问题。</p><p><strong>缺点：</strong>由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>1、前端三板斧【扩容】【限流】【静态化】</p><p>2、后端两条路【内存】+【排队】</p>]]></content>
    
    
    
    <tags>
      
      <tag>架构</tag>
      
      <tag>系统设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决PropertySource不能读取yml的问题</title>
    <link href="/2022/12/10/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98(1)/"/>
    <url>/2022/12/10/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98(1)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决PropertySource不能读取yml的问题</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2020年03月26日 17:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YamlConfigFactory</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultPropertySourceFactory</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sourceName</span> <span class="hljs-operator">=</span> name != <span class="hljs-literal">null</span> ? name : resource.getResource().getFilename();<br><span class="hljs-keyword">if</span> (!resource.getResource().exists()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(sourceName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>());<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sourceName.endsWith(<span class="hljs-string">&quot;.yml&quot;</span>) || sourceName.endsWith(<span class="hljs-string">&quot;.yaml&quot;</span>)) &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">propertiesFromYaml</span> <span class="hljs-operator">=</span> loadYml(resource);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(sourceName, propertiesFromYaml);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.createPropertySource(name, resource);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">loadYml</span><span class="hljs-params">(EncodedResource resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">YamlPropertiesFactoryBean</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlPropertiesFactoryBean</span>();<br>factory.setResources(resource.getResource());<br>factory.afterPropertiesSet();<br><span class="hljs-keyword">return</span> factory.getObject();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户自定义配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年07月05日 16:44</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@PropertySource(value=&quot;classpath:file-table-config.yml&quot;,factory = YamlConfigFactory.class)</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTableConfig</span> &#123;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 表达式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String corn;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 表和资源字段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> List&lt;String&gt; tables;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>轮子</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub 敏捷开发入门教程</title>
    <link href="/2022/12/10/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/10/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/03/">2019年3月 6日</a></p><p>敏捷开发（agile development）是非常流行的软件开发方法。据<a href="https://www.statista.com/statistics/673786/worldwide-software-development-survey-agile-development-continuous-integration-adoption/">统计</a>，2018年90%的软件开发采用敏捷开发。</p><p>但是，到底什么是敏捷开发，能说清的人却不多。本文尝试用简洁易懂的语言，解释敏捷开发。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030701.jpg"></p><h2 id="一、迭代开发"><a href="#一、迭代开发" class="headerlink" title="一、迭代开发"></a>一、迭代开发</h2><p>敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。</p><p>那么什么是”迭代开发”呢？迭代的英文是 iterative，直译为”重复”，迭代开发其实就是”重复开发”。</p><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030702.jpg"></p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><p>迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。</p><h2 id="二、增量开发"><a href="#二、增量开发" class="headerlink" title="二、增量开发"></a>二、增量开发</h2><p>迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？这时，一般采用”增量开发”（incremental development）划分迭代。</p><p>所谓”增量开发”，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030703.jpg"></p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><p>增量开发加上迭代开发，才算真正的敏捷开发。</p><h2 id="三、敏捷开发的好处"><a href="#三、敏捷开发的好处" class="headerlink" title="三、敏捷开发的好处"></a>三、敏捷开发的好处</h2><h3 id="3-1-早期交付"><a href="#3-1-早期交付" class="headerlink" title="3.1 早期交付"></a>3.1 早期交付</h3><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p><p>还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。</p><p>敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><h3 id="3-2-降低风险"><a href="#3-2-降低风险" class="headerlink" title="3.2 降低风险"></a>3.2 降低风险</h3><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p><p>请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><p>对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是”20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事”，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。</p><p>由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。</p><h2 id="四、如何进行每一次迭代"><a href="#四、如何进行每一次迭代" class="headerlink" title="四、如何进行每一次迭代"></a>四、如何进行每一次迭代</h2><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030704.jpg"></p><p>具体来说，每次迭代都必须依次完成以下五个步骤。</p><blockquote><ol><li><p>需求分析（requirements analysis）</p></li><li><p>设计（design）</p></li><li><p>编码（coding）</p></li><li><p>测试（testing）</p></li><li><p>部署和评估（deployment &#x2F; evaluation）</p></li></ol></blockquote><p>每个迭代大约持续2~6周。</p><h2 id="五、敏捷开发的价值观"><a href="#五、敏捷开发的价值观" class="headerlink" title="五、敏捷开发的价值观"></a>五、敏捷开发的价值观</h2><p>《敏捷软件开发宣言》里面提到四个价值观。</p><blockquote><ul><li><p>程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。</p></li><li><p>软件能够运行，优于详尽的文档。</p></li><li><p>跟客户的密切协作，优于合同和谈判。</p></li><li><p>能够响应变化，优于遵循计划。</p></li></ul></blockquote><h2 id="六、十二条原则"><a href="#六、十二条原则" class="headerlink" title="六、十二条原则"></a>六、十二条原则</h2><p>该宣言还提出十二条敏捷开发的原则。</p><ol><li><p>通过早期和持续交付有价值的软件，实现客户满意度。</p></li><li><p>欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。</p></li><li><p>不断交付可用的软件，周期通常是几周，越短越好。</p></li><li><p>项目过程中，业务人员与开发人员必须在一起工作。</p></li><li><p>项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。</p></li><li><p>面对面交谈是最好的沟通方式。</p></li><li><p>可用性是衡量进度的主要指标。</p></li><li><p>提倡可持续的开发，保持稳定的进展速度。</p></li><li><p>不断关注技术是否优秀，设计是否良好。</p></li><li><p>简单性至关重要，尽最大可能减少不必要的工作。</p></li><li><p>最好的架构、要求和设计，来自团队内部自发的认识。</p></li><li><p>团队要定期反思如何更有效，并相应地进行调整。</p></li></ol><h2 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h2><ul><li><p><a href="https://www.mindk.com/blog/iterative-development/">Iterative development: the secret to great product launches</a>, Pavlo Zinchenko</p></li><li><p><a href="https://en.wikipedia.org/wiki/Agile_software_development">Agile software development</a>, Wikipedia</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>项目管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注册中心ZooKeeper、Eureka、Consul 、Nacos对比</title>
    <link href="/2022/12/10/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83ZooKeeper%E3%80%81Eureka%E3%80%81Consul%20%E3%80%81Nacos%E5%AF%B9%E6%AF%94/"/>
    <url>/2022/12/10/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83ZooKeeper%E3%80%81Eureka%E3%80%81Consul%20%E3%80%81Nacos%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>服务注册中心本质上是为了解耦服务提供者和服务消费者。对于任何一个微服务，原则上都应存在或者支持多个提供者，这是由微服务的分布式属性决定的。更进一步，为了支持弹性扩缩容特性，一个微服务的提供者的数量和分布往往是动态变化的，也是无法预先确定的。因此，原本在单体应用阶段常用的静态LB机制就不再适用了，需要引入额外的组件来管理微服务提供者的注册与发现，而这个组件就是服务注册中心。</p><h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>CAP理论是分布式架构中重要理论</p><blockquote><ul><li><p>一致性(Consistency) (所有节点在同一时间具有相同的数据)</p></li><li><p>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</p></li><li><p>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</p></li></ul></blockquote><p>关于</p><p>P的理解，我觉得是在整个系统中某个部分，挂掉了，或者宕机了，并不影响整个系统的运作或者说使用，</p><p>而可用性是，某个系统的某个节点挂了，但是并不影响系统的接受或者发出请求，CAP 不可能都取，只能取其中2个</p><p>原因是</p><p>如果C是第一需求的话，那么会影响A的性能，因为要数据同步，不然请求结果会有差异，但是数据同步会消耗时间，期间可用性就会降低。</p><p>如果A是第一需求，那么只要有一个服务在，就能正常接受请求，但是对与返回结果变不能保证，原因是，在分布式部署的时候，数据一致的过程不可能想切线路那么快。</p><p>再如果，同事满足一致性和可用性，那么分区容错就很难保证了，也就是单点，也是分布式的基本核心，好了，明白这些理论，就可以在相应的场景选取服务注册与发现了</p><p> </p><h1 id="服务注册中心解决方案"><a href="#服务注册中心解决方案" class="headerlink" title="服务注册中心解决方案"></a>服务注册中心解决方案</h1><p>设计或者选型一个服务注册中心，首先要考虑的就是服务注册与发现机制。纵观当下各种主流的服务注册中心解决方案，大致可归为三类：</p><ul><li><p>应用内：直接集成到应用中，依赖于应用自身完成服务的注册与发现，最典型的是Netflix提供的<a href="https://github.com/Netflix/eureka">Eureka</a></p></li><li><p>应用外：把应用当成黑盒，通过应用外的某种机制将服务注册到注册中心，最小化对应用的侵入性，比如Airbnb的<a href="http://nerds.airbnb.com/smartstack-service-discovery-cloud/">SmartStack</a>，HashiCorp的<a href="https://www.consul.io/">Consul</a></p></li><li><p>DNS：将服务注册为DNS的SRV记录，严格来说，是一种特殊的应用外注册方式，<a href="https://github.com/skynetservices/skydns">SkyDNS</a>是其中的代表</p></li></ul><p><em>注1：对于第一类注册方式，除了Eureka这种一站式解决方案，还可以基于ZooKeeper或者Etcd自行实现一套服务注册机制，这在大公司比较常见，但对于小公司而言显然性价比太低。</em></p><p><em>注2：由于DNS固有的缓存缺陷，本文不对第三类注册方式作深入探讨。</em></p><p>除了基本的服务注册与发现机制，从开发和运维角度，至少还要考虑如下五个方面：</p><ul><li><p>测活：服务注册之后，如何对服务进行测活以保证服务的可用性？</p></li><li><p>负载均衡：当存在多个服务提供者时，如何均衡各个提供者的负载？</p></li><li><p>集成：在服务提供端或者调用端，如何集成注册中心？</p></li><li><p>运行时依赖：引入注册中心之后，对应用的运行时环境有何影响？</p></li><li><p>可用性：如何保证注册中心本身的可用性，特别是消除单点故障？</p></li></ul><p> </p><h1 id="主流注册中心产品"><a href="#主流注册中心产品" class="headerlink" title="主流注册中心产品"></a>主流注册中心产品</h1><p> </p><table><thead><tr><th align="left"></th><th align="left">Nacos</th><th align="left">Eureka</th><th align="left">Consul</th><th align="left">CoreDNS</th><th align="left">Zookeeper</th></tr></thead><tbody><tr><td align="left">一致性协议</td><td align="left">CP+AP</td><td align="left">AP</td><td align="left">CP</td><td align="left">—</td><td align="left">CP</td></tr><tr><td align="left">健康检查</td><td align="left">TCP&#x2F;HTTP&#x2F;MYSQL&#x2F;Client Beat</td><td align="left">Client Beat</td><td align="left">TCP&#x2F;HTTP&#x2F;gRPC&#x2F;Cmd</td><td align="left">—</td><td align="left">Keep Alive</td></tr><tr><td align="left">负载均衡策略</td><td align="left">权重&#x2F;</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">metadata&#x2F;Selector</td><td align="left">Ribbon</td><td align="left">Fabio</td><td align="left">RoundRobin</td><td align="left">—</td><td align="left"></td></tr><tr><td align="left">雪崩保护</td><td align="left">有</td><td align="left">有</td><td align="left">无</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">自动注销实例</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">访问协议</td><td align="left">HTTP&#x2F;DNS</td><td align="left">HTTP</td><td align="left">HTTP&#x2F;DNS</td><td align="left">DNS</td><td align="left">TCP</td></tr><tr><td align="left">监听支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">多数据中心</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">跨注册中心同步</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">SpringCloud集成</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">Dubbo集成</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">K8S集成</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td></tr></tbody></table><h2 id="Apache-Zookeeper-gt-CP"><a href="#Apache-Zookeeper-gt-CP" class="headerlink" title="Apache Zookeeper -&gt; CP"></a>Apache Zookeeper -&gt; CP</h2><p>与 Eureka 有所不同，Apache Zookeeper 在设计时就紧遵CP原则，即任何时候对 Zookeeper 的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性，但是 Zookeeper 不能保证每次服务请求都是可达的。</p><p>从 Zookeeper 的实际应用情况来看，在使用 Zookeeper 获取服务列表时，如果此时的 Zookeeper 集群中的 Leader 宕机了，该集群就要进行 Leader 的选举，又或者 Zookeeper 集群中半数以上服务器节点不可用（例如有三个节点，如果节点一检测到节点三挂了 ，节点二也检测到节点三挂了，那这个节点才算是真的挂了），那么将无法处理该请求。所以说，Zookeeper 不能保证服务可用性。</p><p>当然，在大多数分布式环境中，尤其是涉及到数据存储的场景，数据一致性应该是首先被保证的，这也是 Zookeeper 设计紧遵CP原则的另一个原因。</p><p>但是对于服务发现来说，情况就不太一样了，针对同一个服务，即使注册中心的不同节点保存的服务提供者信息不尽相同，也并不会造成灾难性的后果。</p><p>因为对于服务消费者来说，能消费才是最重要的，消费者虽然拿到可能不正确的服务实例信息后尝试消费一下，也要胜过因为无法获取实例信息而不去消费，导致系统异常要好（淘宝的双十一，京东的618就是紧遵AP的最好参照）。</p><p>当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30~120s，而且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</p><p>在云部署环境下， 因为网络问题使得zk集群失去master节点是大概率事件，虽然服务能最终恢复，但是漫长的选举事件导致注册长期不可用是不能容忍的。</p><p> </p><h2 id="Spring-Cloud-Eureka-gt-AP"><a href="#Spring-Cloud-Eureka-gt-AP" class="headerlink" title="Spring Cloud Eureka  -&gt; AP"></a>Spring Cloud Eureka  -&gt; AP</h2><p> </p><p><img src="https://img-blog.csdnimg.cn/20190823093426246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseTkxMDkwNQ==,size_16,color_FFFFFF,t_70"></p><p>Spring Cloud Netflix 在设计 Eureka 时就紧遵AP原则（尽管现在2.0发布了，但是由于其闭源的原因 ，但是目前 Ereka 1.x 任然是比较活跃的）。</p><p>Eureka Server 也可以运行多个实例来构建集群，解决单点问题，但不同于 ZooKeeper 的选举 leader 的过程，Eureka Server 采用的是Peer to Peer 对等通信。这是一种去中心化的架构，无 master&#x2F;slave 之分，每一个 Peer 都是对等的。在这种架构风格中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的 serviceUrl 指向其他节点。每个节点都可被视为其他节点的副本。  </p><p>在集群环境中如果某台 Eureka Server 宕机，Eureka Client 的请求会自动切换到新的 Eureka Server 节点上，当宕机的服务器重新恢复后，Eureka 会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会在节点间进行复制（replicate To Peer）操作，将请求复制到该 Eureka Server 当前所知的其它所有节点中。  </p><p>当一个新的 Eureka Server 节点启动后，会首先尝试从邻近节点获取所有注册列表信息，并完成初始化。Eureka Server 通过 getEurekaServiceUrls() 方法获取所有的节点，并且会通过心跳契约的方式定期更新。</p><p>默认情况下，如果 Eureka Server 在一定时间内没有接收到某个服务实例的心跳（默认周期为30秒），Eureka Server 将会注销该实例（默认为90秒， eureka.instance.lease-expiration-duration-in-seconds 进行自定义配置）。</p><p>当 Eureka Server 节点在短时间内丢失过多的心跳时，那么这个节点就会进入自我保护模式。</p><p>Eureka的集群中，只要有一台Eureka还在，就能保证注册服务可用（保证可用性），只不过查到的信息可能不是最新的（不保证强一致性）。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ol><li><p>Eureka不再从注册表中移除因为长时间没有收到心跳而过期的服务；</p></li><li><p>Eureka仍然能够接受新服务注册和查询请求，但是不会被同步到其它节点上（即保证当前节点依然可用）；</p></li><li><p>当网络稳定时，当前实例新注册的信息会被同步到其它节点中；</p></li></ol><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使得整个注册服务瘫痪。</p><h2 id="Consul："><a href="#Consul：" class="headerlink" title="Consul："></a>Consul：</h2><p>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。Consul 使用 Go 语言编写，因此具有天然可移植性（支持Linux、windows和Mac OS X）。</p><p>Consul 内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key&#x2F;Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等），使用起来也较为简单。</p><p>Consul 遵循CAP原理中的CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用。</p><p><img src="https://img-blog.csdnimg.cn/20190823093438619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseTkxMDkwNQ==,size_16,color_FFFFFF,t_70">默认依赖于SDK</p><p> </p><p> Consul本质上属于应用外的注册方式，但可以通过SDK简化注册流程。而服务发现恰好相反，默认依赖于SDK，但可以通过Consul Template（下文会提到）去除SDK依赖。</p><p><img src="https://img-blog.csdnimg.cn/20190823093459885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseTkxMDkwNQ==,size_16,color_FFFFFF,t_70">Consul Template</p><p>Consul Template</p><p>Consul，默认服务调用者需要依赖Consul SDK来发现服务，这就无法保证对应用的零侵入性。</p><p>所幸通过<a href="https://github.com/hashicorp/consul-template">Consul Template</a>，可以定时从Consul集群获取最新的服务提供者列表并刷新LB配置（比如nginx的upstream），这样对于服务调用者而言，只需要配置一个统一的服务调用地址即可。</p><p> </p><p>Consul强一致性(C)带来的是：</p><ol><li><p>服务注册相比Eureka会稍慢一些。因为Consul的raft协议要求必须过半数的节点都写入成功才认为注册成功</p></li><li><p>Leader挂掉时，重新选举期间整个consul不可用。保证了强一致性但牺牲了可用性。</p></li></ol><p>Eureka保证高可用(A)和最终一致性：</p><ol><li><p>服务注册相对要快，因为不需要等注册信息replicate到其他节点，也不保证注册信息是否replicate成功</p></li><li><p>当数据出现不一致时，虽然A, B上的注册信息不完全相同，但每个Eureka节点依然能够正常对外提供服务，这会出现查询服务信息时如果请求A查不到，但请求B就能查到。如此保证了可用性但牺牲了一致性。</p></li></ol><p>其他方面，eureka就是个servlet程序，跑在servlet容器中; Consul则是go编写而成。</p><h2 id="Nacos："><a href="#Nacos：" class="headerlink" title="Nacos："></a>Nacos：</h2><p>Nacos是阿里开源的，Nacos 支持基于 DNS 和基于 RPC 的服务发现。在Spring Cloud中使用Nacos，只需要先下载 Nacos 并启动 Nacos server，Nacos只需要简单的配置就可以完成服务的注册发现。</p><p>Nacos除了服务的注册发现之外，还支持动态配置服务。动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>一句话概括就是Nacos &#x3D; Spring Cloud注册中心 + Spring Cloud配置中心。   </p><p>参考链接：</p><p><a href="https://yq.aliyun.com/articles/698930">https://yq.aliyun.com/articles/698930</a></p><p><a href="https://nacos.io/">https://nacos.io</a></p><p>转载来源 <a href="https://blog.csdn.net/fly910905/article/details/100023415">https://blog.csdn.net/fly910905/article/details/100023415</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈微服务</title>
    <link href="/2022/12/10/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/12/10/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来源：后端技术杂谈</p><p><a href="http://www.rowkey.me/blog/2019/05/30/msa/">www.rowkey.me/blog/2019/05/30/msa/</a></p></blockquote><p>这几年在Java工程师招聘时，会看到很多人的简历都写着使用了Spring Cloud做微服务实现，使用Docker做自动化部署，并且也会把这些做为自己的亮点。而比较有趣的这其中以小公司出来的人为绝大多数，大的公司出来的人简历上倒是很少提这些东西。</p><p>对于我自己来说，从15年就开始关注这一块，看过马丁.福勒最开始的关于微服务的论文、也看过不少对微服务的论证的英文文章和书，也研究过Spring Cloud、Sofa等开源实现以及Service mesh。考虑到我们公司研发团队人力不足、基础设施不完善，当初是没有推行微服务的。但随着看到上述的那种简历越来越多，有时候我也会疑问：难道真的不用微服务就落后了吗？公司的同事如果不掌握这些就真的没有竞争力了吗。而随着最近公司业务的逐步提升，研发人员越来越多，借着在梳理公司的微服务落地计划时，也梳理了一下微服务的相关知识点，也是本文的主要内容。</p><p>开篇之前先声明我对微服务的几点态度:</p><blockquote><p>★</p><ol><li>架构模式有很多，微服务不是唯一的选择也不是什么银弹。国内绝大多数中小公司引入微服务都是在盲目追新，也能看出做此种技术选型的工程师基础架构素质的不足。</li><li>“你必须长的足够高才能使用微服务”。微服务基础设施，尤其是容器技术、自动化部署、自动化测试这些不完备，微服务形同虚设，不会带来什么质的提升。</li><li>微服务架构的关键不在于具体的实现，而在于如何合理地划分服务边界以及组织架构是否相匹配。不考虑研发团队的规模和组成就盲目上微服务是不良的技术选型。</li><li>Spring Boot是Spring全家桶的上层封装，并不是什么崭新的技术，也不是什么值得觉得成为自己杀手锏的技术。</li><li>Spring Cloud中Spring Cloud Netflix的组件是经过生产环境验证的，其他的则建议慎重选择。</li></ol><p>”</p></blockquote><h2 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h2><p>微服务起源于2005年Peter Rodgers博士在云端运算博览会提出的微Web服务(Micro-Web-Service)，根本思想类似于Unix的管道设计理念。2014年，由Martin Fowler 与 James Lewis共同提出了微服务的概念，定义了微服务架构风格是一种通过一套小型服务来开发单个应用的方法，每个服务运行在自己的进程中，并通过轻量级的机制进行通讯（HTTP API）。关键的三点是<strong>small、automated以及lightweight</strong>。</p><p>对比SOA，微服务可以看做是SOA的子集，是轻量级的SOA，粒度更细的服务，独立进程、数据分离，更注重<strong>敏捷、持续交付、DevOps以及去中心化实践</strong>。其共同的<strong>架构原理</strong>：</p><ul><li>单一职责</li><li>关注分离：控制与逻辑相分离</li><li>模块化和分而治之</li></ul><p><strong>特点</strong>：</p><ul><li>用服务进行组件化</li><li>围绕业务能力进行组织</li><li>是产品而非项目</li><li>端点智能化和哑管道: 控制逻辑都在端点，管道仅仅是传输</li><li>全自动化部署</li><li>语言和数据的去中心化控制</li><li>面向失败设计</li><li>渐进式设计</li></ul><p>综合来看，其优缺点如下：</p><p><strong>优点</strong>：</p><ul><li>模块的强边界</li><li>独立部署</li><li>技术选型的多样性</li></ul><p><strong>缺点</strong>：</p><ul><li>分布式带来编程复杂度，远程调用的消耗</li><li>舍弃强一致性，实现最终一致性</li><li>操作复杂性要求有一个成熟的运维团队或者运维基础设施</li></ul><h2 id="为什么要采用微服务"><a href="#为什么要采用微服务" class="headerlink" title="为什么要采用微服务"></a>为什么要采用微服务</h2><p>是否选择微服务取决于你要设计的系统的复杂度。微服务是用来把控复杂系统的，但是随之而来的就是引入了微服务本身的复杂度。需要解决包括自动化部署、监控、容错处理、最终一致性等其他分布式系统面临的问题。即使已经有一些普遍使用的解决方案，但是仍然是有不小的成本的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java10-1583638183.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><p>生产力和复杂度的关系如图所示，可见系统越复杂，微服务带来的收益越大。此外，无论是单体应用还是微服务，团队的技能都需要能够把控住。</p><p>马丁.福勒的一个观点是：除非管理单体应用的成本已经太复杂了（太大导致很难修改和部署），否则都不要考虑微服务。大部分应用都应该选择单体架构，做好单体应用的模块化而不是拆分成服务。</p><p>因此，<strong>系统一开始采用单体架构，做好模块化，之后随着系统变得越来越复杂、模块&#x2F;服务间的边界越来越清晰，再重构为微服务架构是一个合理的架构演化路径。</strong></p><p><strong>四个可以考虑上微服务的情况</strong>：</p><ol><li>多人开发一个模块&#x2F;项目，提交代码频繁出现大量冲突。</li><li>模块间严重耦合，互相依赖，每次变动需要牵扯多个团队，单次上线需求太多，风险大。</li><li>主要业务和次要业务耦合，横向扩展流程复杂。</li><li>熔断降级全靠if-else。</li></ol><p><strong>微服务的三个阶段</strong>：</p><ol><li>微服务1.0：仅使用注册发现，基于SpringCloud或者Dubbo进行开发。</li><li>微服务2.0：使用了熔断、限流、降级等服务治理策略，并配备完整服务工具和平台。</li><li>微服务3.0：Service Mesh将服务治理作为通用组件，下沉到平台层实现，应用层仅仅关注业务逻辑，平台层可以根据业务监控自动调度和参数调整，实现AIOps和智能调度。</li></ol><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>快速的环境提供能力：依赖于云计算、容器技术，快速交付环境。</li><li>基本的监控能力：包括基础的技术监控和业务监控。</li><li>快速的应用部署能力：需要部署管道提供快速的部署能力。</li><li>Devops文化：需要具有良好的持续交付能力，包括全链路追踪、快速环境提供和部署等，还需要快速的反应能力（对问题、故障的快速响应），开发和运维的协同工作。</li></ul><p>此外，根据康威定律和逆康威定律（技术架构倒逼组织架构改进），组织架构也是一个很关键的因素。对应于微服务架构，组织架构需要遵循以下原则：</p><ol><li>一个微服务由一个团队维护，团队成员以三人为宜。</li><li>单个团队的任务和发展是独立的，不受其他因素影响。</li><li>团队是功能齐全、全栈、自治的，扁平、自我管理。</li></ol><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><p>微服务的推行需要依赖于很多底层基础设施，包括提供微服务的编译、集成、打包、部署、配置等工作，采用PaaS平台解决微服务从开发到运行的全生命周期管理，同时提供异构环境管理、容器资源隔离与互通、服务伸缩漂移、服务升级与回退、服务熔断与降级、服务注册与发现。</p><ol><li><p>最基本的基础设施</p><ul><li>进程间通讯机制：微服务是独立进程的，需要确定之间的通讯方式。</li><li>服务发现+服务路由: 提供服务注册中心，服务提供者和消费者通过服务发现获取服务的信息从而调用服务，实现服务的负载均衡等。</li><li>服务容错：微服务架构中，由于服务非常多，往往是一个服务挂了，整个请求链路的服务都受到影响，因此需要服务容错，在服务调用失败的时候能够处理错误或者快速失败，包括熔断、fallback、重试、流控和服务隔离等。</li><li>分布式事务支持：随着业务拆分为服务，那么有时候不可避免的就是跨服务的事务，即分布式事务的问题。原则是尽量避免分布式事务，如果无法避免那么可以使用消息系统或者CQRS和Event Sourcing方案来实现最终一致性。如果需要强一致性，则有两阶段提交、三阶段提交、TCC等分布式事务解决方案。</li></ul></li><li><p>提升外部服务对接效率和内部开发效率</p><ul><li>API网关: 负责外部系统的访问，负责跨横切面的公共层面的工作，包括安全、日志、权限控制、传输加密、请求转发、流量控制等。典型的网关功能即对外暴露一个域名xx.com，根据第一级目录做反向路由xx.com&#x2F;user，xx.com&#x2F;trade。每一级目录，如user、trade对应一个服务的域名。此外，API网关也可以有服务编排的功能（不推荐）。</li><li>接口框架: 规范服务之间通讯使用的数据格式、解析包、自解释文档，便于服务使用方快速上手等。</li></ul></li><li><p>提升测试和运维效率</p><ul><li>持续集成：这一部分并非是微服务特定的，对于之前的单体应用，此部分一般来说也是必要的。主要是指通过自动化手段，持续地对代码进程编译构建、自动化测试，以得到快速有效的质量反馈，从而保证代码的顺利交付。自动化测试包括代码级别的单元测试、单个系统的集成测试、系统间的接口测试。</li><li>自动化部署：微服务架构，节点数动辄上百上千，自动化部署能够提高部署速度和部署频率，从而保证持续交付。包括版本管理、资源管理、部署操作、回滚操作等功能。而对于微服务的部署方式，包括<strong>蓝绿部署、滚动部署以及金丝雀部署</strong>。</li><li>配置中心: 运行时配置管理能够解决动态修改配置并批量生效的问题。包括配置版本管理、配置项管理、节点管理、配置同步等。</li><li>持续交付：包括持续集成、自动化部署等流程。目的就是小步迭代，快速交付。</li></ul></li><li><p>进一步提升运维效率</p><ul><li>服务监控: 微服务架构下节点数目众多，需要监控的机器、网络、进程、接口等的数量大大增加，需要一个强大的监控系统，能够提供实时搜集信息进行分析以及实时分析之上的预警。包括监控服务的<strong>请求次数、响应时间分布、最大&#x2F;最小响应值、错误码分布</strong>等</li><li>服务跟踪：跟踪一个请求的完整路径，包括<strong>请求发起时间、响应时间、响应码、请求参数、返回结果</strong>等信息，也叫做全链路跟踪。通常的服务监控可以和服务监控做在一起，宏观信息由服务跟踪呈现，微观单个服务&#x2F;节点的信息由服务监控呈现。服务跟踪目前的实现理论基本都是Google的Dapper论文。</li><li>服务安全：内网之间的微服务调用原则上讲应该是都可以互相访问写，一般并不需要权限控制，但有时候限于业务要求，会对接口、数据等方面有安全控制的要求。此部分可以以配置的方式存在于服务注册中心中，和服务绑定，在请求时由做为服务提供者的服务节点进行安全策略控制。配置则可以存储在配置中心以方便动态修改。</li></ul></li></ol><p>在微服务数量很少的情况下，以上基础设施的优先级自上而下降低。否则，仅仅依赖人工操作，则投入产出比会很低。</p><p>还需要提到的是Docker容器技术。虽然这个对于微服务并不是必须的，但是容器技术<strong>轻量级、灵活、与应用依存、屏蔽环境差异</strong>的特性对于持续交付的实现是至关重要的，即使对于传统的单体应用也能够给其带来交付效率的大幅提升。</p><h3 id="架构设计模式"><a href="#架构设计模式" class="headerlink" title="架构设计模式"></a>架构设计模式</h3><p>在引入微服务之后，传统的单体应用变为了一个一个服务，之前一个应用直接提供接口给客户端访问的架构不再适用。微服务架构下，针对不同设备的接口做为BFF层（Backend For Frontend），也叫做用户体验适配层，负责聚合、编排微服务的数据转换成前端需要的数据。服务之间的调用则在允许的情况下（允许延迟）尽可能使用异步消息传递方式，如此形成<strong>面向用户体验的微服务架构设计模式</strong>。如下图所示：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java4-1583638183.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><p><strong>Client -&gt; API Gateway -&gt; BFF（Backend For Frontend） -&gt; Downstream Microservices</strong></p><ul><li>后台采用微服务架构，微服务可以采用不同的编程语言和不同的存储机制。</li><li>前台采用BFF模式对不同的用户体验（如桌面浏览器，Native App，平板响应式Web）进行适配。</li><li>BFF、API Orchestration Layer，Edge Service Layer，Device Wrapper Layer是相同的概念。</li><li>BFF不能过多，过多会造成代码逻辑重复冗余。</li><li>可以将网关承担的功能，如Geoip、限流、安全认证等跨横切面功能和BFF做在同一层，虽然增加了BFF层的复杂性，但能够得到性能优势。</li></ul><h3 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h3><p>微服务架构最核心的环节，主要是对服务的<strong>横向拆分</strong>。服务拆分就是讲一个完整的业务系统解耦为服务，<strong>服务需要职责单一，之间没有耦合关系，能够独立开发和维护</strong>。</p><p>服务拆分不是一蹴而就的，需要在开发过程中不断地理清边界。在完全理清服务之前，尽量推迟对服务的拆分，尤其是对数据库的拆分。</p><p><strong>拆分方法</strong>如下：</p><ul><li>基于业务逻辑拆分</li><li>基于可扩展拆分</li><li>基于可靠性拆分</li><li>基于性能拆分</li></ul><p>其中，对于无法修改的遗留系统，采用绞杀者模式：在遗留系统外面增加新的功能做成微服务方式，而不是直接修改原有系统，逐步的实现对老系统替换。</p><p><strong>拆分过程需要遵守的规范</strong>如下：</p><ul><li>先少后多、先粗后细（粒度）</li><li>服务纵向拆分最多三层，两次调用：Controller、组合服务、基础服务</li><li>仅仅单向调用，禁止循环调用</li><li>串行调用改为并行调用或者异步化</li><li>接口应该幂等</li><li>接口数据定义严禁内嵌，透传</li><li>规范化工程名</li><li>先拆分服务，等服务粒度确定后再拆分数据库。</li></ul><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>上面讲述了微服务架构的众多基础设施，如果每一个基础设施都需要自己开发的话是非常巨大的开发工作。目前市面上已经有不少开源的微服务框架可以选择。</p><ol><li><p>Spring Boot</p><p>Spring Boot是用来简化新Spring应用的初始搭建以及开发过程的。其虽然不是微服务框架，但其设计的初衷本质就是微应用的底层框架，因此非常适合用于微服务基础设施的开发以及微服务的应用开发。尤其对于Spring技术栈的团队来说，基于Spring Boot开发微服务框架和应用是自然而然的一个选择。</p></li><li><p>Dubbo&amp;&amp;Motan</p><p>Dubbo阿里开源的服务治理框架。其出现在微服务理念兴起之前，可以看做是SOA框架的集大成之作。但其仅仅包含了微服务基础设施的部分功能，诸如熔断、服务跟踪、网关等都没有实现。</p><p>Motan则是微博开源的类似Dubbo的RPC框架，与Dubbo相比更轻量级。</p><ul><li>服务发现 ：服务发布、订阅、通知</li><li>高可用策略 ：失败重试（Failover）、快速失败（Failfast）、资源隔离 - 负载均衡 ：最少活跃连接、一致性 Hash、随机请求、轮询等</li><li>扩展性 ：支持 SPI 扩展（service provider interface）</li><li>其他 ：调用统计、访问日志等</li></ul></li><li><p>Spring Cloud</p><p>Spring Cloud是基于Spring Boot实现的微服务框架，也可以看做一套微服务实现规范。基本涵盖了微服务基础设施的方方面面，包括配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等。其基于Spring生态，社区支持非常好。但其很多组件都没有经过生产环境验证，需要慎重选择。</p><p>Spring Cloud Netflix是Spring Cloud的一个子项目，是Spring对Netflix OSS的集成实现。基于Netflix的大规模使用，其中的已经被广泛使用的组件包括：</p><p>此外，另一个子项目Spring Cloud Alibaba则是Alibaba开源的基于Spring Boot的微服务框架，主要是对阿里云服务的支持。</p><ul><li>Eureka：服务注册和服务发现</li><li>Ribbon：弹性而智能的进程间和服务通讯机制，客户端负载均衡</li><li>Hystrix：熔断器，在运行时提供延迟和容错的隔离</li><li>Zuul: 服务网关</li></ul></li><li><p>Service Mesh</p><p>上述的微服务框架都是侵入式的，服务化的过程都需要进行代码改造。Service Mesh则是下一代微服务架构，最明显的特征就是无入侵。采用sidecar模式来解决系统架构微服务化后的服务间通信和治理问题。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1583638184.png" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p></li></ol><p>    如上图所示，目前主流的开源实现包括：</p><pre><code class="hljs">* Linkerd和Envoy：以 sidecar 为核心，关注如何做好proxy，并完成一些通用控制平面的功能。缺乏对这些sidecar的管理和控制。* Istio和Conduit：目前最为流行的Service Mesh实现方案，集中在更加强大的控制平面\(sidecar被称为数据平面\)功能。前者由Google和IBM合作，并使用了Envoy作为sidecar部分的实现；后者则是Linkerd作者的作品。相比起来，Istio有巨头背景，功能强大，但可用性和易用性一直不高，Conduit则相对简单、功能聚焦。</code></pre><p>限于Service Mesh带来的性能延迟的开销以及sidecar对分布复杂性的增加，其对大规模部署(微服务数目多)、异构复杂(交互协议&#x2F;开发语言类型多)的微服务架构带来的收益会更大。</p><p>6. Sofastack</p><p>   蚂蚁金服开源的构建金融级分布式架构的一套中间件。包     括微服务开发框架、RPC框架、服务注册中心、全链路追     踪、服务监控、Service Mesh等一整套分布式应用开发     工具。</p><p>   特别值得一提的是SOFAMesh。其是对下一代微服务架       构Service Mesh的大规模落地方案实践，基于 Istio改     进和扩展而来，应该是国内最为成熟的开源Service         Mesh方案。</p><p>此外，需要提到**Kubernetes(K8s)**，其本身提供了部分的微服务特性支持（通过域名做服务发现），对代码无侵入。但服务调用、熔断这些都需要自己实现。</p><p>综上，目前公司技术团队技术栈是Spring，并且已有服务的实现都是基于Dubbo，因此选择Spring Cloud Netflix做为基础的微服务框架，对其中不成熟或者缺乏的组件，选择业界更为成熟的组件替代即可。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1583638184.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><ul><li>API网关：Zuul</li><li>服务注册中心：Dubbo</li><li>配置中心：disconf</li><li>服务监控&amp;&amp;全链路追踪：CAT</li><li>服务开发框架：Spring Boot</li><li>日志监控、告警：ELK + Elasalert</li><li>流量控制：Sentinel</li><li>消息队列：Kafka</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>What’s so bad about monoliths anyway…?!</li><li>Microservice</li><li>MicroservicePremium</li><li>Microservice Trade-Offs</li><li>MicroservicePrerequisites</li><li>MonolithFirst</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI2MzM3MzkyMg==&mid=2247486544&idx=1&sn=999be8b4f06150b96d9a46ada6bb9ded&chksm=eabd995dddca104bd3c6262d491572f7be9b2a763a43a388f66bd0e90e4bd60e5037727107e4&mpshare=1&scene=21&srcid=0201lT7ZBVBGmTki8bYnmDgl#wechat_redirect">服务怎么拆？</a></li><li>BFF@SoundCloud</li><li>Service Mesh 及其主流开源实现解析</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>spring</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="/2022/12/10/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2022/12/10/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="计算机中线程的基本概念"><a href="#计算机中线程的基本概念" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><span id="more"></span><h3 id="计算机中线程的基本概念-1"><a href="#计算机中线程的基本概念-1" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><ol><li><p>CPU核心数，线程数之间有什么关系？</p><blockquote><p>CPU核心数量和线程数量一般情况下为1:1的关系，但是使用了超线程技术后，比例为1:2，这个技术是指CPU的工业技术。window可以在任务管理器查看，就是我们常说的4核八线程，4核4线程。</p></blockquote></li><li><p>什么是指CPU时间片轮转机制？</p><blockquote><p>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一时间段，称作它的时间片，即该进程允许运行的时间。又叫RR调度，在JAVA中过多的线程会导致上下文切换。<br>比如你4核4线程，你new了8个线程，那么其实4个物理线程公平的分配给8个JAVA线程使用。</p></blockquote></li><li><p>什么是进程和线程?</p><blockquote><ul><li><strong>进程</strong>:程序运行资源分配的最小单位，进程内部有多个线程，会共享这个进程的资源</li><li><strong>线程</strong>:CPU调度的最小单位，必须依赖进程而存在。</li></ul></blockquote></li><li><p>什么是并发和并行?</p><blockquote><ul><li><strong>并行</strong>:同一时刻，可以同时处理事情的能力</li><li><strong>并发</strong>:与单位时间相关，在单位时间内可以处理事情的能力</li></ul></blockquote></li><li><p>高并发编程的意义、好处和注意事项</p><blockquote><ul><li><strong>好处</strong>:充分利用cpu的资源、加快用户响应的时间，程序模块化，异步化</li><li><strong>问题</strong>:线程共享资源，存在冲突；容易导致死锁；启用太多的线程，就有搞垮机器的可能</li></ul></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
      <tag>计算机线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想通关「限流」？只要这一篇</title>
    <link href="/2022/12/10/%E6%83%B3%E9%80%9A%E5%85%B3%E3%80%8C%E9%99%90%E6%B5%81%E3%80%8D%EF%BC%9F%E5%8F%AA%E8%A6%81%E8%BF%99%E4%B8%80%E7%AF%87/"/>
    <url>/2022/12/10/%E6%83%B3%E9%80%9A%E5%85%B3%E3%80%8C%E9%99%90%E6%B5%81%E3%80%8D%EF%BC%9F%E5%8F%AA%E8%A6%81%E8%BF%99%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>在上一篇中我们聊到了「熔断」（<a href="http://mp.weixin.qq.com/s?__biz=MzU2NzEwMDc4OQ==&mid=2247484035&idx=1&sn=a428aea971c6e1420b81d1687f0f31d1&chksm=fca31699cbd49f8f980e6be89a09cccd9c76edfdf965bc3abbcd41ad8179151c6200500584e2&scene=21#wechat_redirect"><em>如何在到处是“雷”的系统中「明哲保身」？这是第一招</em></a>），有熔断机制的系统，它对可用性的作用至少保证了不会全盘崩溃。</p><p>但是你可以想象一个稍微极端一点的场景，如果系统流量不是很稳定，导致频繁触发熔断的话，是不是意味着系统一直熔断的三种状态中不断切换。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java0-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>导致的结果是每次从开启熔断到关闭熔断的期间，必然会导致大量的用户无法正常使用。系统层面的可用性大致是这样的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java3-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>另外，从资源利用率上也会很容易发现，波谷的这段时期资源是未充分利用的。</p><p>由此可见，光有熔断是远远不够的。</p><p>在高压下，只要系统没宕机，如果能将接收的流量持续保持在高位，但又不超过系统所能承载的上限，会是更有效率的运作模式，因为会将这里的波谷填满。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java4-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>在如今的互联网已经作为社会基础设施的大环境下，上面的这个场景其实离我们并不是那么远，同时也会显得没那么极端。例如，层出不穷的营销玩法，一个接着一个的社会热点，以及互联网冰山之下的黑产、刷子的蓬勃发展，更加使得这个场景变的那么的需要去考虑、去顾忌。因为随时都有可能会涌入超出你预期的流量，然后压垮你的系统。</p><p>那么限流的作用就很显而易见了：<strong>只要系统没宕机，系统只是因为资源不够，而无法应对大量的请求，为了保证有限的系统资源能够提供最大化的服务能力，因而对系统按照预设的规则进行流量（</strong><em><strong>输出或输入</strong></em><strong>）限制的一种方法，确保被接收的流量不会超过系统所能承载的上限。</strong></p><p><strong>一、怎么做「限流」</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java0-1544436085.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>从前面聊到的内容中我们也知道，限流最好能“限”在一个系统处理能力的上限附近，所以：</p><ol><li><p>通过「压力测试」等方式<strong>获得系统的能力上限</strong>在哪个水平是第一步。</p></li><li><p>其次，就是<strong>制定干预流量的策略</strong>。比如标准该怎么定、是否只注重结果还是也要注重过程的平滑性等。</p></li><li><p>最后，就是<strong>处理“被干预掉”的流量</strong>。能不能直接丢弃？不能的话该如何处理？</p></li></ol><p><strong>获得系统能力的上限</strong></p><p>第一步不是我们这次内容的重点，说起来就是对系统做一轮压测。可以在一个独立的环境进行，也可以直接在生产环境的多个节点中选择一个节点作为样本来压测，当然需要做好与其他节点的隔离。</p><p><strong>一般我们做压测为了获得2个结果，「速率」和「并发数」</strong>。前者表示在一个时间单位内能够处理的请求数量，比如xxx次请求&#x2F;秒。后者表示系统在同一时刻能处理的最大请求数量，比如xxx次的并发。从指标上需要获得「最大值」、「平均值」或者「中位数」。后续限流策略需要设定的具体标准数值就是从这些指标中来的。</p><blockquote><p>题外话：从精益求精的角度来说，其他的诸如cpu、网络带宽以及内存的耗用也可以作为参照因素。</p></blockquote><p><strong>制定干预流量的策略</strong></p><p><strong>常用的策略就4种，我给它起了一个简单的定义——「两窗两桶」</strong>。两窗就是：固定窗口、滑动窗口，两桶就是：漏桶、令牌桶。</p><p><em><strong>固定窗口</strong></em></p><p>固定窗口就是定义一个“固定”的统计周期，比如1分钟或者30秒、10秒这样。然后在每个周期统计当前周期中被接收到的请求数量，经过计数器累加后如果达到设定的阈值就触发「流量干预」。直到进入下一个周期后，计数器清零，流量接收恢复正常状态。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java2-1544436085.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>这个策略最简单，写起代码来也没几行。</p><blockquote><p>全局变量 int totalCount &#x3D; 0;  &#x2F;&#x2F;有一个「固定周期」会触发的定时器将数值清零。</p><p>if(totalCount &gt; 限流阈值) {</p><p>    return; &#x2F;&#x2F;不继续处理请求。</p><p>}</p><p>totalCount++;</p><p>&#x2F;&#x2F; do something…</p></blockquote><p>固定窗口有一点需要注意的是，<strong>假如请求的进入非常集中，那么所设定的「限流阈值」等同于你需要承受的最大并发数</strong>。所以，如果需要顾忌到并发问题，那么这里的「固定周期」设定的要尽可能的短。因为，这样的话「限流阈值」的数值就可以相应的减小。甚至，限流阈值就可以直接用并发数来指定。比如，假设固定周期是3秒，那么这里的阈值就可以设定为「平均并发数*3」。</p><p>不过不管怎么设定，固定窗口永远存在的缺点是：<strong>由于流量的进入往往都不是一个恒定的值，所以一旦流量进入速度有所波动，要么计数器会被提前计满，导致这个周期内剩下时间段的请求被“限制”。要么就是计数器计不满，也就是「限流阈值」设定的过大，导致资源无法充分利用</strong>。</p><p>「滑动窗口」可以改善这个问题。</p><p><strong><em>滑动窗口</em></strong></p><p>滑动窗口其实就是对固定窗口做了进一步的细分，将原先的粒度切的更细，比如1分钟的固定窗口切分为60个1秒的滑动窗口。然后统计的时间范围随着时间的推移同步后移。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java1-1544436085.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>同时，我们还可以得出一个结论是：<strong>如果固定窗口的「固定周期」已经很小了，那么使用滑动窗口的意义也就没有了</strong>。举个例子，现在的固定窗口周期已经是1秒了，再切分到毫秒级别能反而得不偿失，会带来巨大的性能和资源损耗。</p><p>滑动窗口大致的代码逻辑是这样：</p><blockquote><p>全局数组 链表[]  counterList &#x3D; new 链表[切分的滑动窗口数量];  </p><p>&#x2F;&#x2F;有一个定时器，在每一次统计时间段起点需要变化的时候就将索引0位置的元素移除，并在末端追加一个新元素。</p><p>int sum &#x3D; counterList.Sum();</p><p>if(sum &gt; 限流阈值) {</p><p>    return; &#x2F;&#x2F;不继续处理请求。</p><p>}</p><p>int 当前索引 &#x3D; 当前时间的秒数 % 切分的滑动窗口数量;</p><p>counterList[当前索引]++;</p><p>&#x2F;&#x2F; do something…</p></blockquote><p>虽然说滑动窗口可以改善这个问题，但是本质上还是预先划定时间片的方式，属于一种“预测”，意味着几乎肯定无法做到100%的物尽其用。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java6-1544436086.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>但是，「桶」模式可以做的更好，因为「桶」模式中多了一个缓冲区（_桶本身_）。</p><p><em><strong>漏桶</strong></em></p><p>首先聊聊「漏桶」吧。<strong>漏桶模式的核心是固定“出口”的速率</strong>，不管进来多少量，出去的速率一直是这么多。如果涌入的量多到桶都装不下了，那么就进行「流量干预」。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436087.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>整个实现过程我们来分解一下。</p><ol><li><p>控制流出的速率。这个其实可以使用前面提到的两个“窗口”的思路来实现。如果当前速率小于阈值则直接处理请求，否则不直接处理请求，进入缓冲区，并增加当前水位。</p></li><li><p>缓冲的实现可以做一个短暂的休眠或者记录到一个容器中再做异步的重试。</p></li><li><p>最后控制桶中的水位不超过最大水位。这个很简单，就是一个全局计数器，进行加加减减。</p></li></ol><p>这样一来，你会发现本质就是：<strong>通过一个缓冲区将不平滑的流量“整形”成平滑的（</strong><em><strong>高于均值的流量暂存下来补足到低于均值的时期</strong></em><strong>），以此最大化计算处理资源的利用率</strong>。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436087.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>实现代码的简化表示如下：</p><blockquote><p>全局变量 int unitSpeed;  &#x2F;&#x2F;出口当前的流出速率。每隔一个速率计算周期（比如1秒）会触发定时器将数值清零。  </p><p>全局变量 int waterLevel; &#x2F;&#x2F;当前缓冲区的水位线。</p><p>if(unitSpeed &lt; 速率阈值) {</p><p>    unitSpeed++;</p><p>    &#x2F;&#x2F;do something…</p><p>}</p><p>else{</p><p>    if(waterLevel &gt; 水位阈值){</p><p>        return; &#x2F;&#x2F;不继续处理请求。</p><p>    }</p><p>    waterLevel++;</p><p>    while(unitSpeed &gt;&#x3D; 速率阈值){</p><p>        sleep(一小段时间)。</p><p>    }</p><p>    unitSpeed++;</p><p>    waterLevel–;</p><p>    &#x2F;&#x2F;do something…</p><p>}</p></blockquote><p>更优秀的「漏桶」策略已经可以在流量的总量充足的情况下发挥你所预期的100%处理能力，但这还不是极致。</p><p>你应该知道，一个程序所在的运行环境中，往往不单单只有这个程序本身，会存在一些系统进程甚至是其它的用户进程。也就是说，程序本身的处理能力是会被干扰的，是会变化的。所以，你可以预估某一个阶段内的平均值、中位数，但无法预估具体某一个时刻的程序处理能力。又因此，你必然会使用相对悲观的标准去作为阈值，防止程序超负荷。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436088.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>那么从资源利用率来说，有没有更优秀的方案呢？有，这就是「令牌桶」。</p><p><em><strong>令牌桶</strong></em></p><p><strong>令牌桶模式的核心是固定“进口”速率</strong>。先拿到令牌，再处理请求，拿不到令牌就被「流量干预」。因此，<strong>当大量的流量进入时，只要令牌的生成速度大于等于请求被处理的速度，那么此刻的程序处理能力就是极限</strong>。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java5-1544436088.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>也来分解一下它的实现过程。</p><ol><li><p>控制令牌生成的速率，并放入桶中。这个其实就是单独一个线程在不断的生成令牌。</p></li><li><p>控制桶中待领取的令牌水位不超过最大水位。这个和「漏桶」一样，就是一个全局计数器，进行加加减减。</p></li></ol><p>大致的代码简化表示如下（_看上去像「固定窗口」的反向逻辑_）：</p><blockquote><p>全局变量 int tokenCount &#x3D; 令牌数阈值; &#x2F;&#x2F;可用令牌数。有一个独立的线程用固定的频率增加这个数值，但不大于「令牌数阈值」。  </p><p>if(tokenCount &#x3D;&#x3D; 0){</p><p>    return; &#x2F;&#x2F;不继续处理请求。</p><p>}</p><p>tokenCount–;</p><p>&#x2F;&#x2F;do something…</p></blockquote><p>聪明的你可能也会想到，这样一来<strong>令牌桶的容量大小理论上就是程序需要支撑的最大并发数</strong>。的确如此，假设同一时刻进入的流量将令牌取完，但是程序来不及处理，将会导致事故发生。</p><p>所以，没有真正完美的策略，只有合适的策略。因此，根据不同的场景能够识别什么是最合适的策略是更需要锻炼的能力。下面z哥分享一些我个人的经验。</p><p><strong>二、****做「限流」的最佳实践</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java3-1544436088.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p><strong>四种策略该如何选择？</strong>  </p><p>首先，<strong>固定窗口</strong>。一般来说，<strong>如非时间紧迫，不建议选择这个方案</strong>，太过生硬。但是，为了能快速止损眼前的问题可以作为临时应急的方案。</p><p>其次，<strong>滑动窗口</strong>。这个方案<strong>适用于对异常结果「高容忍」的场景</strong>，毕竟相比“两窗”少了一个缓冲区。但是，胜在实现简单。</p><p>然后，<strong>漏桶</strong>。z哥觉得这个方案<strong>最适合作为一个通用方案</strong>。虽说资源的利用率上不是极致，但是「宽进严出」的思路在保护系统的同时还留有一些余地，使得它的适用场景更广。</p><p>最后，<strong>令牌桶</strong>。当你<strong>需要尽可能的压榨程序的性能</strong>（_此时桶的最大容量必然会大于等于程序的最大并发能力_），并且所处的场景流量进入波动不是很大（_不至于一瞬间取完令牌，压垮后端系统_）。</p><p><strong>分布式系统中带来的新挑战</strong></p><p>一个成熟的分布式系统大致是这样的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436089.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>每一个上游系统都可以理解为是其下游系统的客户端。然后我们回想一下前面的内容，可能你发现了，前面聊的「限流」都没有提到到底是在客户端做限流还是服务端做，甚至看起来更倾向是建立在服务端的基础上做。但是你知道，在一个分布式系统中，一个服务端本身就可能存在多个副本，并且还会提供给多个客户端调用，甚至其自身也会作为客户端角色。那么，在如此交错复杂的一个环境中，该如何下手做限流呢？我的思路是通过「<strong>一纵一横</strong>」来考量。</p><p><strong><em>纵</em></strong></p><p>都知道「限流」是一个保护措施，那么可以将它想象成一个盾牌。另外，一个请求在系统中的处理过程是链式的。那么，正如古时候军队打仗一样，盾牌兵除了有小部分在老大周围保护，剩下的全在最前线。因为<strong>盾的位置越前，能受益的范围越大</strong>。</p><p>分布式系统中最前面的是什么？接入层。如果你的系统有接入层，比如用nginx做的反向代理。那么可以通过它的ngx_http_limit_conn_module以及ngx_http_limit_req_module来做限流，是很成熟的一个解决方案。</p><p>如果没有接入层，那么只能在应用层以AOP的思路去做了。但是，由于应用是分散的，出于成本考虑你需要针对性的去做限流。比如ToC的应用必然比ToB的应用更需要做，高频的缓存系统必然比低频的报表系统更需要做，Web应用由于存在Filter的机制做起来必然比Service应用更方便。</p><p>那么应用间的限流到底是做到客户端还是服务端呢？</p><p>z哥的观点是，从效果上客户端模式肯定是优于服务端模式的，因为当处于被限流状态的时候，客户端模式连建立连接的动作都省了。另一个潜在的好处是，与集中式的服务端模式相比，可以把少数的服务端程序的压力分散掉。但是在客户端做成本也更高，因为它是去中心化的，假如需要多个节点之间的数据共通的话，是一个很麻烦的事情。</p><p>所以，最终z哥建议你：如果<strong>考虑成本就服务端模式，考虑效果就客户端模式</strong>。当然也不是绝对，比如一个服务端的流量大部分都来源于某一个客户端，那么就可以直接在这个客户端做限流，这也不失为一个好方案。</p><p>数据库层面的话，一般连接字符串中本身就会包含「最大连接数」的概念，就可以起到限流的作用。如果想做更精细的控制就只能做到统一封装的数据库访问层框架中了。</p><p>聊完了「纵」，那么「横」是什么呢？</p><p><em><strong>横</strong></em></p><p>不管是多个客户端，还是同一个服务端的多个副本。每个节点的性能必然会存在差异，如何设立合适的阈值？以及如何让策略的变更尽可能快的在集群中的多个节点生效？说起来很简单，引入一个性能监控平台和配置中心。但这些真真要做好不容易，后续我们再展开这块内容。</p><p><strong>三、总结</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436089.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>限流就好比保险丝，根据你制定的标准，达到了就拉闸。</p><p>不过，触发限流后的措施除了直接丢弃请求之外，还有一个方式是「降级」，那么降级有哪些方式呢？我们下一篇再聊吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动实现单服务的cloud bus功能</title>
    <link href="/2022/12/10/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%8D%95%E6%9C%8D%E5%8A%A1%E7%9A%84cloud%20bus%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/12/10/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E5%8D%95%E6%9C%8D%E5%8A%A1%E7%9A%84cloud%20bus%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>场景是在cloud单服务下，不引入cloud-bus-mq 组件，实现动态刷新配置，主要核心的刷新方法是cloud已经提供的RefreshEndpoint类。</p><span id="more"></span><ul><li>import异步刷新组件编写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yamibuy.ec.search.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.endpoint.RefreshEndpoint;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.Input;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.Output;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.config.BindingProperties;<br><span class="hljs-keyword">import</span> org.springframework.cloud.stream.config.BindingServiceProperties;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.messaging.MessageChannel;<br><span class="hljs-keyword">import</span> org.springframework.messaging.SubscribableChannel;<br><span class="hljs-keyword">import</span> org.springframework.messaging.support.MessageBuilder;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@EnableBinding(StreamListenConfigRegistrar.ConfigRefreshChanel.class)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamListenConfigRegistrar</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BindingServiceProperties bindingServiceProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ConfigRefreshChanel configRefreshChanel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事件发布者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RefreshEndpoint refreshEndpoint;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置管道绑定目的地，自动化，约定配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initConfig</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;配置刷新消息声明&quot;</span>);<br>        <span class="hljs-type">BindingProperties</span> <span class="hljs-variable">bindingProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingProperties</span>();<br>        bindingProperties.setDestination(<span class="hljs-string">&quot;searchConfigExchange&quot;</span>);<br>        Map&lt;String, BindingProperties&gt; bindings = bindingServiceProperties.getBindings();<br>        bindings.put(<span class="hljs-string">&quot;searchConfigInput&quot;</span>,bindingProperties);<br>        bindings.put(<span class="hljs-string">&quot;searchConfigOutput&quot;</span>,bindingProperties);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 刷新配置接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/config/refresh&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">publish</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;刷新配置广播&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ok</span> <span class="hljs-operator">=</span> configRefreshChanel.searchConfigOutput().send(MessageBuilder.withPayload(<span class="hljs-string">&quot;refresh config&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;config is refresh &quot;</span>+ok+<span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息订阅刷新配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@StreamListener(ConfigRefreshChanel.IN)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribe</span><span class="hljs-params">(String msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;配置刷新消息：&#123;&#125;&quot;</span>,msg);<br>        refreshEndpoint.refresh();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通道声明</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfigRefreshChanel</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">IN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;searchConfigInput&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">OUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;searchConfigOutput&quot;</span>;<br><br>        <span class="hljs-meta">@Input(IN)</span><br>        SubscribableChannel <span class="hljs-title function_">searchConfigInput</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-meta">@Output(OUT)</span><br>        MessageChannel <span class="hljs-title function_">searchConfigOutput</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>注解类添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(&#123;StreamListenConfigRegistrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableConfigRefresh &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>启动类添加注解，开启单服务配置刷新</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableConfigRefresh</span><br>public class SearchApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SearchApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现基于Redis的lua的分布式锁</title>
    <link href="/2022/12/10/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2022/12/10/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ym.common.utils.redis;<br><br><span class="hljs-keyword">import</span> com.ym.common.utils.Sha1Util;<br><span class="hljs-keyword">import</span> com.ym.common.utils.spring.SpringUtil;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.RedisScript;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于redis lua分布式锁</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年05月08日 16:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLockUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RedisLockUtil.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 成功标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁lua脚本,不可重入,reqId只是为了解锁使用,代表当前线程在使用资源,给UUID比较好</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCRIPT_LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(&#x27;setnx&#x27;, KEYS[1], ARGV[1]) == 1 then redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]) return 1 else return 0 end&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁lua脚本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCRIPT_UNLOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁脚本sha1值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCRIPT_LOCK_SHA1</span> <span class="hljs-operator">=</span> Sha1Util.encrypt(SCRIPT_LOCK);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁脚本sha1值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCRIPT_UNLOCK_SHA1</span> <span class="hljs-operator">=</span> Sha1Util.encrypt(SCRIPT_UNLOCK);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部持有模板</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) SpringUtil.getObject(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试获取分布式锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey                锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestId              请求标识,唯一ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTimeMilliseconds 超期时间，多少毫秒后这把锁自动释放</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true表示拿到锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryGetDistributedLock</span><span class="hljs-params">(String lockKey, String requestId, <span class="hljs-type">int</span> expireTimeMilliseconds)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;[&#123;&#125;]尝试获取[&#123;&#125;]锁,超时时间为:&#123;&#125;毫秒&quot;</span>, requestId, lockKey, expireTimeMilliseconds);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 脚本设置</span><br><span class="hljs-comment">         */</span><br>        RedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisScript</span>&lt;Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSha1</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> SCRIPT_LOCK_SHA1;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Class&lt;Long&gt; <span class="hljs-title function_">getResultType</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> Long.class;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getScriptAsString</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> SCRIPT_LOCK;<br>            &#125;<br><br>        &#125;;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisTemplate.execute(<br>                redisScript,<span class="hljs-comment">// lua脚本</span><br>                Collections.singletonList(lockKey),<span class="hljs-comment">// KEYS[1]</span><br>                requestId, <span class="hljs-comment">// ARGV[1]</span><br>                expireTimeMilliseconds <span class="hljs-comment">// ARGV[2]</span><br>        );<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> SUCCESS.equals(result);<br>        LOGGER.info(<span class="hljs-string">&quot;释放结果:&quot;</span>, b);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放分布式锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey   锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestId 请求标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true表示释放锁成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseDistributedLock</span><span class="hljs-params">(String lockKey, String requestId)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;[&#123;&#125;]释放锁[&#123;&#125;]锁&quot;</span>, requestId, lockKey);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * lua脚本</span><br><span class="hljs-comment">         */</span><br>        RedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisScript</span>&lt;Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSha1</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> SCRIPT_UNLOCK_SHA1;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Class&lt;Long&gt; <span class="hljs-title function_">getResultType</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> Long.class;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getScriptAsString</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> SCRIPT_UNLOCK;<br>            &#125;<br><br>        &#125;;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisTemplate.execute(<br>                redisScript,<br>                Collections.singletonList(lockKey),<br>                requestId<br>        );<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> SUCCESS.equals(result);<br>        LOGGER.info(<span class="hljs-string">&quot;释放结果:&quot;</span>, b);<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Delayed实现一个定时延时任务</title>
    <link href="/2022/12/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/12/10/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等</p><span id="more"></span><h3 id="延时任务Bean的实现"><a href="#延时任务Bean的实现" class="headerlink" title="延时任务Bean的实现"></a>延时任务Bean的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ym.common.utils;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Delayed;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicLong;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时队列Task</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedTask</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Runnable</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 到期时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> time;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 问题对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T task;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">atomic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DelayedTask</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, T t, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = System.nanoTime() + timeout;<br>        <span class="hljs-built_in">this</span>.task = t;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.n = atomic.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回与此对象相关的剩余延迟时间，以给定的时间单位表示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">return</span> unit.convert(<span class="hljs-built_in">this</span>.time - System.nanoTime(), TimeUnit.NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed other)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-keyword">if</span> (other == <span class="hljs-built_in">this</span>) <span class="hljs-comment">// compare zero ONLY if same object</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (other <span class="hljs-keyword">instanceof</span> DelayedTask) &#123;<br>            DelayedTask&lt;Runnable&gt; x = (DelayedTask) other;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> time - x.time;<br>            <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (diff &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getN() &lt; x.getN())<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));<br>        <span class="hljs-keyword">return</span> (d == <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : ((d &lt; <span class="hljs-number">0</span>) ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getTask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> task.hashCode();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> DelayedTask) &#123;<br>            <span class="hljs-keyword">return</span> object.hashCode() == hashCode() ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getN</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Spring容器Bean的定义"><a href="#Spring容器Bean的定义" class="headerlink" title="Spring容器Bean的定义"></a>Spring容器Bean的定义</h3><pre><code class="java">package com.ym.web.bean;import com.ym.common.utils.DelayedTask;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.util.concurrent.DelayQueue;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * 延时队列任务管理 * * @author 李涛 * @version 创建时间：2018年6月16日 下午3:35:39 */@Componentpublic class TaskQueueBean &#123;    private static final Logger LOG = LoggerFactory.getLogger(TaskQueueBean.class);    private static volatile boolean started = false;    private TaskQueueBean() &#123;    &#125;    private static class LazyHolder &#123;        private static TaskQueueBean taskQueueDaemonThread = new TaskQueueBean();    &#125;    public static TaskQueueBean getInstance() &#123;        return LazyHolder.taskQueueDaemonThread;    &#125;    /**     * 执行任务的线程     */    private ExecutorService executor = null;    /**     * 创建一个最初为空的新 DelayQueue     */    private DelayQueue&lt;DelayedTask&lt;Runnable&gt;&gt; queue = null;    /**     * 守护线程     */    private Thread daemonThread;    /**     * 初始化守护线程     */    @PostConstruct    public synchronized void start() &#123;        // 1.初始化线程池        if (!started) &#123;            started = true;            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());            queue = new DelayQueue&lt;&gt;();            // 2.判断是否启动            if (daemonThread != null &amp;&amp; daemonThread.isInterrupted()) &#123;                daemonThread.start();                return;            &#125;        &#125;        daemonThread = new Thread() &#123;            public void run() &#123;                try &#123;                    execute();                &#125; catch (InterruptedException e) &#123;                    daemonThread.interrupt();                &#125;            &#125;        &#125;;        daemonThread.setDaemon(true);        daemonThread.setName(&quot;DelayedTask&quot;);        daemonThread.start();        LOG.info(&quot;~~~~~~~~~~~~~~~~~~~~延时任务开启~~~~~~~~~~~~~~~~~~~~~~~~~&quot;);    &#125;    private void execute() throws InterruptedException &#123;        LOG.info(&quot;[ task start &#123;&#125; ]:&quot;, System.currentTimeMillis());        while (started) &#123;            // 从延迟队列中取值,如果没有对象过期则队列一直等待，            DelayedTask&lt;Runnable&gt; t1 = queue.take();            if (t1 != null) &#123;                // 修改问题的状态                Runnable task = t1.getTask();                if (task == null) &#123;                    continue;                &#125;                executor.execute(task);                LOG.info(&quot;[ &#123;&#125;  task &#123;&#125; execute  ] &quot;, t1.getN(), t1.getName());            &#125;        &#125;    &#125;    /**     * 添加任务， time 延迟时间 task 任务 用户为问题设置延迟时间     */    public void put(long time, Runnable task, String taskName) &#123;        if (!started) &#123;            throw new UnsupportedOperationException(&quot;请先启动taskQueneBean！&quot;);        &#125;        // 转换成ns        long nanoTime = TimeUnit.NANOSECONDS.convert(time, TimeUnit.MILLISECONDS);        // 创建一个任务        DelayedTask&lt;Runnable&gt; k = new DelayedTask&lt;Runnable&gt;(nanoTime, task, taskName);        // 将任务放在延迟的队列中        queue.put(k);        LOG.info(&quot;新任务：&#123;&#125;加入队列，当前队列任务数量：&#123;&#125;&quot;, taskName, queue.size());    &#125;    /**     * 结束     *     * @param task     */    public boolean endTask(DelayedTask&lt;Runnable&gt; task) &#123;        if (!started) &#123;            throw new UnsupportedOperationException(&quot;请先启动taskQueneBean！&quot;);        &#125;        return queue.remove(task);    &#125;    /**     * 手动关闭任务     */    public synchronized void stop() &#123;        if (started) &#123;            LOG.info(&quot;shutdown TaskQueueBean&quot;);            started = false;            daemonThread.interrupt();            executor.shutdown();            daemonThread = null;            queue = null;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>轮子</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/10/%E5%AF%BC%E8%88%AA%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <url>/2022/12/10/%E5%AF%BC%E8%88%AA%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="导航蓝牙数据同步"><a href="#导航蓝牙数据同步" class="headerlink" title="导航蓝牙数据同步"></a>导航蓝牙数据同步</h1><blockquote><p>需要部署openresty服务，然后添加两个lua脚本来处理推和拉的请求。服务源码在78服务器<code>/home/devweb/programe/openresty/openresty-1.15.8.3</code></p></blockquote><h3 id="拉取数据接口"><a href="#拉取数据接口" class="headerlink" title="拉取数据接口"></a>拉取数据接口</h3><p><strong>接口地址</strong>:<code>[ip:port]/nav/pull</code></p><p><strong>请求方式</strong>:<code>GET</code></p><p><strong>请求数据类型</strong>:<code>*</code></p><p><strong>响应数据类型</strong>:<code>application/json</code></p><p><strong>接口描述</strong>: 数据拉取接口,需要签名才可以访问，签名方式为，sign &#x3D; MD5(<code>请求参数JSON+&#39;yamiyiliao&#39;</code>)，然后将sign传递到header里</p><p><strong>请求参数</strong>:</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>参数位置</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>sign</td><td>请求签名</td><td>header</td><td>true</td><td>string</td></tr><tr><td>key</td><td>拉取的key</td><td>query</td><td>true</td><td>string</td></tr></tbody></table><p><strong>响应参数</strong>:</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码, 500签名不正确，401没有更多数据了，200操作成功</td><td>string</td></tr><tr><td>msg</td><td>错误信息</td><td>string</td></tr><tr><td>data</td><td>结果数据</td><td>string</td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>,<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;操作成功&quot;</span>,<br><span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="推送数据接口"><a href="#推送数据接口" class="headerlink" title="推送数据接口"></a>推送数据接口</h3><p><strong>接口地址</strong>:<code>[ip:port]/nav/push</code></p><p><strong>请求方式</strong>:<code>POST</code></p><p><strong>请求数据类型</strong>:<code>application/json</code></p><p><strong>响应数据类型</strong>:<code>application/json</code></p><p><strong>接口描述</strong>: 数据拉取接口,需要签名才可以访问，签名方式为，sign &#x3D; MD5(<code>请求参数JSON+&#39;yamiyiliao&#39;</code>)，然后将sign传递到header里</p><p><strong>请求参数</strong>:</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>参数位置</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>sign</td><td>请求签名</td><td>header</td><td>true</td><td>string</td></tr><tr><td>key</td><td>推送的key</td><td>body</td><td>true</td><td>string</td></tr><tr><td>value</td><td>推送key对应的value值</td><td>body</td><td>true</td><td>string</td></tr></tbody></table><p><strong>响应参数</strong>:</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码, 500签名不正确,200操作成功</td><td>string</td></tr><tr><td>msg</td><td>错误信息</td><td>string</td></tr><tr><td>data</td><td>结果数据</td><td>string</td></tr></tbody></table><p><strong>响应示例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>,<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;操作成功&quot;</span>,<br><span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&#x27;key&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代客泊车接口"><a href="#代客泊车接口" class="headerlink" title="代客泊车接口"></a>代客泊车接口</h1><blockquote><p>代客泊车接口部署在了之前的疫情服务上，依赖导航公众号。</p></blockquote><h3 id="根据医院查询司机列表"><a href="#根据医院查询司机列表" class="headerlink" title="根据医院查询司机列表"></a>根据医院查询司机列表</h3><p><strong>接口地址</strong> <code>[ip:port]/ymYq/ecar/driver/list</code></p><p><strong>请求方式</strong> <code>GET</code></p><p><strong>请求数据类型</strong> <code>[*/*]</code></p><p><strong>响应数据类型</strong> <code>[&quot;appliction/json&quot;]</code></p><p><strong>接口描述</strong> 参数任选一个传递，不可不传或者都传</p><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>hosId</td><td>医院ID</td><td>query</td><td>false</td><td>integer</td></tr></tbody></table><pre><code class="hljs">        | navCode         |      导航code   |     query        |       false      | string   |         | soCode         |      搜搜code   |     query        |       false      | string   |          </code></pre><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th><th>schema</th></tr></thead><tbody><tr><td>code</td><td>结果代码</td><td>string</td><td></td></tr></tbody></table><pre><code class="hljs">        | msg     |错误信息      |    string   |       |        | data     |结果数据      |    PageInfo«司机-实体»   |   PageInfo«司机-实体»    |        </code></pre><p><strong>PageInfo«司机-实体»</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>endRow</td><td></td><td>integer(int32)</td></tr></tbody></table><pre><code class="hljs">        | hasNextPage         |           |  boolean   |              | hasPreviousPage         |           |  boolean   |              | isFirstPage         |           |  boolean   |              | isLastPage         |           |  boolean   |              | list         |           |  array   |         | navigateFirstPage         |           |  integer(int32)   |              | navigateLastPage         |           |  integer(int32)   |              | navigatePages         |           |  integer(int32)   |              | navigatepageNums         |           |  array   |              | nextPage         |           |  integer(int32)   |              | pageNum         |           |  integer(int32)   |              | pageSize         |           |  integer(int32)   |              | pages         |           |  integer(int32)   |              | prePage         |           |  integer(int32)   |              | size         |           |  integer(int32)   |              | startRow         |           |  integer(int32)   |              | total         |           |  integer(int64)   |              </code></pre><p><strong>司机-实体</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>area</td><td>区域</td><td>string</td></tr></tbody></table><pre><code class="hljs">        | city         |     城市      |  string   |              | contactAddr         |     联系地址      |  string   |              | country         |     国家      |  string   |              | createTime         |     创建时间      |  string(date-time)   |              | deleted         |     删除标志      |  string   |              | headUrl         |     微信头像      |  string   |              | id         |     主键      |  integer(int64)   |              | loginIp         |     登录IP      |  string   |              | nickName         |     用户昵称      |  string   |              | openId         |     微信用户唯一标识      |  string   |              | phoneNo         |     手机号      |  string   |              | province         |     省份      |  string   |              | realName         |     真实姓名      |  string   |              | salt         |     盐值      |  string   |              | sex         |     性别 0：未知、1：男、2：女      |  string   |              | theNo         |     用户编号      |  string   |             | unionid         |     unionId      |  string   |              | userPwd         |     登录密码      |  string   |              | userState         |     01游客02正常03禁用      |  string   |              </code></pre><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;endRow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hasNextPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hasPreviousPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isFirstPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isLastPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;contactAddr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;deleted&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;headUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;loginIp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;nickName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;openId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;phoneNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;province&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;realName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;salt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;theNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;unionid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;userPwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;userState&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigateFirstPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigateLastPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigatePages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigatepageNums&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;nextPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prePage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;startRow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="查询医院是否开通代驾"><a href="#查询医院是否开通代驾" class="headerlink" title="查询医院是否开通代驾"></a>查询医院是否开通代驾</h3><p><strong>接口地址</strong> <code>[ip:port]/ymYq/ecar/driver/open</code></p><p><strong>请求方式</strong> <code>GET</code></p><p><strong>请求数据类型</strong> <code>[*/*]</code></p><p><strong>响应数据类型</strong> <code>[&quot;applcation/json&quot;]</code></p><p><strong>接口描述</strong> <code>通过传递搜搜的医院编码，或者导航的医院编码，或者自身代客泊车系统中的医院ID，来查询是否开通代驾服务。不能不传</code></p><p><strong>请求参数</strong></p><p>| 参数名称         | 参数说明     |     请求类型 |  是否必须      |  数据类型   |<br>| ———— | ——————————– |———–|——–|—-|— |<br>| hosId         |      医院ID   |     query        |       false      | array   |<br>            | navCode         |      导航code   |     query        |       false      | array   |<br>            | soCode         |      搜搜code   |     query        |       false      | array   |</p><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码</td><td>string</td></tr></tbody></table><pre><code class="hljs">        | msg     |错误信息      |    string   |            | data     |结果数据.根据传入的参数类型，原样返回参数，并告知该参数是false还是true      |    array   |          </code></pre><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="查询代驾开通的医院列表"><a href="#查询代驾开通的医院列表" class="headerlink" title="查询代驾开通的医院列表"></a>查询代驾开通的医院列表</h3><p><strong>接口地址</strong> <code>[ip:port]/ymYq/ecar/hos/list</code></p><p><strong>请求方式</strong> <code>GET</code></p><p><strong>请求数据类型</strong> <code>[&quot;*/*&quot;]</code></p><p><strong>响应数据类型</strong> <code>[&quot;applocaiton/json&quot;]</code></p><p><strong>接口描述</strong> <code>查询医院列表，此接口供司机调用或者用户调用，司机调用需要传递header登录</code></p><p><strong>请求参数</strong></p><p>暂无</p><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码</td><td>string</td></tr></tbody></table><pre><code class="hljs">        | msg     |错误信息      |    string   |          | data     |结果数据      |    PageInfo«医院-实体»   |         </code></pre><p><strong>PageInfo«医院-实体»</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>endRow</td><td></td><td>integer(int32)</td></tr></tbody></table><pre><code class="hljs">        | hasNextPage         |           |  boolean   |            | hasPreviousPage         |           |  boolean   |            | isFirstPage         |           |  boolean   |              | isLastPage         |           |  boolean   |              | list         |           |  array   | 医院-实体             | navigateFirstPage         |           |  integer(int32)   |              | navigateLastPage         |           |  integer(int32)   |              | navigatePages         |           |  integer(int32)   |              | navigatepageNums         |           |  array   |              | nextPage         |           |  integer(int32)   |              | pageNum         |           |  integer(int32)   |              | pageSize         |           |  integer(int32)   |              | pages         |           |  integer(int32)   |              | prePage         |           |  integer(int32)   |              | size         |           |  integer(int32)   |              | startRow         |           |  integer(int32)   |              | total         |           |  integer(int64)   |              </code></pre><p><strong>医院-实体</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>creSb</td><td>创建人</td><td>integer(int64)</td></tr></tbody></table><pre><code class="hljs">        | createTime         |     创建时间      |  string(date-time)   |              | deleted         |     删除标志      |  string   |              | hosName         |     医院名称      |  string   |              | id         |     主键      |  integer(int64)   |              | lat         |     维度      |  number(double)   |              | lng         |     经度      |  number(double)   |              | navCode         |     导航医院编码      |  string   |              | soCode         |     搜搜医院编码      |  string   |              </code></pre><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;endRow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hasNextPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hasPreviousPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isFirstPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isLastPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;creSb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;deleted&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hosName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lng&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;soCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigateFirstPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigateLastPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigatePages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;navigatepageNums&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;nextPage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prePage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;startRow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="司机登录后签到"><a href="#司机登录后签到" class="headerlink" title="司机登录后签到"></a>司机登录后签到</h3><p><strong>接口地址</strong> <code>[ip:port]/ymYq/ecar/hos/sign</code></p><p><strong>请求方式</strong> <code>POST</code></p><p><strong>请求数据类型</strong> <code>[&quot;application/json&quot;]</code></p><p><strong>响应数据类型</strong> <code>[application/json]</code></p><p><strong>接口描述</strong> <code>司机登录成功后，签到，需要在header传递登录参数</code></p><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>hosId</td><td>要签到的医院ID</td><td>body</td><td>true</td><td></td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码</td><td>string</td></tr></tbody></table><pre><code class="hljs">        | msg     |错误信息      |    string   |               | data     |结果数据      |    object   |               </code></pre><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="账号密码登录"><a href="#账号密码登录" class="headerlink" title="账号密码登录"></a>账号密码登录</h3><p><strong>接口地址</strong> <code>[ip:port]/ymYq/ecar/login</code></p><p><strong>请求方式</strong> <code>POST</code></p><p><strong>请求数据类型</strong> <code>[&quot;application/json&quot;]</code></p><p><strong>响应数据类型</strong>  <code>[&quot;application/json&quot;]</code></p><p><strong>接口描述</strong> <code>用于司机登录，第一次需要使用微信code+账号+密码登录，之后采用微信静默授权登录</code></p><p><strong>请求参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>loginParam</td><td>loginParam</td><td>body</td><td>true</td><td>MyWxH5Token</td></tr></tbody></table><p><strong>MyWxH5Token属性说明</strong></p><p><strong>MyWxH5Token</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>请求类型</th><th>是否必须</th><th>数据类型</th></tr></thead><tbody><tr><td>code</td><td>微信code</td><td>body</td><td>true</td><td>string</td></tr><tr><td>loginType</td><td>1微信 2账号密码</td><td>body</td><td>true</td><td>string</td></tr><tr><td>phone</td><td>用户电话</td><td>body</td><td>false</td><td>string</td></tr><tr><td>pwd</td><td>用户密码</td><td>body</td><td>false</td><td>string</td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>类型</th></tr></thead><tbody><tr><td>code</td><td>结果代码</td><td>string</td></tr></tbody></table><pre><code class="hljs">        | msg     |错误信息      |    string   |               | data     |结果数据,返回授权登录的token      |    object   |               </code></pre><p><strong>响应示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    token<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大白话带你梳理一下Dubbo的那些事儿</title>
    <link href="/2022/12/10/%E5%A4%A7%E7%99%BD%E8%AF%9D%E5%B8%A6%E4%BD%A0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8BDubbo%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2022/12/10/%E5%A4%A7%E7%99%BD%E8%AF%9D%E5%B8%A6%E4%BD%A0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8BDubbo%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<p><em>首先声明，本文并不是什么代码实战类型的文章，适合于想对dubbo有更加全面认识的读者阅读，文章不会过于深奥，只是将一系列的知识点串通起来，帮助读者温故而知新。</em></p><h2 id="RPC服务的介绍"><a href="#RPC服务的介绍" class="headerlink" title="RPC服务的介绍"></a>RPC服务的介绍</h2><p>相信有过一些分布式开发经历的读者都有用过一些RPC框架，通过框架包装好之后提供的API接口调用远程服务，体验感觉起来就和调用本地服务一样轻松。<strong>这么方便好用的技术框架，在实际的开发过程中是如何包装的呢?</strong></p><p>很早的时候，国外的工程师设计了一种能够通过A计算机调用B计算机上边应用程序的技术，这种技术不需要开发人员对于网络通讯了解过多，并且调用其他机器上边程序的时候和调用本地的程序一样方便好用。</p><p>A机器发起请求去调用B机器程序的时候会被挂起，B机器接收到A机器发起的请求参数之后会做一定的参数转换，最后将对应的程序结果返回给A，这就是最原始的RPC服务调用了。</p><h2 id="RPC调用的优势"><a href="#RPC调用的优势" class="headerlink" title="RPC调用的优势"></a>RPC调用的优势</h2><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p><strong>不需要开发者对于网络通信做过多的设置</strong>，例如我们在使用http协议进行远程接口调用的时候，总是会需要编写较多的http协议参数（header，context，Accept-Language,Accept-Encode等等），这些处理对于开发人员来说，实际上都并不是特别友好。但是RPC服务调用框架通常都将这类解析进行了对应的封装，大大降低了开发人员的使用难度。</p><h3 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h3><p>在网络传输方面，RPC更多是处于应用层和传输层之间。这里我们需要先理清楚一个问题，网络分层。RPC是处于会话层的部分，相比处于应用层的HTTP而言，<strong>RPC要比Rest服务调用更加轻便。</strong></p><h2 id="常见的远程调用技术"><a href="#常见的远程调用技术" class="headerlink" title="常见的远程调用技术"></a>常见的远程调用技术</h2><h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><p>利用java.rmi包实现，<strong>基于Java远程方法协议(Java Remote Method Protocol) 和java的原生序列化</strong>。</p><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><p><strong>是一个轻量级的remoting onhttp工具</strong>，使用简单的方法提供了RMI的功能。基于HTTP协议，采用二进制编解码。</p><h3 id="protobuf-rpc-pro"><a href="#protobuf-rpc-pro" class="headerlink" title="protobuf-rpc-pro"></a>protobuf-rpc-pro</h3><p><strong>是一个Java类库</strong>，提供了基于 Google 的 Protocol Buffers 协议的远程方法调用的框架。基于 Netty 底层的 NIO 技术。支持 TCP 重用&#x2F; keep-alive、SSL加密、RPC 调用取消操作、嵌入式日志等功能。</p><h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><p><strong>是一种可伸缩的跨语言服务的软件框架</strong>。它拥有功能强大的代码生成引擎，无缝地支持C + +，C#，Java，Python和PHP和Ruby。thrift允许你定义一个描述文件，描述数据类型和服务接口。依据该文件，编译器方便地生成RPC客户端和服务器通信代码。</p><p>最初由facebook开发用做系统内部语言之间的RPC通信，2007年由facebook贡献到apache基金 ，现在是apache下的opensource之一 。支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务，跨越语言的C&#x2F;S RPC调用。底层通讯基于SOCKET。</p><h3 id="Avro"><a href="#Avro" class="headerlink" title="Avro"></a>Avro</h3><p><strong>出自Hadoop之父Doug Cutting</strong>, 在Thrift已经相当流行的情况下推出Avro的目标不仅是提供一套类似Thrift的通讯中间件,更是要建立一个新的，标准性的云计算的数据交换和存储的Protocol。支持HTTP，TCP两种协议。</p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p><strong>Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架****，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。</strong></p><p>上边我们说到了RPC的远程调用发展历史，那么下边我们一起来深入探讨一下RPC的服务。</p><p>首先我们来看看OSI的网络协议内容。</p><h2 id="OSI的七层网络模型"><a href="#OSI的七层网络模型" class="headerlink" title="OSI的七层网络模型"></a>OSI的七层网络模型</h2><p>对于OSI的七层网络模型我绘制了下边的这么一张图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java1-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">  </p><p><strong>下边是我个人对于这七层协议的理解：</strong></p><ul><li><p><strong>应用层</strong> 主要是对于服务接口的格式多定义，例如提供一定的终端接口暴露给外部应用调用。</p></li><li><p><strong>表示层</strong> 处理一些数据传输的格式转换，例如说编码的统一，加密和解密处理。</p></li><li><p><strong>会话层</strong> 管理用户的会话和对话，建立不同机器之间的会话连接。</p></li><li><p><strong>传输层</strong> 向网络层提供可靠有序的数据包信息。</p></li><li><p><strong>网络层</strong> 真正发送数据包信息的层面，提供流和拥塞控制，从而降低网络的资源损耗。</p></li><li><p><strong>数据链路层</strong> 封装对应的数据包，检测和纠正数据包传输信息。</p></li><li><p><strong>物理层</strong> 通过网络通讯设备发送数据</p></li></ul><h2 id="HTTP-amp-RPC"><a href="#HTTP-amp-RPC" class="headerlink" title="HTTP &amp; RPC"></a>HTTP &amp; RPC</h2><p>HTTP主要是位于TCP&#x2F;IP协议栈的应用层部分，首先需要构建三次握手的链接，接着才能进行数据信息的请求发送，最后进行四次挥手断开链接。</p><p>RPC在请求的过程中跨越了传输层和应用层，这是因为它本身是依赖于Socket的原因。（再深入的原因我也不知道）。减少了上边几层的封装，RPC的请求效率自然是要比HTTP高效很多。</p><p><strong>那么一个完整的RPC调用应该包含哪些部分呢？</strong></p><p>通常我们将一个完整的RPC架构分为了以下几个核心组件：</p><ul><li><p>Server</p></li><li><p>Client</p></li><li><p>Server Stub</p></li><li><p>Client Stub</p></li></ul><p>这四个模块中我稍微说下stub吧。这个单词翻译过来称之为存根。</p><p>**Client Stub **就是将客户端请求的参数，服务名称，服务地址进行打包，统一发送给server方。</p><p>**Server Stub **我用通俗易懂的语言来解释就是服务端接收到Client发送的数据之后进行消息解包，调用本地方法。（看过netty拆包机制应该会对这块比较了解）。</p><h2 id="Dubbo的核心属性"><a href="#Dubbo的核心属性" class="headerlink" title="Dubbo的核心属性"></a>Dubbo的核心属性</h2><p>其实Dubbo配置里面的核心内容就是 _<strong>服务暴露，服务发现，服务治理</strong>_。</p><h3 id="什么是服务暴露，服务发现，服务治理？"><a href="#什么是服务暴露，服务发现，服务治理？" class="headerlink" title="什么是服务暴露，服务发现，服务治理？"></a>什么是服务暴露，服务发现，服务治理？</h3><p>下边我们用一段xml的配置来进行讲解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo-invoker-provider&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:parameter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;qos.port&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;22222&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:application</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sise.user.service.UserServiceImpl&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.sise.user.service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在dubbo的配置文件里面，通常我们所说的<strong>dubbo:service</strong> 可以理解为服务暴露，<strong>dubbo:refernce</strong> 为服务发现，<strong>mock</strong>是服务治理，<strong>timeout</strong>属于服务治理的一种（性能调优）.</p><p>假设dubbo里面希望将一些公共的配置抽取出来，我们可以通过properties文件进行配置，dubbo在加载配置文件的优先顺序如下：</p><ol><li><p>优先会读取JVM -D启动参数后边的内容</p></li><li><p>读取xml配置文件</p></li><li><p>读取properties配置文件内容</p></li></ol><p>dubbo默认会读取dubbo.properties配置文件的信息，例如下边这种配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dubbo.application.name</span>=dubbo-user-service<br><span class="hljs-attr">dubbo.registry.address</span>=zookeeper://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>假设我们的dubbo配置文件不命名为dubbo.properties（假设命名为了my-dubbo.properties）的时候，可以在启动参数的后边加上这么一段指令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">-Ddubbo.properties.<span class="hljs-built_in">file</span>=<span class="hljs-keyword">my</span>-dubbo.properties<br></code></pre></td></tr></table></figure><p>那么在应用程序启动之后，对应的工程就会读取指定的配置文件，这样就可以将一些共用的dubbo配置给抽取了出来。</p><h2 id="XML和配置类的映射"><a href="#XML和配置类的映射" class="headerlink" title="XML和配置类的映射"></a>XML和配置类的映射</h2><p>在工作中，我们通常都会通过配置xml的方式来设定一个服务端暴露的服务接口和消费端需要调用的服务信息，这些配置的xml实际上在dubbo的源码中都会被解析为对应的实体类对象。</p><p>例如说我们常用到的reference配置类，下边我贴出一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sise.user.config;<br><span class="hljs-keyword">import</span> com.sise.user.service.UserService;<br><span class="hljs-keyword">import</span> com.sise.user.service.UserServiceImpl;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * dubbo里面的自定义配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> idea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@data</span> 2019/12/29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DubboSelfDefConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * dubbo的服务暴露</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">server</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationConfig</span> <span class="hljs-variable">applicationConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationConfig</span>();<br>        applicationConfig.setName(<span class="hljs-string">&quot;dubbo-server-config&quot;</span>);<br>        <span class="hljs-type">RegistryConfig</span> <span class="hljs-variable">registryConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegistryConfig</span>();<br>        registryConfig.setAddress(<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>);<br>        <span class="hljs-type">ProtocolConfig</span> <span class="hljs-variable">protocolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProtocolConfig</span>();<br>        protocolConfig.setName(<span class="hljs-string">&quot;dubbo&quot;</span>);<br>        protocolConfig.setPort(<span class="hljs-number">20880</span>);<br>        protocolConfig.setThreads(<span class="hljs-number">200</span>);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        ServiceConfig&lt;UserService&gt; serviceConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConfig</span>&lt;&gt;();<br>        serviceConfig.setApplication(applicationConfig);<br>        serviceConfig.setRegistry(registryConfig);<br>        serviceConfig.setProtocol(protocolConfig);<br>        serviceConfig.setInterface(UserService.class);<br>        serviceConfig.setRef(userService);<br>        serviceConfig.export();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationConfig</span> <span class="hljs-variable">applicationConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationConfig</span>();<br>        applicationConfig.setName(<span class="hljs-string">&quot;dubbo-client-config&quot;</span>);<br>        <span class="hljs-type">RegistryConfig</span> <span class="hljs-variable">registryConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegistryConfig</span>();<br>        registryConfig.setAddress(<span class="hljs-string">&quot;zookeeper://127.0.0.1:2181&quot;</span>);<br>        ReferenceConfig&lt;UserService&gt; referenceConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceConfig</span>&lt;&gt;();<br>        referenceConfig.setApplication(applicationConfig);<br>        referenceConfig.setRegistry(registryConfig);<br>        referenceConfig.setInterface(UserService.class);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">localRef</span> <span class="hljs-operator">=</span> referenceConfig.get();<br>        localRef.echo(<span class="hljs-string">&quot;idea&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, IOException &#123;<br>        <span class="hljs-type">DubboSelfDefConfig</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DubboSelfDefConfig</span>();<br>        d.consumer();<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>        countDownLatch.await();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码里面，通过案例可以发现有这些信息内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserService</span> <span class="hljs-variable">localRef</span> <span class="hljs-operator">=</span> referenceConfig.get();<br>localRef.echo(<span class="hljs-string">&quot;idea&quot;</span>);<br></code></pre></td></tr></table></figure><p>这两行语句是获取具体服务的核心之处，由于我在别处定义了一个叫做UserService 的公共服务接口，因此在服务引用的过程中可以进行转换。</p><h2 id="Dubbo2-7的三大新特新"><a href="#Dubbo2-7的三大新特新" class="headerlink" title="Dubbo2.7的三大新特新"></a>Dubbo2.7的三大新特新</h2><p>Dubbo的github官方地址为 <a href="https://github.com/apache/dubbo">https://github.com/apache/dubbo</a>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java9-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">在这里插入图片描述</p><p>Dubbo 目前有如图所示的 5 个分支，其中 2.7.1-release 只是一个临时分支，忽略不计，对其他 4 个分支而言，我归纳了一下，分别有如下信息：</p><ul><li><p>2.5.x 近期已经通过投票，Dubbo 社区即将停止对其的维护。</p></li><li><p>2.6.x 为长期支持的版本，也是 Dubbo 贡献给 Apache 之前的版本，其包名前缀为：com.alibaba，JDK 版本对应 1.6。</p></li><li><p>3.x-dev 是前瞻性的版本，对 Dubbo 进行一些高级特性的补充，如支持 rx 特性。</p></li><li><p>master 为长期支持的版本，版本号为 2.7.x，也是 Dubbo 贡献给 Apache 的开发版本，其包名前缀为：org.apache，JDK 版本对应 1.8。</p></li></ul><h2 id="Dubbo-2-7-新特性"><a href="#Dubbo-2-7-新特性" class="headerlink" title="Dubbo 2.7 新特性"></a>Dubbo 2.7 新特性</h2><p>Dubbo 2.7.x 作为 Apache 的孵化版本，除了代码优化之外，还新增了许多重磅的新特性，本文将会介绍其中最典型的2个新特性：</p><ul><li><p><strong>异步化改造</strong></p></li><li><p><strong>三大中心改造</strong></p></li></ul><h3 id="异步化改造"><a href="#异步化改造" class="headerlink" title="异步化改造"></a>异步化改造</h3><p>1.异步化调用的方式，在Dubbo2.7版本里面提供了异步化调用的功能，相关案例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Reference(async = true)</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testStr&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testStr</span><span class="hljs-params">(String param)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.testEcho(param);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是通过这种异步发送的方式我们通常都是获取不到响应值的，所以这里的return为null。</p><p>如果在低于2.7版本的dubbo框架中希望获取到异步返回的响应值还是需要通过RPC上下文来提取信息。</p><p>代码案例如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/futureGet&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">futureGet</span><span class="hljs-params">(String param)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>       userService.testEcho(param);<br>       Future&lt;String&gt; future= RpcContext.getContext().getFuture();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> future.get();<br>       System.out.println(<span class="hljs-string">&quot;this is :&quot;</span>+result);<br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><p>通过RPC上下文的方式可以取到对应的响应值,但是这种方式需要有所等待，因此此时的效率会有所降低。假设我们将dubbo的版本提升到了2.7.1之后，通过使用CompletableFuture来进行接口优化的话，这部分的代码实现就会有所变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> idea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/12/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DemoService</span> &#123;<br>      String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> ;<br>      <span class="hljs-keyword">default</span> CompletableFuture&lt;String&gt; <span class="hljs-title function_">sayAsyncHello</span><span class="hljs-params">(String name)</span>&#123;<br>            <span class="hljs-keyword">return</span> CompletableFuture.completedFuture(sayHello(name));<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用方代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sise.consumer.controller;<br><br><span class="hljs-keyword">import</span> com.sise.dubbo.service.DemoService;<br><span class="hljs-keyword">import</span> org.apache.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> idea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/12/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoController</span> &#123;<br><br>    <span class="hljs-meta">@Reference</span><br>    <span class="hljs-keyword">private</span> DemoService demoService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testDemo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testDemo</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;【testDemo】 this is :&quot;</span>+name);<br>        <span class="hljs-keyword">return</span> demoService.sayHello(name);<br>    &#125;.<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/testAsyncDemo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAsyncDemo</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;【testAsyncDemo】 this is :&quot;</span>+name);<br>        CompletableFuture&lt;String&gt; future = demoService.sayAsyncHello(name);<br>        AtomicReference&lt;String&gt; result = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//通过一条callback线程来处理响应的数据信息</span><br>        future.whenComplete((retValue,exception)-&gt;&#123;<br>           <span class="hljs-keyword">if</span>(exception==<span class="hljs-literal">null</span>)&#123;<br>               System.out.println(retValue);<br>               result.set(retValue);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               exception.printStackTrace();<br>           &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;通过一条callback线程来处理响应的数据信息,所以这个时候获取不到信息响应&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的调用是借助了callback线程来帮我们处理原先的数据内容，关于dubbo里面的异步化调用，我借用了官方的一张图来进行展示：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java7-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">  </p><p>我们上边讲解的众多方法都只是针对于dubbo的客户端异步化，并没有讲解关于服务端的异步化处理，这是因为结合dubbo的业务线程池模型来思考，服务端的异步化处理比较鸡肋（因为dubbo内部服务端的线程池本身就是异步化调用的了）。</p><p>当然dubbo 2.6 里面对于接口异步化调用的配置到了2.7版本依旧有效。</p><h3 id="三大中心的改造"><a href="#三大中心的改造" class="headerlink" title="三大中心的改造"></a>三大中心的改造</h3><p><strong>注册中心</strong></p><p>在dubbo2.7之前，dubbo主要还是由consumer，provider ，register组成，然而在2.7版本之后，dubbo的注册中心被拆解为了三个中心，分别是原先的<strong>注册中心</strong>和<strong>元数据中心</strong>以及<strong>配置中心</strong>。</p><p><strong>元数据配置</strong></p><p>在dubbo2.7版本中，将原先注册在zk上边的过多数据进行了注册拆分，这样能够保证减少对于zk端的压力。具体配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">“zookeeper://127.0.0.1:2181”</span> <span class="hljs-attr">simplified</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>简化了相应配置之后，dubbo也只会上传一些必要的服务治理数据了，简化版本的服务数据只剩下下边这些信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">dubbo://30.5.120.185:20880/com.sise.TestService?<br>application=test-provider&amp;<br>dubbo=2.0.2&amp;<br>release=2.7.0&amp;<br>timestamp=1554982201973<br></code></pre></td></tr></table></figure><p>对于其他的元数据信息将会被存储到一些元数据中心里面，例如说redis，nacos，zk等</p><p>元数据配置改造主要解决的问题是：推送量大 -&gt; 存储数据量大 -&gt; 网络传输量大 -&gt; 延迟严重</p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>dubbo2.7开始支持多种分布式配置中心的组件。例如说：zk，Spring Cloud Config, Apollo, Nacos，关于这部分的配置网上的资料也比较多，我就不在这里细说了。</p><p><strong>END</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud bus 使用介绍</title>
    <link href="/2022/12/10/%E5%AD%A6%E4%B9%A0spring%20cloud%20bus%20%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89BUS%E4%BA%8B%E4%BB%B6/"/>
    <url>/2022/12/10/%E5%AD%A6%E4%B9%A0spring%20cloud%20bus%20%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89BUS%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>对于springcloud bus 原理的介绍，主要是springcloud streaem 配合事件监听</p><span id="more"></span><h1 id="1-spring-cloud-bus介绍"><a href="#1-spring-cloud-bus介绍" class="headerlink" title="1. spring cloud bus介绍"></a>1. spring cloud bus介绍</h1><p>Spring cloud bus使用轻量级消息代理将分布式系统的节点连接起来，可以使用此代理，广播状态更改(例如配置更改)或其他管理指令。它可以用作应用程序之间的通信通道。该项目提供了两种消息传输处理：AMQP broker 和Kafka 2. 如果你想使用activemq或其他的消息中间件作为消息传输，那么需要实现spring cloud stream消息驱动的绑定（spring cloud bus其实也是使用stream实现的rabbitmq和kafka）</p><h1 id="2-构建项目"><a href="#2-构建项目" class="headerlink" title="2. 构建项目"></a>2. 构建项目</h1><p>我们使用rabbitmq作为中间件</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml中添加连接rabbitmq的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>    <span class="hljs-attr">rabbitmq:</span>    <br>        <span class="hljs-attr">host:</span> <span class="hljs-string">mybroker.com</span>    <br>        <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <br>        <span class="hljs-attr">username:</span> <span class="hljs-string">user</span>    <br>        <span class="hljs-attr">password:</span> <span class="hljs-string">secret</span><br></code></pre></td></tr></table></figure><h1 id="3-端点"><a href="#3-端点" class="headerlink" title="3. 端点"></a>3. 端点</h1><p>spring cloud bus 提供了两个端点<code>/actuator/bus-refresh</code> and <code>/actuator/bus-env，他们分别对应了</code>Spring Cloud Commons中的<code>/actuator/refresh和/actuator/env</code></p><p> </p><h2 id="3-1-x2F-actuator-x2F-bus-refresh"><a href="#3-1-x2F-actuator-x2F-bus-refresh" class="headerlink" title="3.1 &#x2F;actuator&#x2F;bus-refresh"></a>3.1 &#x2F;actuator&#x2F;bus-refresh</h2><p><code>可以清除RefreshScope</code>中的缓存并且重新绑定@ConfigurationProperties，一般是配合config组件使用，当config server 中的配置修改时可动态刷新config client中加载的yml配置</p><p>暴露端口：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">management<span class="hljs-selector-class">.endpoints</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.exposure</span>.include=bus-refresh<br></code></pre></td></tr></table></figure><p> </p><h2 id="3-2-x2F-actuator-x2F-bus-env"><a href="#3-2-x2F-actuator-x2F-bus-env" class="headerlink" title="3.2 &#x2F;actuator&#x2F;bus-env"></a>3.2 &#x2F;actuator&#x2F;bus-env</h2><p>更新每个实例中指定的environment 键值对</p><p>暴露端口：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">management<span class="hljs-selector-class">.endpoints</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.exposure</span>.include=bus-env<br></code></pre></td></tr></table></figure><h3 id="3-3-destination参数"><a href="#3-3-destination参数" class="headerlink" title="3.3 destination参数"></a>3.3 destination参数</h3><p>可以为端口后添加destination参数来指定你想广播的服务实例。</p><p>假设我们现在使用&#x2F;bus-refresh端点</p><p>当你想指定某个具体服务实例更新时：&#x2F;actuator&#x2F;bus-refresh?destination&#x3D;customers:9000</p><p>   参数值为(spring.application.name:server.port)</p><p>当你想指定服务更新时：&#x2F;actuator&#x2F;bus-refresh?destination&#x3D;customers:**</p><p>   **表示customers服务的所有实例</p><h1 id="4-事件追踪"><a href="#4-事件追踪" class="headerlink" title="4. 事件追踪"></a>4. 事件追踪</h1><p>bus中的事件大致只有3中：</p><ul><li>EnvironmentChangeRemoteApplicationEvent：对应&#x2F;bus-env的端点事件</li><li>RefreshRemoteApplicationEvent：对应&#x2F;bus-refresh端点的事件</li><li>AckRemoteApplicationEvent：这是一个确认事件，没有什么含义，只是说确认事件已发送或已接受</li></ul><p> </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.cloud.bus.trace.enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>默认是关闭的，因为它是靠本地项目的内存来存储追踪记录的，会比较消耗资源。</p><p>开启后会显示发送的每个事件和来自每个服务实例的所有确认事件（ack）</p><p>通过访问端点&#x2F;actuator&#x2F;trace可查看追踪记录</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-11-26T10:24:44.411+0000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;signal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spring.cloud.bus.ack&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RefreshRemoteApplicationEvent&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c4d374b7-58ea-4928-a312-31984def293b&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stores:8081&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*:**&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-11-26T10:24:41.864+0000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;signal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spring.cloud.bus.sent&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RefreshRemoteApplicationEvent&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c4d374b7-58ea-4928-a312-31984def293b&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;customers:9000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*:**&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-11-26T10:24:41.862+0000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;signal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;spring.cloud.bus.ack&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RefreshRemoteApplicationEvent&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c4d374b7-58ea-4928-a312-31984def293b&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;customers:9000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*:**&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里打印的追踪大致意思就是<code>RefreshRemoteApplicationEvent</code> 事件从customers:9000服务实例发出(signal&#x3D;…sent),并广播了所有的服务实例。</p><p>轨迹：我们这里是查看的customers:9000该实例的追踪记录，当请求bus-refresh端口后，该实例显示确认了该事件（第3个json），然后发送了事件到消息中间件中（第2个json），最后因为接受到了来自消息中间件的远程事件，所以再次打印了ack确认日志（第一个json）</p><h1 id="5-源码分析"><a href="#5-源码分析" class="headerlink" title="5. 源码分析"></a>5. 源码分析</h1><p>我们分析下&#x2F;bus-refresh的整个操作流程</p><h2 id="5-1-Spring本地事件发布"><a href="#5-1-Spring本地事件发布" class="headerlink" title="5.1 Spring本地事件发布"></a>5.1 Spring本地事件发布</h2><p>需查看类：RefreshBusEndpoint</p><p>因为我们是通过&#x2F;bus-refresh端点作为入口更新系统的配置信息的，所以我们可以找到RefreshBusEndpoint类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Endpoint(id = &quot;bus-refresh&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshBusEndpoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBusEndpoint</span> &#123;     <br><br>    <span class="hljs-meta">@WriteOperation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">busRefresh</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.publish(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshRemoteApplicationEvent</span>(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.getInstanceId(), (String) <span class="hljs-literal">null</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非总线刷新也有一个刷新配置接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;endpoints.refresh&quot;, ignoreUnknownFields = false)</span><br><span class="hljs-meta">@ManagedResource</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshEndpoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractEndpoint</span>&lt;Collection&lt;String&gt;&gt; &#123;<br><br><span class="hljs-keyword">private</span> ContextRefresher contextRefresher;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RefreshEndpoint</span><span class="hljs-params">(ContextRefresher contextRefresher)</span> &#123;<br><span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;refresh&quot;</span>);<br><span class="hljs-built_in">this</span>.contextRefresher = contextRefresher;<br>&#125;<br><br><span class="hljs-meta">@ManagedOperation</span><br><span class="hljs-keyword">public</span> String[] refresh() &#123;<br>Set&lt;String&gt; keys = contextRefresher.refresh();<br><span class="hljs-keyword">return</span> keys.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[keys.size()]);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Collection&lt;String&gt; <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> Arrays.asList(refresh());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过该类，我们发现，其实在我们调用&#x2F;bus-refresh端口时，它是发布了一个RefreshRemoteApplicationEvent事件（spring本地事件），注意是本地事件。RefreshRemoteApplicationEvent的父类是RemoteApplicationEvent</p><h2 id="5-2-通过Spring本地事件监听，将消息发送到了消息中间件中"><a href="#5-2-通过Spring本地事件监听，将消息发送到了消息中间件中" class="headerlink" title="5.2 通过Spring本地事件监听，将消息发送到了消息中间件中"></a>5.2 通过Spring本地事件监听，将消息发送到了消息中间件中</h2><p>查看类：BusAutoConfiguration</p><p>在BusAutoConfiguration配置类中，我们找到了这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@EventListener(classes = &#123;RemoteApplicationEvent.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptLocal</span><span class="hljs-params">(RemoteApplicationEvent event)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.serviceMatcher.isFromSelf(event) &amp;&amp; !(event <span class="hljs-keyword">instanceof</span> AckRemoteApplicationEvent)) &#123;<br>        <span class="hljs-built_in">this</span>.cloudBusOutboundChannel.send(MessageBuilder.withPayload(event).build());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现在这个配置类中，有个本地事件监听器，且监听的是RemoteApplicationEvent事件，而在RefreshBusEndpoint中发布的事件对象的父类正好就是RemoteApplicationEvent事件，所以我们可以断定，这个监听器是能够监听到刚刚发布的事件的。</p><p> 从代码中可以看出来它进行了判断，从方法名上就可以看出来，判断了这个监听到的事件是否是自己发的，并且是否是Ack事件，当然我们这里是满足的，所以执行了this.cloudBusOutboundChannel.send()方法，这个方法的意思就是向管道中发送消息，这个管道其实就是spring cloud stream 与 消息中间件绑定的管道，通俗来讲就是它把这个事件发送到rabbitmq上去了。</p><p> </p><p>补充：this.cloudBusOutboundChannel对象其实是和消息中间件的channel通道相连接的，查找BusAutoConfiguration类发现，其实该对象和rabbitmq相连接的exchange名称是springCloudBus</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Output(&quot;springCloudBusOutput&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCloudBusOutboundChannel</span><span class="hljs-params">(MessageChannel cloudBusOutboundChannel)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cloudBusOutboundChannel = cloudBusOutboundChannel;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20200507175204827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODMxMjUwMg==,size_16,color_FFFFFF,t_70"></h2><h2 id="5-3-Stream远程事件监听"><a href="#5-3-Stream远程事件监听" class="headerlink" title="5.3 Stream远程事件监听"></a>5.3 Stream远程事件监听</h2><p>查看类：BusAutoConfiguration</p><p>通过上面的操作，事件已经被发送到rabbitmq上去了，那我们本地就要进行远程事件的监听了，监听的就是this.cloudBusOutboundChannel对象和rabbitmq相连接的通道,远程事件的监听使用 @StreamListener()注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@StreamListener(&quot;springCloudBusInput&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptRemote</span><span class="hljs-params">(RemoteApplicationEvent event)</span> &#123;<br>    <span class="hljs-keyword">if</span> (event <span class="hljs-keyword">instanceof</span> AckRemoteApplicationEvent) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.bus.getTrace().isEnabled() &amp;&amp; !<span class="hljs-built_in">this</span>.serviceMatcher.isFromSelf(event) &amp;&amp; <span class="hljs-built_in">this</span>.applicationEventPublisher != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.applicationEventPublisher.publishEvent(event);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.serviceMatcher.isForSelf(event) &amp;&amp; <span class="hljs-built_in">this</span>.applicationEventPublisher != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.serviceMatcher.isFromSelf(event)) &#123;<br>                <span class="hljs-built_in">this</span>.applicationEventPublisher.publishEvent(event);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.bus.getAck().isEnabled()) &#123;<br>                <span class="hljs-type">AckRemoteApplicationEvent</span> <span class="hljs-variable">ack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AckRemoteApplicationEvent</span>(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.serviceMatcher.getServiceId(), <span class="hljs-built_in">this</span>.bus.getAck().getDestinationService(), event.getDestinationService(), event.getId(), event.getClass());<br>                <span class="hljs-built_in">this</span>.cloudBusOutboundChannel.send(MessageBuilder.withPayload(ack).build());<br>                <span class="hljs-built_in">this</span>.applicationEventPublisher.publishEvent(ack);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.bus.getTrace().isEnabled() &amp;&amp; <span class="hljs-built_in">this</span>.applicationEventPublisher != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.applicationEventPublisher.publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SentApplicationEvent</span>(<span class="hljs-built_in">this</span>, event.getOriginService(), event.getDestinationService(), event.getId(), event.getClass()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">查看代码我们可以发现接受到事件后会经过很多判断，判断是否是ack事件，或该事件是不是自己发送的(this.serviceMatcher.isFromSelf(event)，或者该事件是否为我而来，即消息是不是发给我的(his.serviceMatcher.isForSelf(event)：上面讲过当/bus-refresh时可以指定服务实例发送事件，所以虽然能监听到事件，但不一定这个事件就是针对你的<br></code></pre></td></tr></table></figure><p>截取下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.serviceMatcher.isForSelf(event)&amp;&amp;<span class="hljs-built_in">this</span>.applicationEventPublisher!=<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.serviceMatcher.isFromSelf(event)) &#123;<br>        <span class="hljs-built_in">this</span>.applicationEventPublisher.publishEvent(event);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">这段代码意思是：事件就是针对我来的且不是我自己发送的这个事件，那么就又会在本地发送该事件，发送后会被5.4节中的RefreshListener所监听到。如果是自己发的，那么就不做任何处理了，因为他在发送消息到中间件时，就已经被RefreshListener监听器处理过了。<br></code></pre></td></tr></table></figure><h2 id="5-4-Spring本地事件监听"><a href="#5-4-Spring本地事件监听" class="headerlink" title="5.4 Spring本地事件监听"></a>5.4 Spring本地事件监听</h2><p>查看：RefreshListener类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;RefreshRemoteApplicationEvent&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(RefreshListener.class);<br>    <span class="hljs-keyword">private</span> ContextRefresher contextRefresher;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefreshListener</span><span class="hljs-params">(ContextRefresher contextRefresher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.contextRefresher = contextRefresher;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(RefreshRemoteApplicationEvent event)</span> &#123;<br>        Set&lt;String&gt; keys = <span class="hljs-built_in">this</span>.contextRefresher.refresh();<br>        log.info(<span class="hljs-string">&quot;Received remote refresh request. Keys refreshed &quot;</span> + keys);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该类是通过实现ApplicationListener的接口来监听RefreshRemoteApplicationEvent事件的，然后执行了this.contextRefresher.refresh()方法来刷新程序中的context上下文。</p><h2 id="5-5-流程总结"><a href="#5-5-流程总结" class="headerlink" title="5.5 流程总结"></a>5.5 流程总结</h2><p>1. 假设我们访问端口为8080的user服务，当访问端点&#x2F;bus-refresh时，会被RefreshBusEndpoint执行，该类会发送一个spring本地事件，事件名为RefreshRemoteApplicationEvent（在8080这个实例中进行事件传播）</p><p>2. 发送后，会被两个位置的监听器监听：</p><ul><li>一个是RefreshListener，该监听器监听到后直接refresh上下文</li><li>一个是BusAutoConfiguration，该配置类中存在监听RemoteApplicationEvent事件的监听器，被这个监听器监听后，会向rabbitmq发送事件消息实体</li></ul><p>3. 在bus中的应用都会进行strem的远程事件监听（@StreamListener(“springCloudBusInput”)，应用监听到strem事件后，会判断事件的发送和发往的情况</p><ul><li>如果该事件是发向自己的，并且不是自己发出去的，那么会再次将这个event通过spring本地事件发出去，让当前实例的RefreshListener监听器监听到并执行refresh操作</li><li>如果该事件既是自己发出去的，也是发向自己的，那么就不执行任何操作了，因为在发出去的时候已经被RefreshListener监听器监听过了</li><li>如果事件不是发向自己的，不执行任何操作</li></ul><h1 id="6-通过bus实现自定义事件发送"><a href="#6-通过bus实现自定义事件发送" class="headerlink" title="6. 通过bus实现自定义事件发送"></a>6. 通过bus实现自定义事件发送</h1><h2 id="6-1-创建事件"><a href="#6-1-创建事件" class="headerlink" title="6.1 创建事件"></a>6.1 创建事件</h2><p>事件需要继承RemoteApplicationEvent类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteApplicationEvent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CustomEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//一定要有，序列化时会用到 </span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomEvent</span><span class="hljs-params">(String msg, String originService, String destinationService)</span> &#123;<br>        <span class="hljs-built_in">super</span>(msg, originService, destinationService);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-添加配置类"><a href="#6-2-添加配置类" class="headerlink" title="6.2 添加配置类"></a>6.2 添加配置类</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@RemoteApplicationEventScan</span>(basePackageClasses = CustomEvent.class)<br>public class BusConfiguration &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">@RemoteApplicationEventScan(basePackageClasses = CustomEvent.class)用来告诉bus自己实现的事件在哪个包下，也可直接写在启动类上<br></code></pre></td></tr></table></figure><h2 id="6-3-添加事件监听器"><a href="#6-3-添加事件监听器" class="headerlink" title="6.3  添加事件监听器"></a>6.3  添加事件监听器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomEventListener</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String port;<br><br>    <span class="hljs-meta">@EventListener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCustomRemoteApplicationEvent</span><span class="hljs-params">(CustomEvent event)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;CustomRemoteApplicationEvent - &quot;</span> + <span class="hljs-string">&quot; port : %s , Source : %s , originService : %s , destinationService : %s \n&quot;</span>, port, event.getSource(), event.getOriginService(), event.getDestinationService());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们这里监听器只是打印了一句话</p><h2 id="6-4-事件发布者"><a href="#6-4-事件发布者" class="headerlink" title="6.4 事件发布者"></a>6.4 事件发布者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Spring Cloud bus 外部化配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BusProperties busProperties;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事件发布者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationEventPublisher eventPublisher;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/bus/event/publish/custom&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">publishUserEvent</span><span class="hljs-params">(String msg, <span class="hljs-meta">@RequestParam(value = &quot;destination&quot;, required = false)</span> String destination)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instanceId</span> <span class="hljs-operator">=</span> busProperties.getId();<br>        <span class="hljs-type">CustomEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomEvent</span>(msg, instanceId, destination);<br>        eventPublisher.publishEvent(event);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中的instanceId可以通过spring.cloud.bus.id属性设置：</p><p>下面是官网的原话，我谷歌翻译了以下</p><p><img src="https://img-blog.csdnimg.cn/2020050721510098.png"></p><p><img src="https://img-blog.csdnimg.cn/20200507215100229.png"></p><h2 id="6-5-配置文件"><a href="#6-5-配置文件" class="headerlink" title="6.5 配置文件"></a>6.5 配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">management:</span>  <br>    <span class="hljs-attr">endpoints:</span>    <br>        <span class="hljs-attr">web:</span>      <br>            <span class="hljs-attr">exposure:</span>        <br>                <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">spring:</span>  <br>    <span class="hljs-attr">rabbitmq:</span>    <br>        <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <br>        <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <br>        <span class="hljs-attr">username:</span> <span class="hljs-string">springcloud</span>    <br>        <span class="hljs-attr">password:</span> <span class="hljs-string">springcloud</span>  <br>    <span class="hljs-attr">application:</span>    <br>        <span class="hljs-attr">name:</span> <span class="hljs-string">bus-custom-event</span><br></code></pre></td></tr></table></figure><h2 id="6-5启动测试"><a href="#6-5启动测试" class="headerlink" title="6.5启动测试"></a>6.5启动测试</h2><p>分别以8082和8083端口启动项目（ideal中可以通过修改program arguments参数来对同一个项目并行启动）</p><p><img src="https://img-blog.csdnimg.cn/20200507215457782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODMxMjUwMg==,size_16,color_FFFFFF,t_70"></p><p>启动后，访问：<a href="http://localhost:8082/bus/event/publish/custom?destination=bus-custom-event:8083">http://localhost:8082/bus/event/publish/custom?destination=bus-custom-event:8083</a></p><p>会发现启动的两个项目都可以监听到事件并打印信息</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传自己的git项目到maven</title>
    <link href="/2022/12/10/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/"/>
    <url>/2022/12/10/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/</url>
    
    <content type="html"><![CDATA[<p>上传自己的git项目到maven，结合两位博客成功上传。</p><span id="more"></span><h3 id="感谢两位博主，地址分别为"><a href="#感谢两位博主，地址分别为" class="headerlink" title="感谢两位博主，地址分别为"></a>感谢两位博主，地址分别为</h3><ol><li><a href="https://www.jianshu.com/p/8c3d7fb09bce">https://www.jianshu.com/p/8c3d7fb09bce</a></li><li><a href="https://blog.csdn.net/sinat_23290725/article/details/85018092">https://blog.csdn.net/sinat_23290725/article/details/85018092</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="/2022/12/10/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/12/10/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>IDEA快捷键比较全面的</p><span id="more"></span><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><ol><li>Ctrl+Shift + Enter，语句完成</li><li>“！”，否定完成，输入表达式时按 “！”键</li><li>Ctrl+E，最近的文件</li><li>Ctrl+Shift+E，最近更改的文件</li><li>Shift+Click，可以关闭文件</li><li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li><li>Ctrl+F12，可以显示当前文件的结构</li><li>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Alt+Q，可以看到当前方法的声明</li><li>Ctrl+P，可以显示参数信息</li><li>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</li><li>Alt+Insert，可以生成构造器&#x2F;Getter&#x2F;Setter等</li><li>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</li><li>Ctrl+Alt+T，可以把代码包在一个块内，例如：try&#x2F;catch</li><li>Ctrl+Enter，导入包，自动修正</li><li>Ctrl+Alt+L，格式化代码</li><li>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</li><li>Ctrl+Alt+O，优化导入的类和包</li><li>Ctrl+R，替换文本</li><li>Ctrl+F，查找文本</li><li>Ctrl+Shift+Space，自动补全代码</li><li>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</li><li>Ctrl+Shift+Alt+N，查找类中的方法或变量</li><li>Alt+Shift+C，最近的更改</li><li>Alt+Shift+Up&#x2F;Down，上&#x2F;下移一行</li><li>Shift+F6，重构 - 重命名</li><li>Ctrl+X，删除行</li><li>Ctrl+D，复制行</li><li>Ctrl+&#x2F;或Ctrl+Shift+&#x2F;，注释（&#x2F;&#x2F;或者&#x2F;**&#x2F;）</li><li>Ctrl+J，自动代码（例如：serr）</li><li>Ctrl+Alt+J，用动态模板环绕</li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+Q，显示注释文档</li><li>Alt+F1，查找代码所在位置</li><li>Alt+1，快速打开或隐藏工程面板</li><li>Ctrl+Alt+left&#x2F;right，返回至上次浏览的位置</li><li>Alt+left&#x2F;right，切换代码视图</li><li>Alt+Up&#x2F;Down，在方法间快速移动定位</li><li>Ctrl+Shift+Up&#x2F;Down，向上&#x2F;下移动语句</li><li>F2 或 Shift+F2，高亮错误或警告快速定位</li><li>Tab，代码标签输入完成后，按 Tab，生成代码</li><li>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</li><li>Alt+F3，逐个往下查找相同文本，并高亮显示</li><li>Ctrl+Up&#x2F;Down，光标中转到第一行或最后一行下</li><li>Ctrl+B&#x2F;Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</li><li>Ctrl+Alt+B，跳转到方法实现处</li><li>Ctrl+Shift+Backspace，跳转到上次编辑的地方</li><li>Ctrl+O，重写方法</li><li>Ctrl+Alt+Space，类名自动完成</li><li>Ctrl+Alt+Up&#x2F;Down，快速跳转搜索结果</li><li>Ctrl+Shift+J，整合两行</li><li>Alt+F8，计算变量值</li><li>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</li><li>Ctrl+Alt+Shift+V，简单粘贴</li><li>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</li><li>F12，把焦点从编辑器移到最近使用的工具窗口</li><li>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</li><li>Ctrl+W，可以选择单词继而语句继而行继而函数</li><li>Ctrl+Shift+W，取消选择光标所在词</li><li>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</li><li>Ctrl+I，实现方法</li><li>Ctrl+Shift+U，大小写转化</li><li>Ctrl+Y，删除当前行</li><li>Shift+Enter，向下插入新行</li><li>psvm&#x2F;sout，main&#x2F;System.out.println(); Ctrl+J，查看更多</li><li>Ctrl+Shift+F，全局查找</li><li>Ctrl+F，查找&#x2F;Shift+F3，向上查找&#x2F;F3，向下查找</li><li>Ctrl+Shift+S，高级搜索</li><li>Ctrl+U，转到父类</li><li>Ctrl+Alt+S，打开设置对话框</li><li>Alt+Shift+Inert，开启&#x2F;关闭列选择模式</li><li>Ctrl+Alt+Shift+S，打开当前项目&#x2F;模块属性</li><li>Ctrl+G，定位行</li><li>Alt+Home，跳转到导航栏</li><li>Ctrl+Enter，上插一行</li><li>Ctrl+Backspace，按单词删除</li><li>Ctrl+”+&#x2F;-“，当前方法展开、折叠</li><li>Ctrl+Shift+”+&#x2F;-“，全部展开、折叠</li></ol><h3 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h3><ol><li>Ctrl+F2，停止</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F10，运行</li><li>Ctrl+Shift+F8，查看断点</li><li>F8，步过</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+Shift+F7，强制步入</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点</li><li>Ctrl+F8，切换行断点</li><li>Ctrl+F9，生成项目</li><li>Alt+1，项目</li><li>Alt+2，收藏</li><li>Alt+6，TODO</li><li>Alt+7，结构</li><li>Ctrl+Shift+C，复制路径</li><li>Ctrl+Alt+Shift+C，复制引用，必须选择类名</li><li>Ctrl+Alt+Y，同步</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li><li>Shift+F12，还原默认布局</li><li>Ctrl+Shift+F12，隐藏&#x2F;恢复所有窗口</li><li>Ctrl+F4，关闭</li><li>Ctrl+Shift+F4，关闭活动选项卡</li><li>Ctrl+Tab，转到下一个拆分器</li><li>Ctrl+Shift+Tab，转到上一个拆分器</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li>Ctrl+F，查找</li><li>Ctrl+R，替换</li><li>F3，查找下一个</li><li>Shift+F3，查找上一个</li><li>Ctrl+Shift+F，在路径中查找</li><li>Ctrl+Shift+R，在路径中替换</li><li>Ctrl+Shift+S，搜索结构</li><li>Ctrl+Shift+M，替换结构</li><li>Alt+F7，查找用法</li><li>Ctrl+Alt+F7，显示用法</li><li>Ctrl+F7，在文件中查找用法</li><li>Ctrl+Shift+F7，在文件中高亮显示用法</li></ol><h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h3><ol><li>Alt+~，VCS 操作菜单</li><li>Ctrl+K，提交更改</li><li>Ctrl+T，更新项目</li><li>Ctrl+Alt+Shift+D，显示变化</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于注解的Redis分布式锁</title>
    <link href="/2022/12/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2022/12/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………</p><span id="more"></span><ul><li>为什么使用基于注解的方式？</li></ul><p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂考虑利用AOP的方式，完成这一重复性的工作。<br>在没利用注解之前加锁方式如下,基本每次都要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 会话ID</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.uuid();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">getLock</span> <span class="hljs-operator">=</span> RedisLockUtil.tryGetDistributedLock(key, uuid, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">if</span> (getLock) &#123;<br>    <span class="hljs-comment">//如果获取锁，执行业务代码</span><br>    <span class="hljs-comment">// todo</span><br><br>&#125;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>RedisLockUtil.releaseDistributedLock(key, uuid);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>基于注解的使用放入如下，比较便捷</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">Locker(<span class="hljs-params">key</span> = RedisKeyEnum.POOL_ORDER_LOCK, <span class="hljs-params">paramExp</span> = <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-params">noGetMsg</span> = <span class="hljs-string">&quot;老铁来晚了!&quot;</span>)</span><br>public GrabAndAnswerVo grab<span class="hljs-constructor">OrderAnswer(String <span class="hljs-params">orderId</span>, RedisKeyEnum <span class="hljs-params">poolType</span>, User <span class="hljs-params">currentUser</span>)</span> &#123;<br>Long workId = order<span class="hljs-constructor">Exist(<span class="hljs-params">poolType</span>, <span class="hljs-params">orderId</span>)</span>;<br>return doctor<span class="hljs-constructor">GrabOrderAnswer(<span class="hljs-params">poolType</span>, <span class="hljs-params">orderId</span>, <span class="hljs-params">currentUser</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>下面介绍以下代码</li></ul><ol><li>首先AOP的使用方式我定义为利用注解来判断是否需要加锁，类似事务的方式，我们定义一个Locker注解,这个注解的功能可以看代码;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 锁注解</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 625</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Locker &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 要锁定的Key</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>RedisKeyEnum <span class="hljs-title function_">key</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 要锁定的参数</span><br><span class="hljs-comment"> * 格式:</span><br><span class="hljs-comment"> * 0    表示一个参数toString</span><br><span class="hljs-comment"> * 0?payOrder    表示一个参数toString，且额外拼接锁定的Key为payOrder</span><br><span class="hljs-comment"> * 0#name 表示第一个参数的name字段</span><br><span class="hljs-comment"> * 0#name?payOrder  表示第一个参数的name字段，且额外拼接锁定的Key为payOrder</span><br><span class="hljs-comment"> * 0#name+1#name?payOrder表示第一个参数的name字段+第二个参数的name字段，且额外拼接锁定的Key为payOrder</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">paramExp</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务超时自动释放锁的时间,应该大于正常业务执行时间</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">expireTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">10000</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最小持有锁的时间</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">limitTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否持续竞争锁，是则阻塞方法直至获取锁，或者达到最大竞争次数释放锁</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">continueGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最大竞争次数。默认0不限次</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxGetNum</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拿不到锁，异常返回信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">noGetMsg</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;未获取锁&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>实现AOP的拦截规则</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 锁AOP拦截规则</span><br><span class="hljs-comment"> */</span><br>@Aspect<br>@Component<br>public <span class="hljs-keyword">class</span> LockerAspect &#123;<br><br><span class="hljs-keyword">private</span> static Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(LockerAspect.<span class="hljs-params">class</span>)</span>;<br><br>@<span class="hljs-constructor">Pointcut(<span class="hljs-string">&quot;@annotation(com.ym.common.utils.annotation.Locker)&quot;</span>)</span><br>public void pointcut<span class="hljs-literal">()</span> &#123;<br>&#125;<br><br>@<span class="hljs-constructor">Around(<span class="hljs-string">&quot;pointcut()&quot;</span>)</span><br>public Object around(ProceedingJoinPoint joinPoint) &#123;<br>Object proceed = null;<br>long startTime = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>Locker locker = get<span class="hljs-constructor">Annotation(<span class="hljs-params">joinPoint</span>, Locker.<span class="hljs-params">class</span>)</span>;<br>Object<span class="hljs-literal">[]</span> args = joinPoint.get<span class="hljs-constructor">Args()</span>;<br><span class="hljs-comment">// 最大尝试次数</span><br><span class="hljs-built_in">int</span> maxGetNum = locker.max<span class="hljs-constructor">GetNum()</span>;<br><span class="hljs-comment">// 会话标志</span><br>String uuid = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UUID</span>.</span></span>uuid<span class="hljs-literal">()</span>;<br><span class="hljs-comment">// 锁key</span><br>String lockFiled = get<span class="hljs-constructor">LockFiled(<span class="hljs-params">args</span>, <span class="hljs-params">locker</span>.<span class="hljs-params">paramExp</span>()</span>);<br>String lockKey = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisKeyUtil</span>.</span></span>key<span class="hljs-constructor">Builder(<span class="hljs-params">locker</span>.<span class="hljs-params">key</span>()</span>, lockFiled);<br><span class="hljs-comment">// 过期时间</span><br>long expireTime = locker.expire<span class="hljs-constructor">Time()</span>;<br>boolean lock = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisLockUtil</span>.</span></span><span class="hljs-keyword">try</span><span class="hljs-constructor">GetDistributedLock(<span class="hljs-params">lockKey</span>, <span class="hljs-params">uuid</span>, <span class="hljs-params">expireTime</span>)</span>;<br><span class="hljs-built_in">int</span> getNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!lock<span class="hljs-operator"> &amp;&amp; </span>locker.continue<span class="hljs-constructor">Get()</span><span class="hljs-operator"> &amp;&amp; </span>(maxGetNum<span class="hljs-operator"> == </span><span class="hljs-number">0</span><span class="hljs-operator"> || </span>getNum &lt; maxGetNum)) &#123;<br><span class="hljs-comment">// 如果获取失败，且持续获取，且尝试次数小于最大次数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Threads</span>.</span></span>sleep(<span class="hljs-number">100</span>);<br>lock = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisLockUtil</span>.</span></span><span class="hljs-keyword">try</span><span class="hljs-constructor">GetDistributedLock(<span class="hljs-params">lockKey</span>, <span class="hljs-params">uuid</span>, <span class="hljs-params">expireTime</span>)</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!lock) &#123;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BusinessException(<span class="hljs-params">locker</span>.<span class="hljs-params">noGetMsg</span>()</span>);<br>&#125;<br><span class="hljs-comment">// -------------------------------before-------------------------</span><br><span class="hljs-keyword">try</span> &#123;<br>proceed = joinPoint.proceed<span class="hljs-literal">()</span>;<br><span class="hljs-comment">// -------------------------------after-------------------------</span><br><span class="hljs-comment">// 如果业务时间小于最小持有锁时间，休眠一会</span><br>long sleepTime = locker.limit<span class="hljs-constructor">Time()</span> - (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span> - startTime);<br><span class="hljs-keyword">if</span> (sleepTime &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Threads</span>.</span></span>sleep(sleepTime);<br>&#125;<br>&#125; catch (Throwable throwable) &#123;<br>throwable.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125; finally &#123;<br><span class="hljs-comment">// 释放锁</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisLockUtil</span>.</span></span>release<span class="hljs-constructor">DistributedLock(<span class="hljs-params">lockKey</span>, <span class="hljs-params">uuid</span>)</span>;<br>&#125;<br>return proceed;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据表达式获取要锁的字段</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param args</span><br><span class="hljs-comment"> * @param expression 表达式</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String get<span class="hljs-constructor">LockFiled(Object[] <span class="hljs-params">args</span>, String <span class="hljs-params">expression</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (args<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>args.length<span class="hljs-operator"> == </span><span class="hljs-number">0</span><span class="hljs-operator"> || </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Blank(<span class="hljs-params">expression</span>)</span>) &#123;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">UnsupportedOperationException(<span class="hljs-string">&quot;Locker所在方法参数为空! 请使用代码锁&quot;</span>)</span>;<br>&#125;<br>String<span class="hljs-literal">[]</span> extraParams = expression.split(<span class="hljs-string">&quot;\\?&quot;</span>);<br>String extraKey = null;<br><span class="hljs-keyword">if</span> (extraParams.length &gt; <span class="hljs-number">1</span>) &#123;<br>extraKey = extraParams<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>;<br>expression = extraParams<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>&#125;<br>String<span class="hljs-literal">[]</span> commboExpression = expression.split(<span class="hljs-string">&quot;\\+&quot;</span>);<br>StringBuilder field = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br><span class="hljs-keyword">for</span> (String commbo : commboExpression) &#123;<br>String<span class="hljs-literal">[]</span> split = commbo.split(<span class="hljs-string">&quot;#&quot;</span>);<br><span class="hljs-built_in">int</span> argsNum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (split.length<span class="hljs-operator"> == </span><span class="hljs-number">1</span>) &#123;<br>argsNum = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">split</span>[0])</span>;<br>field.append(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">args</span>[<span class="hljs-params">argsNum</span>])</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>argsNum = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">split</span>[0])</span>;<br>Object fieldValue = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtils</span>.</span></span>get<span class="hljs-constructor">FieldValue(<span class="hljs-params">args</span>[<span class="hljs-params">argsNum</span>], <span class="hljs-params">split</span>[1])</span>;<br>field.append(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">fieldValue</span>)</span>);<br>&#125;<br>&#125; catch (Exception e) &#123;<br>throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">UnsupportedOperationException(<span class="hljs-string">&quot;Locker表达式paramExp不正确！&quot;</span>)</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (extraKey != null) &#123;<br>field.append(extraKey);<br>&#125;<br>return field.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否存在注解，如果存在就获取</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> &lt;T&gt; T get<span class="hljs-constructor">Annotation(JoinPoint <span class="hljs-params">joinPoint</span>, Class&lt;? <span class="hljs-params">extends</span> Annotation&gt; <span class="hljs-params">t</span>)</span> &#123;<br>Signature signature = joinPoint.get<span class="hljs-constructor">Signature()</span>;<br>MethodSignature methodSignature = (MethodSignature) signature;<br>Method <span class="hljs-keyword">method</span> = methodSignature.get<span class="hljs-constructor">Method()</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">method</span> != null) &#123;<br>return (T) <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(<span class="hljs-params">t</span>)</span>;<br>&#125;<br>return null;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis锁</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文读懂SpringCloud与Eureka，Feign，Ribbon，Hystrix，Zuul核心组件间的关系</title>
    <link href="/2022/12/10/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82SpringCloud%E4%B8%8EEureka%EF%BC%8CFeign%EF%BC%8CRibbon%EF%BC%8CHystrix%EF%BC%8CZuul%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/12/10/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82SpringCloud%E4%B8%8EEureka%EF%BC%8CFeign%EF%BC%8CRibbon%EF%BC%8CHystrix%EF%BC%8CZuul%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud的主要组件"><a href="#Spring-Cloud的主要组件" class="headerlink" title="Spring Cloud的主要组件"></a>Spring Cloud的主要组件</h2><p>Spring Cloud是目前微服务架构领域的翘楚，无数的书籍博客都在讲解这个技术，实际上，Spring Cloud是一个全家桶式的技术栈，包含了很多组件。本文先从其最核心的几个组件入手，来剖析一下其底层的工作原理。也就是Eureka、Ribbon、Feign、Hystrix、Zuul这几个组件。</p><h2 id="业务场景介绍"><a href="#业务场景介绍" class="headerlink" title="业务场景介绍"></a>业务场景介绍</h2><p>先来给大家说一个业务场景，假设咱们现在开发一个电商网站，要实现支付订单的功能，流程如下：</p><ul><li><p>创建一个订单，如果用户立刻支付了这个订单，我们需要将订单状态更新为“已支付”</p></li><li><p>扣减相应的商品库存</p></li><li><p>通知仓储中心，进行发货</p></li><li><p>给用户的这次购物增加相应的积分</p></li></ul><p>针对上述流程，我们需要有订单服务、库存服务、仓储服务、积分服务。整个流程的大体思路如下：</p><p>用户针对一个订单完成支付之后，就会去找订单服务，更新订单状态<br>订单服务调用库存服务，完成相应功能<br>订单服务调用仓储服务，完成相应功能<br>订单服务调用积分服务，完成相应功能</p><p>至此，整个支付订单的业务流程结束<br>下图这张图，清晰表明了各服务间的调用过程：<br><img src="https://img-blog.csdnimg.cn/20190319153230122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Spring-Cloud组件之间如何运作"><a href="#Spring-Cloud组件之间如何运作" class="headerlink" title="Spring Cloud组件之间如何运作"></a>Spring Cloud组件之间如何运作</h2><p>Eureka组件<br>咱们来考虑第一个问题：订单服务想要调用库存服务、仓储服务，或者是积分服务，怎么调用？</p><ul><li><p>订单服务压根儿就不知道人家库存服务在哪台机器上啊！他就算想要发起一个请求，都不知道发送给谁，有心无力！</p></li><li><p>这时候，就轮到Spring Cloud Eureka出场了。Eureka是微服务架构中的注册中心，专门负责服务的注册与发现。</p></li></ul><p>通过这个图来了解Eureka是如何工作的<img src="https://img-blog.csdnimg.cn/20190319153620781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示，库存服务、仓储服务、积分服务中都有一个Eureka Client组件，这个组件专门负责将这个服务的信息注册到Eureka Server中。说白了，就是告诉Eureka Server，自己在哪台机器上，监听着哪个端口。而Eureka Server是一个注册中心，里面有一个注册表，保存了各服务所在的机器和端口号。</p><p>订单服务里也有一个Eureka Client组件，这个Eureka Client组件会找Eureka Server问一下：库存服务在哪台机器啊？监听着哪个端口啊？仓储服务呢？积分服务呢？然后就可以把这些相关信息从Eureka Server的注册表中拉取到自己本地缓存起来。</p><p>这时如果订单服务想要调用库存服务，不就可以找自己本地的Eureka Client问一下库存服务在哪台机器？监听哪个端口吗？收到响应后，紧接着就可以发送一个请求过去，调用库存服务扣减库存的那个接口！同理，如果订单服务要调用仓储服务、积分服务，也是如法炮制。</p><p>Feign组件<br>现在订单服务确实知道库存服务、积分服务、仓库服务在哪里了，同时也监听着哪些端口号了，但是新问题又来了</p><ul><li><p>订单服务要自己写一大堆代码，跟其他服务建立网络连接，然后构造一个复杂的请求，接着发送请求过去，最后对返回的响应结果再写一大堆代码来处理吗？</p></li><li><p>别急，Feign早已为我们提供好了优雅的解决方案<br><img src="https://img-blog.csdnimg.cn/20190319154108621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没有底层的建立连接、构造请求、解析响应的代码，直接就是用注解定义一个 FeignClient接口，然后调用那个接口就可以了。人家Feign Client会在底层根据你的注解，跟你指定的服务建立连接、构造请求、发起靕求、获取响应、解析响应，等等。这一系列脏活累活，人家Feign全给你干了。</p></li></ul><p>Feign实现原理解析</p><ul><li><p>首先，如果你对某个接口定义了@FeignClient注解，Feign就会针对这个接口创建一个动态代理</p></li><li><p>接着你要调用哪个接口，本质就是会调用 Feign创建的动态代理，这是核心中的核心</p></li><li><p>Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务的地址</p></li><li><p>最后针对这个地址，发起请求、解析响应<br><img src="https://img-blog.csdnimg.cn/20190319154206707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>Ribbon组件<br>说完了Feign，还没完。现在新的问题又来了，如果人家库存服务部署在了3台机器上，如下所示：</p><ul><li><p>192.168.170:9090</p></li><li><p>192.168.171:9090</p></li><li><p>192.168.172:9090</p></li></ul><p>这下糟糕了，人家Feign怎么知道该请求哪台机器呢？</p><p>Ribbon就派上用场了。Ribbon就是专门解决这个问题的。它的作用是负载均衡，会帮你在每次请求时选择一台机器，均匀的把请求分发到各个机器上。</p><p>Ribbon的负载均衡默认使用的最经典的Round Robin轮询算法。这是啥？简单来说，就是如果订单服务对库存服务发起10次请求，那就先让你请求第1台机器、然后是第2台机器、第3台机器、第4台机器、第5台机器，接着再来—个循环，第1台机器、第2台机器。。。以此类推。</p><p>Hystrix组件<br>当然这些服务正常的情况下，系统是没有问题的，但是谁也不能保证做的系统就一点问题也没有，所以万一要是哪台机器的服务挂了，怎么办，服务与服务之间都是紧密联系的，会不会产生连锁反应，导致整个系统崩掉。<br><img src="https://img-blog.csdnimg.cn/2019031915502198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图，这么多服务互相调用，要是不做任何保护的话，某一个服务挂了，就会引起连锁反应，导致别的服务也挂。比如积分服务挂了，会导致订单服务的线程全部卡在请求积分服务这里，没有一个线程可以工作，瞬间导致订单服务也挂了，别人请求订单服务全部会卡住，无法响应。</p><p>但是我们思考一下，就算积分服务挂了，订单服务也可以不用挂啊！为什么？</p><ul><li><p>我们结合业务来看：支付订单的时候，只要把库存扣减了，然后通知仓库发货就OK了</p></li><li><p>如果积分服务挂了，大不了等他恢复之后，慢慢人肉手工恢复数据！为啥一定要因为一个积分服务挂了，就直接导致订单服务也挂了呢？不可以接受！</p></li><li><p>Hystrix闪亮登场了。Hystrix是隔离、熔断以及降级的一个框架。啥意思呢？说白了，Hystrix会搞很多个小小的线程池，比如订单服务请求库存服务是一个线程池，请求仓储服务是一个线程池，请求积分服务是一个线程池。每个线程池里的线程就仅仅用于请求那个服务。</p></li></ul><p>现在有了Hystrix组件，再次发生积分服务挂了，会怎样？</p><ul><li><p>订单服务调用库存服务、仓储服务的这两个线程池都是正常工作的，所以这两个服务不会受到任何影响。</p></li><li><p>订单服务调用积分服务，如果积分服务挂了，那么这时系统会直接返回一个固定的字符串或者图片等等，不至于造成卡顿现象，影响客户体验。</p></li></ul><p>Zuul组件</p><p>业务场景：假设你后台部署了几百个服务，现在有个前端兄弟，人家请求是直接从浏览器那儿发过来的。人家要请求一下库存服务，你难道还让人家记着这服务的名字叫做inventory-service？部署在5台机器上？就算人家肯记住这一个，你后台可有几百个服务的名称和地址呢？难不成人家请求一个，就得记住一个？</p><p>解决办法：Zuul组件，一种微服务网关组件，负责网络路由的，类似于路由器的功能。所以一般微服务架构中都必然会设计一个网关在里面，像android、ios、pc前端、微信小程序、H5等等，不用去关心后端有几百个服务，就知道有一个网关，所有请求都往网关走，网关会根据请求中的一些特征，将请求转发给后端的各个服务。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再来总结一下，上述Spring Cloud核心组件，在微服务架构中，分别扮演的角色：</p><ul><li><p>Eureka：各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里</p></li><li><p>Ribbon：服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台</p></li><li><p>Feign：基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求</p></li><li><p>Hystrix：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题</p></li><li><p>Zuul：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务<br><img src="https://img-blog.csdnimg.cn/2019031916013768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM4Nzk4MjQ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="文章转载"><a href="#文章转载" class="headerlink" title="文章转载"></a>文章转载</h2><p><a href="https://www.jianshu.com/p/31dfb595170c">https://www.jianshu.com/p/31dfb595170c</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一致性hash是什么意思？</title>
    <link href="/2022/12/10/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/"/>
    <url>/2022/12/10/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么…</p><span id="more"></span><p>&amp;nbsp;</p><p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么，我们先来描述一下这个经典的分布式缓存的应用场景。</p><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>假设，我们有三台缓存服务器，用于缓存图片，我们为这三台缓存服务器编号为0号、1号、2号，现在，有3万张图片需要缓存，我们希望这些图片被均匀的缓存到这3台服务器上，以便它们能够分摊缓存的压力。也就是说，我们希望每台服务器能够缓存1万张左右的图片，那么，我们应该怎样做呢？如果我们没有任何规律的将3万张图片平均的缓存在3台服务器上，可以满足我们的要求吗？可以！但是如果这样做，当我们需要访问某个缓存项时，则需要遍历3台缓存服务器，从3万个缓存项中找到我们需要访问的缓存，遍历的过程效率太低，时间太长，当我们找到需要访问的缓存项时，时长可能是不能被接受的，也就失去了缓存的意义，缓存的目的就是提高速度，改善用户体验，减轻后端服务器压力，如果每次访问一个缓存项都需要遍历所有缓存服务器的所有缓存项，想想就觉得很累，那么，我们该怎么办呢？原始的做法是对缓存项的键进行哈希，将hash后的结果对缓存服务器的数量进行取模操作，通过取模后的结果，决定缓存项将会缓存在哪一台服务器上，这样说可能不太容易理解，我们举例说明，仍然以刚才描述的场景为例，假设我们使用图片名称作为访问图片的key，假设图片名称是不重复的，那么，我们可以使用如下公式，计算出图片应该存放在哪台服务器上。</p><p><strong>hash（图片名称）% N</strong></p><p>因为图片的名称是不重复的，所以，当我们对同一个图片名称做相同的哈希计算时，得出的结果应该是不变的，如果我们有3台服务器，使用哈希后的结果对3求余，那么余数一定是0、1或者2，没错，正好与我们之前的服务器编号相同，如果求余的结果为0， 我们就把当前图片名称对应的图片缓存在0号服务器上，如果余数为1，就把当前图片名对应的图片缓存在1号服务器上，如果余数为2，同理，那么，当我们访问任意一个图片的时候，只要再次对图片名称进行上述运算，即可得出对应的图片应该存放在哪一台缓存服务器上，我们只要在这一台服务器上查找图片即可，如果图片在对应的服务器上不存在，则证明对应的图片没有被缓存，也不用再去遍历其他缓存服务器了，通过这样的方法，即可将3万张图片随机的分布到3台缓存服务器上了，而且下次访问某张图片时，直接能够判断出该图片应该存在于哪台缓存服务器上，这样就能满足我们的需求了，我们暂时称上述算法为HASH算法或者取模算法，取模算法的过程可以用下图表示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/hash.png" alt="白话解析：一致性哈希算法 consistent hashing" title="1486487517553357.png"></p><p>但是，使用上述HASH算法进行缓存时，会出现一些缺陷，试想一下，如果3台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？没错，很简单，多增加两台缓存服务器不就行了，假设，我们增加了一台缓存服务器，那么缓存服务器的数量就由3台变成了4台，此时，如果仍然使用上述方法对同一张图片进行缓存，那么这张图片所在的服务器编号必定与原来3台服务器时所在的服务器编号不同，因为除数由3变为了4，被除数不变的情况下，余数肯定不同，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变，换句话说，当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存中获取数据时，则会向后端服务器请求数据，同理，假设3台缓存中突然有一台缓存服务器出现了故障，无法进行缓存，那么我们则需要将故障机器移除，但是如果移除了一台缓存服务器，那么缓存服务器数量从3台变为2台，如果想要访问一张图片，这张图片的缓存位置必定会发生改变，以前缓存的图片也会失去缓存的作用与意义，由于大量缓存在同一时间失效，造成了缓存的雪崩，此时前端缓存已经无法起到承担部分压力的作用，后端服务器将会承受巨大的压力，整个系统很有可能被压垮，所以，我们应该想办法不让这种情况发生，但是由于上述HASH算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的，为了解决这些问题，一致性哈希算法诞生了。</p><p>&amp;nbsp;</p><p>我们来回顾一下使用上述算法会出现的问题。</p><p>问题1：当缓存服务器数量发生变化时，会引起缓存的雪崩，可能会引起整体系统压力过大而崩溃（大量缓存同一时间失效）。</p><p>问题2：当缓存服务器数量发生变化时，几乎所有缓存的位置都会发生改变，怎样才能尽量减少受影响的缓存呢？</p><p>&amp;nbsp;</p><p>其实，上面两个问题是一个问题，那么，一致性哈希算法能够解决上述问题吗？</p><p>我们现在就来了解一下一致性哈希算法。</p><p>&amp;nbsp; &amp;nbsp;</p><h2 id="一致性哈希算法的基本概念"><a href="#一致性哈希算法的基本概念" class="headerlink" title="一致性哈希算法的基本概念"></a>一致性哈希算法的基本概念</h2><p>其实，一致性哈希算法也是使用取模的方法，只是，刚才描述的取模法是对服务器的数量进行取模，而一致性哈希算法是对2^32取模，什么意思呢？我们慢慢聊。</p><p>&amp;nbsp;</p><p>首先，我们把二的三十二次方想象成一个圆，就像钟表一样，钟表的圆可以理解成由60个点组成的圆，而此处我们把这个圆想象成由2^32个点组成的圆，示意图如下：</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_2.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到2^32-1,也就是说0点左侧的第一个点代表2^32-1&amp;nbsp;</p><p>我们把这个由2的32次方个点组成的圆环称为hash环。</p><p>&amp;nbsp;</p><p>那么，一致性哈希算法与上图中的圆环有什么关系呢？我们继续聊，仍然以之前描述的场景为例，假设我们有3台缓存服务器，服务器A、服务器B、服务器C，那么，在生产环境中，这三台服务器肯定有自己的IP地址，我们使用它们各自的IP地址进行哈希计算，使用哈希后的结果对2^32取模，可以使用如下公式示意。</p><p><strong>hash（服务器A的IP地址） % &amp;nbsp;2^32</strong></p><p>通过上述公式算出的结果一定是一个0到2^32-1之间的一个整数，我们就用算出的这个整数，代表服务器A，既然这个整数肯定处于0到2^32-1之间，那么，上图中的hash环上必定有一个点与这个整数对应，而我们刚才已经说明，使用这个整数代表服务器A，那么，服务器A就可以映射到这个环上，用下图示意</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_3.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>同理，服务器B与服务器C也可以通过相同的方法映射到上图中的hash环中</p><p><strong>hash（服务器B的IP地址） % &amp;nbsp;2^32</strong></p><p><strong>hash（服务器C的IP地址） % &amp;nbsp;2^32</strong></p><p>通过上述方法，可以将服务器B与服务器C映射到上图中的hash环上，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_4.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>假设3台服务器映射到hash环上以后如上图所示（当然，这是理想的情况，我们慢慢聊）。</p><p>&amp;nbsp;</p><p>好了，到目前为止，我们已经把缓存服务器与hash环联系在了一起，我们通过上述方法，把缓存服务器映射到了hash环上，那么使用同样的方法，我们也可以将需要缓存的对象映射到hash环上。</p><p>&amp;nbsp;</p><p>假设，我们需要使用缓存服务器缓存图片，而且我们仍然使用图片的名称作为找到图片的key，那么我们使用如下公式可以将图片映射到上图中的hash环上。</p><p><strong>hash（图片名称） % &amp;nbsp;2^32</strong></p><p>映射后的示意图如下，下图中的橘黄色圆形表示图片</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_5.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>好了，现在服务器与图片都被映射到了hash环上，那么上图中的这个图片到底应该被缓存到哪一台服务器上呢？上图中的图片将会被缓存到服务器A上，为什么呢？因为从图片的位置开始，沿顺时针方向遇到的第一个服务器就是A服务器，所以，上图中的图片将会被缓存到服务器A上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_6.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>没错，一致性哈希算法就是通过这种方法，判断一个对象应该被缓存到哪台服务器上的，将缓存服务器与被缓存对象都映射到hash环上以后，从被缓存对象的位置出发，沿顺时针方向遇到的第一个服务器，就是当前对象将要缓存于的服务器，由于被缓存对象与服务器hash后的值是固定的，所以，在服务器不变的情况下，一张图片必定会被缓存到固定的服务器上，那么，当下次想要访问这张图片时，只要再次使用相同的算法进行计算，即可算出这个图片被缓存在哪个服务器上，直接去对应的服务器查找对应的图片即可。</p><p>&amp;nbsp;</p><p>刚才的示例只使用了一张图片进行演示，假设有四张图片需要缓存，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_7.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>1号、2号图片将会被缓存到服务器A上，3号图片将会被缓存到服务器B上，4号图片将会被缓存到服务器C上。</p><p>&amp;nbsp; &amp;nbsp;</p><h2 id="一致性哈希算法的优点"><a href="#一致性哈希算法的优点" class="headerlink" title="一致性哈希算法的优点"></a>一致性哈希算法的优点</h2><p>经过上述描述，我想兄弟你应该已经明白了一致性哈希算法的原理了，但是话说回来，一致性哈希算法能够解决之前出现的问题吗，我们说过，如果简单的对服务器数量进行取模，那么当服务器数量发生变化时，会产生缓存的雪崩，从而很有可能导致系统崩溃，那么使用一致性哈希算法，能够避免这个问题吗？我们来模拟一遍，即可得到答案。</p><p>&amp;nbsp;</p><p>假设，服务器B出现了故障，我们现在需要将服务器B移除，那么，我们将上图中的服务器B从hash环上移除即可，移除服务器B以后示意图如下。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_8.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在服务器B未移除时，图片3应该被缓存到服务器B中，可是当服务器B移除以后，按照之前描述的一致性哈希算法的规则，图片3应该被缓存到服务器C中，因为从图片3的位置出发，沿顺时针方向遇到的第一个缓存服务器节点就是服务器C，也就是说，如果服务器B出现故障被移除时，图片3的缓存位置会发生改变</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_9.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>&amp;nbsp;</p><p>&amp;nbsp;</p><p>但是，图片4仍然会被缓存到服务器C中，图片1与图片2仍然会被缓存到服务器A中，这与服务器B移除之前并没有任何区别，这就是一致性哈希算法的优点，如果使用之前的hash算法，服务器数量发生改变时，所有服务器的所有缓存在同一时间失效了，而使用一致性哈希算法时，服务器的数量如果发生改变，并不是所有缓存都会失效，而是只有部分缓存会失效，前端的缓存仍然能分担整个系统的压力，而不至于所有压力都在同一时间集中到后端服务器上。</p><p>&amp;nbsp;</p><p>这就是一致性哈希算法所体现出的优点。</p><p>&amp;nbsp; &amp;nbsp;</p><h2 id="hash环的偏斜"><a href="#hash环的偏斜" class="headerlink" title="hash环的偏斜"></a>hash环的偏斜</h2><p>在介绍一致性哈希的概念时，我们理想化的将3台服务器均匀的映射到了hash环上，如下图所示</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>但是，理想很丰满，现实很骨感，我们想象的与实际情况往往不一样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在实际的映射中，服务器可能会被映射成如下模样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>聪明如你一定想到了，如果服务器被映射成上图中的模样，那么被缓存的对象很有可能大部分集中缓存在某一台服务器上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>上图中，1号、2号、3号、4号、6号图片均被缓存在了服务器A上，只有5号图片被缓存在了服务器B上，服务器C上甚至没有缓存任何图片，如果出现上图中的情况，A、B、C三台服务器并没有被合理的平均的充分利用，缓存分布的极度不均匀，而且，如果此时服务器A出现故障，那么失效缓存的数量也将达到最大值，在极端情况下，仍然有可能引起系统的崩溃，上图中的情况则被称之为hash环的偏斜，那么，我们应该怎样防止hash环的偏斜呢？一致性hash算法中使用”虚拟节点”解决了这个问题，我们继续聊。</p><p>&amp;nbsp; &amp;nbsp;</p><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>话接上文，由于我们只有3台服务器，当我们把服务器映射到hash环上的时候，很有可能出现hash环偏斜的情况，当hash环偏斜以后，缓存往往会极度不均衡的分布在各服务器上，聪明如你一定已经想到了，如果想要均衡的将缓存分布到3台服务器上，最好能让这3台服务器尽量多的、均匀的出现在hash环上，但是，真实的服务器资源只有3台，我们怎样凭空的让它们多起来呢，没错，就是凭空的让服务器节点多起来，既然没有多余的真正的物理服务器节点，我们就只能将现有的物理节点通过虚拟的方法复制出来，这些由实际节点虚拟复制而来的节点被称为”虚拟节点”。加入虚拟节点以后的hash环如下。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>“虚拟节点”是”实际节点”（实际的物理服务器）在hash环上的复制品,一个实际节点可以对应多个虚拟节点。</p><p>从上图可以看出，A、B、C三台服务器分别虚拟出了一个虚拟节点，当然，如果你需要，也可以虚拟出更多的虚拟节点。引入虚拟节点的概念后，缓存的分布就均衡多了，上图中，1号、3号图片被缓存在服务器A中，5号、4号图片被缓存在服务器B中，6号、2号图片被缓存在服务器C中，如果你还不放心，可以虚拟出更多的虚拟节点，以便减小hash环偏斜所带来的影响，虚拟节点越多，hash环上的节点就越多，缓存被均匀分布的概率就越大。</p><p>&amp;nbsp; &amp;nbsp;</p><p>好了，一致性哈希算法的原理就总结到这里，如有错误，欢迎赐教，如需转载，请联系作者。</p><p>原文链接：<a href="http://www.zsythink.net/archives/1182">白话解析：一致性哈希算法 consistent hashing</a></p><p>&amp;nbsp;</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【57期】面试官问，MySQL建索引需要遵循哪些原则呢？</title>
    <link href="/2022/12/10/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/"/>
    <url>/2022/12/10/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1.选择唯一性索引"></a>1.选择唯一性索引</h2><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h2 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组和联合操作的字段建立索引"></a>2.为经常需要排序、分组和联合操作的字段建立索引</h2><p>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h2 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h2><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><h2 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h2><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><h2 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5.尽量使用数据量少的索引"></a>5.尽量使用数据量少的索引</h2><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><h2 id="6-尽量使用前缀来索引"><a href="#6-尽量使用前缀来索引" class="headerlink" title="6.尽量使用前缀来索引"></a>6.尽量使用前缀来索引</h2><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h2 id="7-删除不再使用或者很少使用的索引"><a href="#7-删除不再使用或者很少使用的索引" class="headerlink" title="7.删除不再使用或者很少使用的索引"></a>7.删除不再使用或者很少使用的索引</h2><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h2 id="8-最左前缀匹配原则，非常重要的原则。"><a href="#8-最左前缀匹配原则，非常重要的原则。" class="headerlink" title="8.最左前缀匹配原则，非常重要的原则。"></a>8.最左前缀匹配原则，非常重要的原则。</h2><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a 1&#x3D;”” and&#x3D;”” b&#x3D;”2” c&#x3D;”“&gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><h2 id="9-x3D-和in可以乱序。"><a href="#9-x3D-和in可以乱序。" class="headerlink" title="9.&#x3D;和in可以乱序。"></a>9.&#x3D;和in可以乱序。</h2><p>比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h2 id="10-尽量选择区分度高的列作为索引。"><a href="#10-尽量选择区分度高的列作为索引。" class="headerlink" title="10.尽量选择区分度高的列作为索引。"></a>10.尽量选择区分度高的列作为索引。</h2><p>区分度的公式是count(distinct col)&#x2F;count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p><h2 id="11-索引列不能参与计算，保持列“干净”。"><a href="#11-索引列不能参与计算，保持列“干净”。" class="headerlink" title="11.索引列不能参与计算，保持列“干净”。"></a>11.索引列不能参与计算，保持列“干净”。</h2><p>比如from_unixtime(create_time) &#x3D; ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本 太大。所以语句应该写成create_time &#x3D; unix_timestamp(’2014-05-29’);</p><h2 id="12-尽量的扩展索引，不要新建索引。"><a href="#12-尽量的扩展索引，不要新建索引。" class="headerlink" title="12.尽量的扩展索引，不要新建索引。"></a>12.尽量的扩展索引，不要新建索引。</h2><p>比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p>注意：选择索引的最终目的是为了使查询的速度变快。上面给出的原则是最基本的准则，但不能拘泥于上面的准则。读者要在以后的学习和工作中进行不断的实践。根据应用的实际情况进行分析和判断，选择最合适的索引方式。## 目标</p><p>去除 iconfinder 上 icon 的水印</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用水印像素点和原图像素点颜色合并的原理，如果拥有加过水印的图片和水印图片，就可以反向推出原图原像素点的颜色；前提是你得拥有他的水印图片</p><p>来源：<a href="https://blog.csdn.net/u013412790/">https://blog.csdn.net/u013412790/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【58期】盘点那些面试中最常问的MySQL问题，第一弹！</title>
    <link href="/2022/12/10/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/"/>
    <url>/2022/12/10/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">1、MySQL中myisam与innodb的区别</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">MyISAM：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不支持事务，但是每次查询都是原子的；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持表级锁，即每次操作对整个表加锁；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">存储表的总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;"><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">采用</span>非<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">聚集索引，索引文件的数据域存储指向数据文件的指针。</span><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">辅索引与主索引基本一致，但是辅索引不用保证唯一性。</span></span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">InnoDb：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持ACID的事务，支持事务的四种隔离级别；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持行级锁及外键约束：因此可以支持写并发；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不存储总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">两者的适用场景：</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box;"><em style="box-sizing: border-box;"><span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; color: rgb(255, 0, 0);">扩展问题：myisam与innodb引擎下select count(*)哪个更快，为什么？</span></em></strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    知道的童鞋，欢迎留言说出正确答案~</p><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">2、MySQL INT和CHAR隐式类型转换需要注意什么？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    主要需要记住下面两点：</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    1、当查询字段是INT类型，如果查询条件为CHAR，将查询条件转换为INT，如果是字符串前导都是数字，将截取前导数字用来比较，如果没有前导数字，则转换为0。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">2.、当查询字段是CHAR/VARCHAR类型，如果查询条件为INT，将查询字段</span>转<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">换为INT再进行比较，可能会造成全表扫描。</span></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">答案解析</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    有如下一张测试表product，id为int类型，name为varchar类型。</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana ||  3 | 99cat   |+----+----------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况1:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询条件转化为数字1再比较mysql&gt; select * from product where id = &#39;1abc23&#39;;+----+---------+| id | name  |+----+---------+|  1 | apple  |+----+---------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况2:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询字段全部转化成数字，id:1和id:2字段值转化为0，id:3转化成99，再比较mysql&gt; select * from product where name=0;+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana |+----+----------+</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">3、MySQL 如何高效率随机获取N条数据？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    假设表叫做mm_account。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID连续的情况下（注意不能带where，否则结果不好）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `mm_account`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID不连续的情况下：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM `mm_account` WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `mm_account`)))  and city=&quot;city_91&quot; and showSex=1ORDER BY id LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果有一个字段叫id，最快的方法如下（随机获取5条）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM mm_account WHERE id &gt;= ((SELECT MAX(id) FROM mm_account)-(SELECT MIN(id) FROM mm_account)) * RAND() + (SELECT MIN(id) FROM mm_account)limit 5;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果带where语句，上面就不适合了，带where语句请看下面：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `mm_account` where id&lt;1000 )-(SELECT MIN(id) FROM `mm_account` where id&lt;1000 ))+(SELECT MIN(id) FROM `mm_account` where id&lt;1000 )) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 5;</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">4、说说你知道的MySQL的索引类型，并分别简述一下各自的场景。</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">普通索引：</strong>没有任何限制条件的索引，该索引可以在任何数据类型中创建。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">唯一索引：</strong>使用UNIQUE参数可以设置唯一索引。创建该索引时，索引列的值必须唯一，但允许有空值。通过唯一索引，用户可以快速地定位某条记录，主键索引是一种特殊的唯一索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">全文索引：</strong>仅可用于 MyISAM 表，针对较大的数据，生成全文索引耗时耗空间。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">空间索引：</strong>只能建立在空间数据类型上。这样可以提高系统获取空间数据类型的效率。仅可用于 MyISAM 表，索引的字段不能为空值。使用SPATIAL参数可以设置索引为空间索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">单列索引：</strong>只对应一个字段的索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">多列索引：</strong>在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，用户可以通过这几个字段进行查询，想使用该索引，用户必须使用这些字段中的一个字段。</p><p>    <br/></p>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）</title>
    <link href="/2022/12/10/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL%20%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/"/>
    <url>/2022/12/10/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL%20%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。</p><p>事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2 id="一、存储引擎的比较"><a href="#一、存储引擎的比较" class="headerlink" title="一、存储引擎的比较"></a>一、存储引擎的比较</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java1-1584537211.png" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><blockquote><p>注：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p></blockquote><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>可能对于没有了解过索引的猿友这样看这篇文章十分吃力，这类猿友有必要先对Mysql索引有个大体的了解。</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2 id="二、B-树、B-树概念"><a href="#二、B-树、B-树概念" class="headerlink" title="二、B-树、B+树概念"></a>二、B-树、B+树概念</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>即二叉搜索树：</p><ol><li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p></li><li><p>所有结点存储一个关键字；</p></li><li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p></li></ol><p>如：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>是一种多路搜索树（并不是二叉的）：</p><ol><li><p>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p></li><li><p>根结点的儿子数为[2, M]；</p></li><li><p>除根结点以外的非叶子结点的儿子数为[M&#x2F;2, M]；</p></li><li><p>每个结点存放至少M&#x2F;2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p></li><li><p>非叶子结点的关键字个数&#x3D;指向儿子的指针个数-1；</p></li><li><p>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p></li><li><p>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p></li><li><p>所有叶子结点位于同一层；</p></li></ol><p>如：（M&#x3D;3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><strong>B-树的特性：</strong></p><ol><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p></li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M&#x2F;2个儿子，确保了结点的至少利用率。</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M&#x2F;2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M&#x2F;2的结点；删除结点时，需将两个不足M&#x2F;2的兄弟结点合并；</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li><p>其定义基本与B-树同，除了：</p></li><li><p>非叶子结点的子树指针与关键字个数相同；</p></li><li><p>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p></li><li><p>为所有叶子结点增加一个链指针；</p></li><li><p>所有关键字都在叶子结点出现；</p></li></ol><p>如：（M&#x3D;3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java6-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><strong>B+的特性：</strong></p><ol><li><p>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p></li><li><p>不可能在非叶子结点命中；</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p></li><li><p>更适合文件索引系统；</p></li></ol><h2 id="三、建索引的几大原则"><a href="#三、建索引的几大原则" class="headerlink" title="三、建索引的几大原则"></a>三、建索引的几大原则</h2><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.&#x3D;和in可以乱序，比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)&#x2F;count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) &#x3D; ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time &#x3D; unix_timestamp(’2014-05-29’);</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p><em>来源：blog.csdn.net&#x2F;u013142781&#x2F;article&#x2F;details&#x2F;51706790</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot应用部署至k8s</title>
    <link href="/2022/12/10/springboot%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E8%87%B3k8s/"/>
    <url>/2022/12/10/springboot%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E8%87%B3k8s/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：qingmu  </p><p>qingmu.io&#x2F;2020&#x2F;04&#x2F;08&#x2F;Spring-Boot-Operator-User-Guide&#x2F;</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Kubernetes中部署spring boot应用整体上来说是一件比较繁琐的事情，而Spring Boot Operator则能带给你更清爽简单的体验。</p><p>Spring Boot Operator基于Kubernetes的custom resource definitions (CRDs)扩展API进行的开发。</p><h2 id="打包Docker镜像"><a href="#打包Docker镜像" class="headerlink" title="打包Docker镜像"></a>打包Docker镜像</h2><p>在讲部署之前我们需要先将我们的SpringBoot应用打包成标准的DockerImage。</p><p>java项目打包镜像用maven&#x2F;gradle插件比较多，我的另一篇文章构建SpringBoot的Docker镜像，这里在介绍一个新的google开源的插件Jib，该插件使用起来比较方便。</p><blockquote><p>注意：jib打包的镜像会导致java应用的pid&#x3D;1，在使用SpringBootOperator进行发布时候，Operator会设置kubernetes的ShareProcessNamespace参数为true（v1.10+版本都可使用）来解决该问题。</p></blockquote><p>下面就来演示一下我们通过<a href="https://start.spring.io生成一个标准的springboot项目operator-demo,然后使用jib插件进行镜像打包/">https://start.spring.io生成一个标准的SpringBoot项目operator-demo,然后使用jib插件进行镜像打包</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mvn com<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.tools</span>:jib-maven-plugin:build <br>-Djib<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.auth</span>.username=$&#123;&#123; secrets<span class="hljs-selector-class">.MY_USERNAME</span> &#125;&#125; <br>-Djib<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.auth</span>.password=$&#123;&#123; secrets<span class="hljs-selector-class">.MY_PASSWORD</span> &#125;&#125; <br>-Djib<span class="hljs-selector-class">.container</span>.jvmFlags=<span class="hljs-attr">--add-opens</span>,java.base/sun<span class="hljs-selector-class">.nio</span>.ch=ALL-UNNAMED <br>-Djib<span class="hljs-selector-class">.from</span>.image=freemanliu/oprenjre:<span class="hljs-number">11.0</span>.<span class="hljs-number">5</span> <br>-Dimage=registry<span class="hljs-selector-class">.cn-shanghai</span><span class="hljs-selector-class">.aliyuncs</span>.com/qingmuio/operator-demo/operator-demo:v1.<span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p>执行上面的命令之后我们将得到一个标准的docker镜像，该镜像会被推送到远程仓库。</p><h2 id="Operator快速体验"><a href="#Operator快速体验" class="headerlink" title="Operator快速体验"></a>Operator快速体验</h2><p>完成了镜像的构建之后,我们紧接着来安装我们的Operator到kubernetes集群，当然了首先你需要一套集群，可以参考我之前一篇文章部署高可用kubernetes，虽然版本比较老,但是新版本其实也差不多的一个思路。</p><blockquote><p><a href="https://qingmu.io/2019/05/17/Deploy-a-highly-available-cluster-with-kubeadm/">https://qingmu.io/2019/05/17/Deploy-a-highly-available-cluster-with-kubeadm/</a></p></blockquote><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><p>此处快速安装只是为了快速体验demo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/goudai/</span>spring-boot-operator<span class="hljs-regexp">/master/m</span>anifests/deployment.yaml<br></code></pre></td></tr></table></figure><p>apply成功之后控制台输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">namespace/spring-boot-operator-system created<br>customresourcedefinition<span class="hljs-selector-class">.apiextensions</span><span class="hljs-selector-class">.k8s</span>.io/springbootapplications<span class="hljs-selector-class">.springboot</span><span class="hljs-selector-class">.qingmu</span><span class="hljs-selector-class">.io</span> created<br>role<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-leader-election-role created<br>clusterrole<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-manager-role created<br>clusterrole<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-proxy-role created<br>clusterrole<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-metrics-reader created<br>rolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-leader-election-rolebinding created<br>clusterrolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-manager-rolebinding created<br>clusterrolebinding<span class="hljs-selector-class">.rbac</span><span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span>.io/spring-boot-operator-proxy-rolebinding created<br>service/spring-boot-operator-controller-manager-metrics-service created<br>deployment.apps/spring-boot-operator-controller-manager created<br></code></pre></td></tr></table></figure><p>稍等片刻查看是否已经安装成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl  <span class="hljs-keyword">get</span> po -n spring-boot-<span class="hljs-keyword">operator</span>-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>成功如下输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NAME</span>                                                       READY   STATUS    RESTARTS   AGEspring-boot-operator-controller-manager-<span class="hljs-number">7</span>f498596bb-wcwtn   <span class="hljs-number">2</span>/<span class="hljs-number">2</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m15s<br></code></pre></td></tr></table></figure><h3 id="部署OperatorDemo应用"><a href="#部署OperatorDemo应用" class="headerlink" title="部署OperatorDemo应用"></a>部署OperatorDemo应用</h3><p>完成了Operator的部署之后，我们来部署我们第一个应用，这里我们就发布上面我们编写的springboot应用opreator-demo。</p><p>首先我们需要先编写一个Spring Boot Application 的CRD部署yaml，如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Demo.yaml</span><br><span class="hljs-symbol">apiVersion:</span> springboot.qingmu.io/v1alpha1<br><span class="hljs-symbol">kind:</span> SpringBootApplication<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> operator-demo <br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  springBoot:</span><br><span class="hljs-symbol">    version:</span> v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-meta">#    image: registry.cn-shanghai.aliyuncs.com/qingmuio/operator-demo/operator-demo:v1.0.0</span><br></code></pre></td></tr></table></figure><p>细心的同学可能发现了，为啥连Image都没有？这怎么发布，就name，version，就能完成发布？是的没错！就能完成发布，后面我讲详细讲到他是如何完成的。</p><p>接着我们apply一下</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f Demo.yaml<br></code></pre></td></tr></table></figure><p>看到console输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">springbootapplication<span class="hljs-selector-class">.springboot</span><span class="hljs-selector-class">.qingmu</span>.io/operator-demo created<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>表示创建成功了，接着我们来看下我们部署的第一个应用，这里我们直接用上面的yaml中的name过滤即可。</p><p>查看pod</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">~# kubectl  <span class="hljs-keyword">get</span> po | grep <span class="hljs-keyword">operator</span>-demo<br><span class="hljs-keyword">operator</span>-demo<span class="hljs-number">-7574</span>f4789c-mg58m             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">76</span>s<br><span class="hljs-keyword">operator</span>-demo<span class="hljs-number">-7574</span>f4789c-ssr8v             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">76</span>s<br><span class="hljs-keyword">operator</span>-demo<span class="hljs-number">-7574</span>f4789c-sznww             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">76</span>s<br></code></pre></td></tr></table></figure><p>查看下我们的pid不等于1的设置是否生效,根据下面的结果可以看到通过设置ShareProcessNamespace该参数我们可以在Kubernetes层面来解决这个pid&#x3D;1的问题。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> exec -it operator-demo-<span class="hljs-number">7574</span>f4789c-mg58m bash<br><span class="hljs-attribute">bash</span>-<span class="hljs-number">5</span>.<span class="hljs-number">0</span># ps -ef<br><span class="hljs-attribute">UID</span>        PID  PPID  C STIME TTY          TIME CMD<br><span class="hljs-attribute">root</span>         <span class="hljs-number">1</span>     <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">02</span>:<span class="hljs-number">06</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /pause<br><span class="hljs-attribute">root</span>         <span class="hljs-number">6</span>     <span class="hljs-number">0</span> <span class="hljs-number">26</span> <span class="hljs-number">02</span>:<span class="hljs-number">06</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">09</span> java --add-opens java.base/sun.nio.ch=<span class="hljs-literal">ALL</span>-UNNAMED -cp /app/resources:/app/classes:/app/libs/* io.qingmu.operator.operatordemo.Oper...<br><span class="hljs-attribute">root</span>        <span class="hljs-number">38</span>     <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">02</span>:<span class="hljs-number">07</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> bash<br><span class="hljs-attribute">root</span>        <span class="hljs-number">44</span>    <span class="hljs-number">38</span>  <span class="hljs-number">0</span> <span class="hljs-number">02</span>:<span class="hljs-number">07</span> pts/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> ps -ef<br></code></pre></td></tr></table></figure><p>查看svc</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">~# kubectl  <span class="hljs-keyword">get</span> svc | grep <span class="hljs-keyword">operator</span>-demo<br><span class="hljs-keyword">operator</span>-demo             ClusterIP   <span class="hljs-number">10.101</span><span class="hljs-number">.128</span><span class="hljs-number">.6</span>     &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">8080</span>/TCP            <span class="hljs-number">2</span>m52s<br></code></pre></td></tr></table></figure><p>我们来访问一下试试。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@server1:~# curl -i http://<span class="hljs-number">10.101.128.6:8080</span><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content</span>-Type: text/plain;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">9</span><br><span class="hljs-attribute">Date</span>: Wed, <span class="hljs-number">08</span> Apr <span class="hljs-number">2020</span> <span class="hljs-number">08</span>:<span class="hljs-number">45</span>:<span class="hljs-number">46</span> GMT<br><br><span class="hljs-attribute">hello</span> !!!<br></code></pre></td></tr></table></figure><p>我们来试着缩减他的副本数到1个</p><p>编辑我们的Demo.yaml，加入一个新的属性replicas</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Demo.yaml</span><br><span class="hljs-symbol">apiVersion:</span> springboot.qingmu.io/v1alpha1<br><span class="hljs-symbol">kind:</span> SpringBootApplication<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> operator-demo <br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  springBoot:</span><br><span class="hljs-symbol">    version:</span> v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">    replicas:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>应用一下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@server1</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># kubectl apply -f Demo.yaml </span><br>springbootapplication.springboot.qingmu.io/operator-demo configured<br></code></pre></td></tr></table></figure><p>再次查看pod，你会发现我们的pod已经缩放为一个副本了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart">~# kubectl  <span class="hljs-keyword">get</span> po | grep <span class="hljs-keyword">operator</span>-demo<br><span class="hljs-keyword">operator</span>-demo<span class="hljs-number">-7574</span>f4789c-sznww             <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8</span>m29s<br></code></pre></td></tr></table></figure><h3 id="清理operator-demo"><a href="#清理operator-demo" class="headerlink" title="清理operator-demo"></a>清理operator-demo</h3><p>要删除该pod 我们只需要执行delete即可</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">~<span class="hljs-comment"># kubectl delete -f Demo.yaml </span><br>springbootapplication.springboot.qingmu.io <span class="hljs-string">&quot;operator-demo&quot;</span> deleted<br></code></pre></td></tr></table></figure><p>再次查看pod，已经没了</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl  <span class="hljs-built_in">get</span> <span class="hljs-keyword">po</span> | <span class="hljs-keyword">grep</span> operator-demo<br></code></pre></td></tr></table></figure><h2 id="部署自己的应用"><a href="#部署自己的应用" class="headerlink" title="部署自己的应用"></a>部署自己的应用</h2><p>部署自己私有仓库的应用需要需要先创建secret(如果已经创建跳过即可)</p><p>创建docker-registry的secret</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create  <span class="hljs-built_in"></span><br><span class="hljs-built_in">secret </span>docker-registry aliyun-registry-secret <br><span class="hljs-attribute">--docker-server</span>=registry-vpc.cn-hangzhou.aliyuncs.com <br><span class="hljs-attribute">--docker-username</span>=*** <br><span class="hljs-attribute">--docker-password</span>=*** <br><span class="hljs-attribute">--docker-email</span>=***<br></code></pre></td></tr></table></figure><p>自己应用的crd Yaml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">springboot.qingmu.io/v1alpha1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">SpringBootApplication</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">你的应用的名称</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">springBoot</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1.0.0</span><br>    <span class="hljs-attribute">replicas</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1 </span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">你的image地址</span><br>    <span class="hljs-attribute">imagePullSecrets</span><span class="hljs-punctuation">: </span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">上面创建的secret</span><br></code></pre></td></tr></table></figure><h2 id="一个完整的Spring-Boot-Application-Yaml"><a href="#一个完整的Spring-Boot-Application-Yaml" class="headerlink" title="一个完整的Spring Boot Application Yaml"></a>一个完整的Spring Boot Application Yaml</h2><p>下面是一个完整的yaml属性结构，大部分属性我们都可以用默认配置的即可。推荐：<a href="http://mp.weixin.qq.com/s?__biz=MzIyNDU2ODA4OQ==&mid=2247484532&idx=1&sn=1c243934507d79db4f76de8ed0e5727f&chksm=e80db202df7a3b14fe7077b0fe5ec4de4088ce96a2cde16cbac21214956bd6f2e8f51193ee2b&scene=21#wechat_redirect">一百期Java面试题汇总</a></p><p>不设置属性，默认使用Operator中设置的通用值详见后面的自定义安装Operator。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> springboot.qingmu.io/v1alpha1<br><span class="hljs-symbol">kind:</span> SpringBootApplication<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> operator-demo<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  springBoot:</span><br>    <span class="hljs-meta"># image 可以不设置，如果不设置默认使用 IMAGE_REPOSITORY+/+mate.name+:+spec.springBoot.version</span><br>    <span class="hljs-meta"># registry.cn-shanghai.aliyuncs.com/qingmuio + / + operator-demo + : + v1.0.0</span><br><span class="hljs-symbol">    image:</span> registry.cn-shanghai.aliyuncs.com<span class="hljs-keyword">/qingmuio/</span>operator-demo:v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">    clusterIp:</span> <span class="hljs-string">&quot;&quot;</span> <br><span class="hljs-symbol">    version:</span> v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span> <br><span class="hljs-symbol">    replicas:</span> <span class="hljs-number">1</span> <br><span class="hljs-symbol">    resource:</span><br><span class="hljs-symbol">      cpu:</span><br><span class="hljs-symbol">        request:</span> <span class="hljs-number">50</span>m<br><span class="hljs-symbol">        limit:</span> <span class="hljs-string">&quot;&quot;</span> <br><span class="hljs-symbol">      memory:</span><br><span class="hljs-symbol">        request:</span> <span class="hljs-number">1</span>Gi<br><span class="hljs-symbol">        limit:</span> <span class="hljs-number">1</span>Gi <br><span class="hljs-symbol">    path:</span><br><span class="hljs-symbol">      liveness:</span> <span class="hljs-keyword">/actuator/</span>health <br><span class="hljs-symbol">      readiness:</span> <span class="hljs-keyword">/actuator/</span>health <br><span class="hljs-symbol">      hostLog:</span> <span class="hljs-keyword">/var/</span>applog <br><span class="hljs-symbol">      shutdown:</span> <span class="hljs-keyword">/spring/</span>shutdown <br><span class="hljs-symbol">    imagePullSecrets:</span> <br>      - aliyun-docker-registry-secret<br><span class="hljs-symbol">    env:</span> <br>      - name: EUREKA_SERVERS<br><span class="hljs-symbol">        value:</span> http:<span class="hljs-comment">//eureka1:8761/eureka/,http://eureka2:8761/eureka/,http://eureka3:8761/eureka/</span><br><span class="hljs-symbol">    nodeAffinity:</span> <br><span class="hljs-symbol">      key:</span> <span class="hljs-string">&quot;failure-domain.beta.kubernetes.io/zone&quot;</span><br><span class="hljs-symbol">      operator:</span> <span class="hljs-string">&quot;In&quot;</span><br><span class="hljs-symbol">      values:</span><br>        - <span class="hljs-string">&quot;cn-i&quot;</span><br>        - <span class="hljs-string">&quot;cn-h&quot;</span><br>        - <span class="hljs-string">&quot;cn-g&quot;</span><br></code></pre></td></tr></table></figure><h3 id="优雅停机的路径"><a href="#优雅停机的路径" class="headerlink" title="优雅停机的路径"></a>优雅停机的路径</h3><p>由于优雅停机默认是关闭的并且并不支持Get请求所以我们需要开启和搭个桥</p><p>首先在application.yml中启用</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">management:</span><br><span class="hljs-symbol">  endpoints:</span><br><span class="hljs-symbol">    web:</span><br><span class="hljs-symbol">      exposure:</span><br><span class="hljs-symbol">        include:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-symbol">  endpoint:</span><br><span class="hljs-symbol">    shutdown:</span><br><span class="hljs-symbol">      enabled:</span> true<br></code></pre></td></tr></table></figure><p>然后桥接一个Get方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShutdownController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ShutdownEndpoint</span> shutdownEndpoint;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/spring/shutdown&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">shutdown</span>(<span class="hljs-params">HttpServletRequest request</span>) &#123;<br>        <span class="hljs-keyword">return</span> shutdownEndpoint.<span class="hljs-title function_">shutdown</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="node亲和的使用"><a href="#node亲和的使用" class="headerlink" title="node亲和的使用"></a>node亲和的使用</h3><p>举一个列子 我们有一个springboot应用 user-service 希望他能分布到3个可用区的6个节点上:</p><p>首先我们把机器划分多个可用区</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cn-i区(<span class="hljs-keyword">node</span><span class="hljs-title">-i1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-i02</span>)<br>cn-h区(<span class="hljs-keyword">node</span><span class="hljs-title">-g1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-g02</span>)<br>cn-g区(<span class="hljs-keyword">node</span><span class="hljs-title">-h1</span>,<span class="hljs-keyword">node</span><span class="hljs-title">-h02</span>)<br></code></pre></td></tr></table></figure><p>现在我们有三个可以区 每个区有2台workload，一共6台。然后我们需要给这些机器分别打上label。</p><p>将全部的i区机器标注为cn-i</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">label</span> node node-<span class="hljs-built_in">i1</span> failure-<span class="hljs-built_in">domain</span>.<span class="hljs-built_in">beta</span>.kubernetes.io/zone=cn-i<br>kubectl <span class="hljs-built_in">label</span> node node-i2 failure-<span class="hljs-built_in">domain</span>.<span class="hljs-built_in">beta</span>.kubernetes.io/zone=cn-i<br></code></pre></td></tr></table></figure><p>同理将h区的标注为h，g区同理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl <span class="hljs-selector-tag">label</span> node node-<span class="hljs-selector-tag">h1</span> failure-domain<span class="hljs-selector-class">.beta</span><span class="hljs-selector-class">.kubernetes</span>.io/zone=cn-<span class="hljs-selector-tag">i</span><br>kubectl <span class="hljs-selector-tag">label</span> node node-ih2 failure-domain<span class="hljs-selector-class">.beta</span><span class="hljs-selector-class">.kubernetes</span>.io/zone=cn-i<br></code></pre></td></tr></table></figure><p>现在准备工作我们就绪了，现在我们来设置让它达到我们的调度效果，像如下编写即可。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  springBoot:</span><br><span class="hljs-symbol">    nodeAffinity:</span> <span class="hljs-meta">#可以不设置 节点亲和 这里演示的是尽量将pod分散到 i h g 三个可用区，默认设置了pod反亲和</span><br><span class="hljs-symbol">      key:</span> <span class="hljs-string">&quot;failure-domain.beta.kubernetes.io/zone&quot;</span><br><span class="hljs-symbol">      operator:</span> <span class="hljs-string">&quot;In&quot;</span><br><span class="hljs-symbol">      values:</span><br>        - <span class="hljs-string">&quot;cn-i&quot;</span><br>        - <span class="hljs-string">&quot;cn-h&quot;</span><br>        - <span class="hljs-string">&quot;cn-g&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Operator-自定义安装"><a href="#Operator-自定义安装" class="headerlink" title="Operator 自定义安装"></a>Operator 自定义安装</h2><p>上面我们快速的安装了好了，接着我们来讲解下如何自定义安装，以及有哪些自定义的参数，可以个性化的参数我们用环境变量的方式注入。</p><p>下面来修改Deployment完成自己个性化的配置部署，从我提供的部署yaml中拉倒最后，找到name是spring-boot-operator-controller-manager的Deployment，我们将修改它。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">control-plane</span><span class="hljs-punctuation">:</span> <span class="hljs-string">controller-manager</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">spring-boot-operator-controller-manager</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">spring-boot-operator-system</span><br>.....<br><br>        <span class="hljs-comment">#注意：一下配置针对通用全局的spring boot默认配置，对crd的spring boot生效，这里不配置也可以在部署的yaml中指定</span><br><br>        <span class="hljs-comment"># 私有仓库的地址，比如我的最终打包的镜像地址是 registry.cn-shanghai.aliyuncs.com/qingmuio/operator-demo/operator-demo:v1.0.0</span><br>        <span class="hljs-comment"># 那么配置的值是 registry.cn-shanghai.aliyuncs.com/qingmuio/operator-demo</span><br>        <span class="hljs-comment"># 配置这个值之后，我们我们如果在发布的yaml中不写image，那么使用的image就是 IMAGE_REPOSITORY+&quot;/&quot;+mate.name+spec.springBoot.version</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: IMAGE_REPOSITORY</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">registry.cn-shanghai.aliyuncs.com/qingmuio</span><br>        <span class="hljs-comment"># 请求CPU限制</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: REQUEST_CPU</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">50m</span><br>        <span class="hljs-comment"># 限制最大能用最大CPU java应用可以不用限制，限制不合理会导致启动异常缓慢</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: LIMIT_CPU</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 请求内存大小</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: REQUEST_MEMORY</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-comment"># 限制最大内存大小 一般和request一样大即可</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: LIMIT_MEMORY</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-comment"># 就绪检查Path，spring boot actuator 默认Path</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: READINESS_PATH</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/actuator/health</span><br>        <span class="hljs-comment"># 就绪存活Path，spring boot actuator 默认Path</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: LIVENESS_PATH</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/actuator/health</span><br>        <span class="hljs-comment"># 就绪存活Path，优雅停机Path</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: SHUTDOWN_PATH</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/spring/shutdown</span><br>        <span class="hljs-comment"># 复制级 即副本数</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: REPLICAS</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><br>        <span class="hljs-comment"># 将日志外挂到主机磁盘Path，默认两者相同</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: HOST_LOG_PATH</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/var/applog</span><br>        <span class="hljs-comment"># 用于pull 镜像的secrets</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: IMAGE_PULL_SECRETS</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 用于pull 镜像的secrets</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: SPRING_BOOT_DEFAULT_PORT</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8080&quot;</span><br>        <span class="hljs-comment"># node亲和，比如我可以设置pod尽量分散在不同可用区cn-i,cn-g,cn-h区</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: NODE_AFFINITY_KEY</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: NODE_AFFINITY_OPERATOR</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: NODE_AFFINITY_VALUES</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 全局的环境变量，会追加到每个spring boot的每个pod中，格式 k=v;k1=v2,</span><br>        <span class="hljs-comment"># 如 EUREKA_SERVERS=http://eureka1:8761/eureka/,http://eureka2:8761/eureka/,http://eureka3:8761/eureka/;k=v</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: SPRING_BOOT_ENV</span><br>          <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">registry.cn-shanghai.aliyuncs.com/qingmuio/spring-boot-operator-controller:latest</span><br></code></pre></td></tr></table></figure><h3 id="自定义安装之后部署"><a href="#自定义安装之后部署" class="headerlink" title="自定义安装之后部署"></a>自定义安装之后部署</h3><p>yaml可以简化为如下。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> springboot.qingmu.io/v1alpha1<br><span class="hljs-symbol">kind:</span> SpringBootApplication<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> 你的应用的名称<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  springBoot:</span><br><span class="hljs-symbol">    version:</span> v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>环境变量表格</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/06/java5-1592962224.png" alt="部署SpringBoot应用到K8S教程" title="部署SpringBoot应用到K8S教程"></p><h2 id="Github仓库"><a href="#Github仓库" class="headerlink" title="Github仓库"></a>Github仓库</h2><blockquote><p>SpringBootOperator: <a href="https://github.com/goudai/spring-boot-operator">https://github.com/goudai/spring-boot-operator</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>部署</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springmvc实现参数处理，rsa解密数据</title>
    <link href="/2022/12/10/springmvc%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%EF%BC%8Crsa%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/12/10/springmvc%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%EF%BC%8Crsa%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>用于实现类似@RequestBody的作用，前后端在没有https的情况下，利用rsa非对称加密，实现数据安全性</p><ol><li><p>首先创建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RSA加密数据解密</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年06月19日 10:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequestEncrypt &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>利用spring参数处理器，实现接口，拦截该注解的参数，处理并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理加密数据,参数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年06月19日 10:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HandlerMethodArgumentCustomer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HandlerMethodArgumentCustomer.class);<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ISysSignSV sysSignSV;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-keyword">if</span> (parameter.hasParameterAnnotation(RequestEncrypt.class)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> nativeRequest.getContentType();<br><span class="hljs-keyword">if</span> (!contentType.equals(MediaType.APPLICATION_JSON_VALUE)<br>&amp;&amp; !contentType.equals(MediaType.APPLICATION_JSON_UTF8_VALUE)<br>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaTypeNotSupportedStatusException</span>(<span class="hljs-string">&quot;期望请求为application/json&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 加密数据</span><br><span class="hljs-type">byte</span>[] body = ServletUtils.getRequestBody();<br><span class="hljs-type">String</span> <span class="hljs-variable">jsonData</span> <span class="hljs-operator">=</span> IOUtils.toString(body);<br><span class="hljs-keyword">if</span> (body.length == <span class="hljs-number">0</span> || StringUtils.isBlank(jsonData) || jsonData.length() == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// 获取当前登录用户的公私钥。如果没空，在header里取</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">appKeyObj</span> <span class="hljs-operator">=</span> ShiroUtil.getSession().getAttribute(Global.APP_KEY);<br><span class="hljs-type">Object</span> <span class="hljs-variable">appSercetObj</span> <span class="hljs-operator">=</span> ShiroUtil.getSession().getAttribute(Global.APP_SERCET);<br><span class="hljs-type">String</span> <span class="hljs-variable">appKey</span> <span class="hljs-operator">=</span> appKeyObj == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : String.valueOf(appKeyObj);<br><span class="hljs-type">String</span> <span class="hljs-variable">appSercet</span> <span class="hljs-operator">=</span> appSercetObj == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : String.valueOf(appSercetObj);<br><span class="hljs-keyword">if</span> (StringUtils.isBlank(appKey) || StringUtils.isBlank(appSercet)) &#123;<br>appKey = ServletUtils.getHeader(<span class="hljs-string">&quot;appKey&quot;</span>);<br><span class="hljs-keyword">if</span> (StringUtils.isBlank(appKey)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 获取私钥</span><br><span class="hljs-type">SysSign</span> <span class="hljs-variable">sysSign</span> <span class="hljs-operator">=</span> sysSignSV.findByModel(SysSignModel.builder().appKey(appKey).includeColumns(<span class="hljs-string">&quot;app_secret&quot;</span>).build());<br>appSercet = sysSign.getAppSecret();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">RSA</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RSA</span>(appSercet, appKey);<br><span class="hljs-type">byte</span>[] decrypt = rs.decrypt(jsonData, KeyType.PrivateKey);<br>jsonData = IOUtils.toString(decrypt);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>LOG.error(<span class="hljs-string">&quot;Rsa加密数据解密异常&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> JSONObject.parseObject(jsonData, parameter.getParameterType());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将参数处理器，加入到spring的拦截器调用链</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向MVC中添加自定义组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HandlerMethodArgumentCustomer handlerMethodArgumentCustomer;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addArgumentResolvers</span><span class="hljs-params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;<br>        resolvers.add(handlerMethodArgumentCustomer);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ok</p>]]></content>
    
    
    
    <tags>
      
      <tag>轮子</tag>
      
      <tag>JAVA</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized与Lock的区别与使用？</title>
    <link href="/2022/12/10/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/10/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>昨天在学习别人分享的面试经验时，看到Lock的使用。想起自己在上次面试也遇到了synchronized与Lock的区别与使用。</p><p>于是，我整理了两者的区别和使用情况，同时，对synchronized的使用过程一些常见问题的总结，最后是参照源码和说明文档，对Lock的使用写了几个简单的Demo。请大家批评指正。</p><h2 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h2><h3 id="1、线程与进程："><a href="#1、线程与进程：" class="headerlink" title="1、线程与进程："></a>1、线程与进程：</h3><p>在开始之前先把进程与线程进行区分一下，一个程序最少需要一个进程，而一个进程最少需要一个线程。关系是线程–&gt;进程–&gt;程序的大致组成结构。所以线程是程序执行流的最小单位，而进程是系统进行资源分配和调度的一个独立单位。以下我们所有讨论的都是建立在线程基础之上。</p><h3 id="2、Thread的几个重要方法："><a href="#2、Thread的几个重要方法：" class="headerlink" title="2、Thread的几个重要方法："></a>2、Thread的几个重要方法：</h3><p>我们先了解一下Thread的几个重要方法。</p><ul><li><p>start()方法，调用该方法开始执行该线程；</p></li><li><p>stop()方法，调用该方法强制结束该线程执行；</p></li><li><p>join方法，调用该方法等待该线程结束。</p></li><li><p>sleep()方法，调用该方法该线程进入等待。</p></li><li><p>run()方法，调用该方法直接执行线程的run()方法，但是线程调用start()方法时也会运行run()方法，区别就是一个是由线程调度运行run()方法，一个是直接调用了线程中的run()方法！！</p></li></ul><p>看到这里，可能有些人就会问啦，那wait()和notify()呢？要注意，其实wait()与notify()方法是Object的方法，不是Thread的方法！！同时，wait()与notify()会配合使用，分别表示线程挂起和线程恢复。</p><p>这里还有一个很常见的问题，顺带提一下：wait()与sleep()的区别，简单来说wait()会释放对象锁而sleep()不会释放对象锁。这些问题有很多的资料，不再赘述。</p><h3 id="3、线程状态："><a href="#3、线程状态：" class="headerlink" title="3、线程状态："></a>3、线程状态：</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java8-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>线程总共有5大状态，通过上面第二个知识点的介绍，理解起来就简单了。  </p><ul><li><p>新建状态：新建线程对象，并没有调用start()方法之前</p></li><li><p>就绪状态：调用start()方法之后线程就进入就绪状态，但是并不是说只要调用start()方法线程就马上变为当前线程，在变为当前线程之前都是为就绪状态。值得一提的是，线程在睡眠和挂起中恢复的时候也会进入就绪状态哦。</p></li><li><p>运行状态：线程被设置为当前线程，开始执行run()方法。就是线程进入运行状态</p></li><li><p>阻塞状态：线程被暂停，比如说调用sleep()方法后线程就进入阻塞状态</p></li><li><p>死亡状态：线程执行结束</p></li></ul><h3 id="4、锁类型"><a href="#4、锁类型" class="headerlink" title="4、锁类型"></a>4、锁类型</h3><ul><li><p>可重入锁：在执行对象中所有同步方法不用再次获得锁</p></li><li><p>可中断锁：在等待获取锁过程中可中断</p></li><li><p>公平锁：按等待获取锁的线程的等待时间进行获取，等待时间长的具有优先获取锁权利</p></li><li><p>读写锁：对资源读取和写入的时候拆分为2部分处理，读的时候可以多线程一起读，写的时候必须同步地写</p></li></ul><h2 id="synchronized与Lock的区别"><a href="#synchronized与Lock的区别" class="headerlink" title="synchronized与Lock的区别"></a>synchronized与Lock的区别</h2><p>1、我把两者的区别分类到了一个表中，方便大家对比：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>或许，看到这里还对LOCK所知甚少，那么接下来，我们进入LOCK的深入学习。</p><h2 id="Lock详细介绍与Demo"><a href="#Lock详细介绍与Demo" class="headerlink" title="Lock详细介绍与Demo"></a>Lock详细介绍与Demo</h2><p>以下是Lock接口的源码，笔者修剪之后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Lock</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Acquires the lock.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Acquires the lock unless the current thread is</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Acquires the lock only if it is free at the time of invocation.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Acquires the lock if it is free within the given waiting time and the</span><br><span class="hljs-comment">     * current thread has not been &#123;<span class="hljs-doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Releases the lock.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从Lock接口中我们可以看到主要有个方法，这些方法的功能从注释中可以看出：</p><ul><li><p>lock()：获取锁，如果锁被暂用则一直等待</p></li><li><p>unlock()：释放锁</p></li><li><p>tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true</p></li><li><p>tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，保证等待参数时间</p></li><li><p>lockInterruptibly()：用该锁的获得方式，如果线程在获取锁的阶段进入了等待，那么可以中断此线程，先去做别的事</p></li></ul><p>通过 以上的解释，大致可以解释在上个部分中“锁类型(lockInterruptibly())”，“锁状态(tryLock())”等问题，还有就是前面子所获取的过程我所写的“大致就是可以尝试获得锁，线程可以不会一直等待”用了“可以”的原因。</p><p>下面是Lock一般使用的例子，注意ReentrantLock是Lock接口的实现。</p><h4 id="lock-："><a href="#lock-：" class="headerlink" title="lock()："></a>lock()：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.brickworkers;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">//需要参与同步的方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(Thread thread)</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程名&quot;</span>+thread.getName() + <span class="hljs-string">&quot;获得了锁&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;线程名&quot;</span>+thread.getName() + <span class="hljs-string">&quot;释放了锁&quot;</span>);<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LockTest</span> <span class="hljs-variable">lockTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockTest</span>();<br><br>        <span class="hljs-comment">//线程1</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                lockTest.method(Thread.currentThread());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                lockTest.method(Thread.currentThread());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//执行情况：线程名t1获得了锁</span><br><span class="hljs-comment">//         线程名t1释放了锁</span><br><span class="hljs-comment">//         线程名t2获得了锁</span><br><span class="hljs-comment">//         线程名t2释放了锁</span><br></code></pre></td></tr></table></figure><h4 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock():"></a>tryLock():</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.brickworkers;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">//需要参与同步的方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(Thread thread)</span>&#123;<br><span class="hljs-comment">/*        lock.lock();</span><br><span class="hljs-comment">        try &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;线程名&quot;+thread.getName() + &quot;获得了锁&quot;);</span><br><span class="hljs-comment">        &#125;catch(Exception e)&#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125; finally &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;线程名&quot;+thread.getName() + &quot;释放了锁&quot;);</span><br><span class="hljs-comment">            lock.unlock();</span><br><span class="hljs-comment">        &#125;*/</span><br><br><br>        <span class="hljs-keyword">if</span>(lock.tryLock())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;线程名&quot;</span>+thread.getName() + <span class="hljs-string">&quot;获得了锁&quot;</span>);<br>            &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;线程名&quot;</span>+thread.getName() + <span class="hljs-string">&quot;释放了锁&quot;</span>);<br>                lock.unlock();<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;我是&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;有人占着锁，我就不要啦&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LockTest</span> <span class="hljs-variable">lockTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockTest</span>();<br><br>        <span class="hljs-comment">//线程1</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                lockTest.method(Thread.currentThread());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                lockTest.method(Thread.currentThread());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//执行结果： 线程名t2获得了锁</span><br><span class="hljs-comment">//         我是t1有人占着锁，我就不要啦</span><br><span class="hljs-comment">//         线程名t2释放了锁</span><br></code></pre></td></tr></table></figure><p>看到这里相信大家也都会使用如何使用Lock了吧，关于tryLock(long time, TimeUnit unit)和lockInterruptibly()不再赘述。前者主要存在一个等待时间，在测试代码中写入一个等待时间，后者主要是等待中断，会抛出一个中断异常，常用度不高，喜欢探究可以自己深入研究。</p><p>前面比较重提到“公平锁”，在这里可以提一下ReentrantLock对于平衡锁的定义，在源码中有这么两段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Sync object for non-fair locks</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * Performs lock.  Try immediate barge, backing up to normal</span><br><span class="hljs-comment">        * acquire on failure.</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>               setExclusiveOwnerThread(Thread.currentThread());<br>           <span class="hljs-keyword">else</span><br>               acquire(<span class="hljs-number">1</span>);<br>       &#125;<br><br>       <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>           <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Sync object for fair locks</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>       <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>           acquire(<span class="hljs-number">1</span>);<br>       &#125;<br><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * Fair version of tryAcquire.  Don&#x27;t grant access unless</span><br><span class="hljs-comment">        * recursive call or no waiters or is first.</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>           <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>           <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                   compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                   setExclusiveOwnerThread(current);<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>               <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>               setState(nextc);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>从以上源码可以看出在Lock中可以自己控制锁是否公平，而且，默认的是非公平锁，以下是ReentrantLock的构造函数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>     sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<span class="hljs-comment">//默认非公平锁</span><br> &#125;<br></code></pre></td></tr></table></figure><h2 id="尾记录："><a href="#尾记录：" class="headerlink" title="尾记录："></a>尾记录：</h2><p>笔者水平一般，不过此博客在引言中的目的已全部达到。这只是笔者在学习过程中的总结与概括，如存在不正确的，欢迎大家批评指出。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="1、两种锁的底层实现方式："><a href="#1、两种锁的底层实现方式：" class="headerlink" title="1、两种锁的底层实现方式："></a>1、两种锁的底层实现方式：</h3><p>synchronized：我们知道java是用字节码指令来控制程序（这里不包括热点代码编译成机器码）。在字节指令中，存在有synchronized所包含的代码块，那么会形成2段流程的执行。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>我们点击查看SyncDemo.java的源码SyncDemo.class，可以看到如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>如上就是这段代码段字节码指令，没你想的那么难吧。言归正传，我们可以清晰段看到，其实synchronized映射成字节码指令就是增加来两个指令：monitorenter和monitorexit。当一条线程进行执行的遇到monitorenter指令的时候，它会去尝试获得锁，如果获得锁那么锁计数+1（为什么会加一呢，因为它是一个可重入锁，所以需要用这个锁计数判断锁的情况），如果没有获得锁，那么阻塞。当它遇到monitorexit的时候，锁计数器-1，当计数器为0，那么就释放锁。</p><p>那么有的朋友看到这里就疑惑了，那图上有2个monitorexit呀？马上回答这个问题：上面我以前写的文章也有表述过，synchronized锁释放有两种机制，一种就是执行完释放；另外一种就是发送异常，虚拟机释放。图中第二个monitorexit就是发生异常时执行的流程，这就是我开头说的“会有2个流程存在“。而且，从图中我们也可以看到在第13行，有一个goto指令，也就是说如果正常运行结束会跳转到19行执行。</p><p>这下，你对synchronized是不是了解的很清晰了呢。接下来我们再聊一聊Lock。</p><p>Lock：Lock实现和synchronized不一样，后者是一种悲观锁，它胆子很小，它很怕有人和它抢吃的，所以它每次吃东西前都把自己关起来。而Lock呢底层其实是CAS乐观锁的体现，它无所谓，别人抢了它吃的，它重新去拿吃的就好啦，所以它很乐观。具体底层怎么实现，博主不在细述，有机会的话，我会对concurrent包下面的机制好好和大家说说，如果面试问起，你就说底层主要靠volatile和CAS操作实现的。</p><p>现在，才是我真正想在这篇博文后面加的，我要说的是：尽可能去使用synchronized而不要去使用LOCK</p><p>什么概念呢？我和大家打个比方：你叫jdk，你生了一个孩子叫synchronized，后来呢，你领养了一个孩子叫LOCK。起初，LOCK刚来到新家的时候，它很乖，很懂事，各个方面都表现的比synchronized好。你很开心，但是你内心深处又有一点淡淡的忧伤，你不希望你自己亲生的孩子竟然还不如一个领养的孩子乖巧。这个时候，你对亲生的孩子教育更加深刻了，你想证明，你的亲生孩子synchronized并不会比领养的孩子LOCK差。（博主只是打个比方）</p><h3 id="那如何教育呢？"><a href="#那如何教育呢？" class="headerlink" title="那如何教育呢？"></a>那如何教育呢？</h3><p>在jdk1.6~jdk1.7的时候，也就是synchronized16、7岁的时候，你作为爸爸，你给他优化了，具体优化在哪里呢：</p><h3 id="1、线程自旋和适应性自旋"><a href="#1、线程自旋和适应性自旋" class="headerlink" title="1、线程自旋和适应性自旋"></a>1、线程自旋和适应性自旋</h3><p>我们知道，java’线程其实是映射在内核之上的，线程的挂起和恢复会极大的影响开销。并且jdk官方人员发现，很多线程在等待锁的时候，在很短的一段时间就获得了锁，所以它们在线程等待的时候，并不需要把线程挂起，而是让他无目的的循环，一般设置10次。这样就避免了线程切换的开销，极大的提升了性能。</p><p>而适应性自旋，是赋予了自旋一种学习能力，它并不固定自旋10次一下。他可以根据它前面线程的自旋情况，从而调整它的自旋，甚至是不经过自旋而直接挂起。</p><h3 id="2、锁消除"><a href="#2、锁消除" class="headerlink" title="2、锁消除"></a>2、锁消除</h3><p>什么叫锁消除呢？就是把不必要的同步在编译阶段进行移除。</p><p>那么有的小伙伴又迷糊了，我自己写的代码我会不知道这里要不要加锁？我加了锁就是表示这边会有同步呀？</p><p>并不是这样，这里所说的锁消除并不一定指代是你写的代码的锁消除，我打一个比方：</p><p>在jdk1.5以前，我们的String字符串拼接操作其实底层是StringBuffer来实现的（这个大家可以用我前面介绍的方法，写一个简单的demo，然后查看class文件中的字节码指令就清楚了），而在jdk1.5之后，那么是用StringBuilder来拼接的。我们考虑前面的情况，比如如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1=<span class="hljs-string">&quot;qwe&quot;</span>;<br>String str2=<span class="hljs-string">&quot;asd&quot;</span>;<br>String str3=str1+str2;<br></code></pre></td></tr></table></figure><p>底层实现会变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb.append(<span class="hljs-string">&quot;qwe&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;asd&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们知道，StringBuffer是一个线程安全的类，也就是说两个append方法都会同步，通过指针逃逸分析（就是变量不会外泄），我们发现在这段代码并不存在线程安全问题，这个时候就会把这个同步锁消除。</p><h3 id="3、锁粗化"><a href="#3、锁粗化" class="headerlink" title="3、锁粗化"></a>3、锁粗化</h3><p>在用synchronized的时候，我们都讲究为了避免大开销，尽量同步代码块要小。那么为什么还要加粗呢？</p><p>我们继续以上面的字符串拼接为例，我们知道在这一段代码中，每一个append都需要同步一次，那么我可以把锁粗化到第一个append和最后一个append（这里不要去纠结前面的锁消除，我只是打个比方）</p><h3 id="4、轻量级锁"><a href="#4、轻量级锁" class="headerlink" title="4、轻量级锁"></a>4、轻量级锁</h3><h3 id="5、偏向锁"><a href="#5、偏向锁" class="headerlink" title="5、偏向锁"></a>5、偏向锁</h3><p>关于最后这两种，我希望留个有缘的读者自己去查找，我不希望我把一件事情描述的那么详细，自己动手得到才是你自己的，博主可以告诉你的是，最后两种并不难。。加油吧，各位。</p><p><em>来源：<a href="https://blog.csdn.net/u012403290/">https://blog.csdn.net/u012403290/</a></em></p>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实现医疗在线问答机器人</title>
    <link href="/2022/12/10/python%E5%AE%9E%E7%8E%B0%E5%8C%BB%E7%96%97%E5%9C%A8%E7%BA%BF%E9%97%AE%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <url>/2022/12/10/python%E5%AE%9E%E7%8E%B0%E5%8C%BB%E7%96%97%E5%9C%A8%E7%BA%BF%E9%97%AE%E7%AD%94%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>python实现医疗在线问答机器人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> urllib2<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_words_internet</span>(<span class="hljs-params">key_word</span>):<br>    <span class="hljs-comment"># 查找答案列表</span><br>    yl_domain = <span class="hljs-string">&#x27;https://www.youlai.cn&#x27;</span><br>    find_num = <span class="hljs-number">0</span><br>    match_result = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> find_num &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> match_result <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        find_num += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;思考中:&#x27;</span> + <span class="hljs-built_in">str</span>(find_num))<br>        html = urllib2.urlopen(yl_domain + <span class="hljs-string">&quot;/cse/search?q=&quot;</span> + key_word + <span class="hljs-string">&quot;&amp;page=&quot;</span> + <span class="hljs-built_in">str</span>(find_num)).read()<br>        match_result = re.search(<span class="hljs-string">r&#x27;.&lt;a.*href=&quot;(.*ask/[^&quot;]*)&quot;.*&#x27;</span>, html, re.M | re.I)<br>    <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        the_text = match_result.group(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 获取第一个答案详情</span><br>        html = urllib2.urlopen(yl_domain + the_text).read()<br>        match_result = re.search(<span class="hljs-string">r&#x27;&lt;div class=\&quot;text\&quot;&gt;([^div]*)&lt;/div&gt;&#x27;</span>, html, re.M | re.I | re.DOTALL)<br>        <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            match_result = re.search(<span class="hljs-string">r&#x27;&lt;div class=\&quot;p_text\&quot;&gt;([^div]*)&lt;/div&gt;&#x27;</span>, html, re.M | re.I | re.DOTALL)<br>        <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            match_result = re.search(<span class="hljs-string">r&#x27;&lt;div class=\&quot;docYes\&quot;&gt;.*&lt;p&gt;([^&lt;/p&gt;]*)&lt;/p&gt;&#x27;</span>, html, re.M | re.I | re.DOTALL)<br>        <span class="hljs-keyword">if</span> match_result <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            the_text = match_result.group(<span class="hljs-number">1</span>)<br>            the_text = re.sub(<span class="hljs-string">r&#x27;&lt;[^&gt;]+&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, the_text)<br>            <span class="hljs-keyword">return</span> the_text.strip().strip(<span class="hljs-string">&#x27;　&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    keyword = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;问:&quot;</span> + keyword)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;答:&quot;</span> + find_words_internet(keyword))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongo搭建副本集</title>
    <link href="/2022/12/10/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <url>/2022/12/10/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….</p><span id="more"></span><h3 id="Replica-Set介绍"><a href="#Replica-Set介绍" class="headerlink" title="Replica Set介绍"></a>Replica Set介绍</h3><blockquote><p>中文翻译叫做副本集,其实简单来说就是集群当中包含了多份数据，保证主节点挂掉了，备节点能继续提供数据服务，提供的前提就是数据需要和主节点一致。</p></blockquote><p><img src="https://images.gitee.com/uploads/images/2019/0112/092857_9bb8ae47_1215820.png" alt="输入图片说明" title="1358056331_2790.png"></p><ol><li><p>Mongodb(M)表示主节点，Mongodb(S)表示备节点，Mongodb(A)表示仲裁节点。主备节点存储数据，仲裁节点不存储数据。客户端同时连接主节点与备节点，不连接仲裁节点。</p></li><li><p>默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。这个设置叫做Read Preference Modes，同时Java客户端提供了简单的配置方式，可以不必直接对数据库进行操作。</p></li><li><p>仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。我开始也不相信必须要有仲裁节点，但是自己也试过没仲裁节点的话，主节点挂了备节点还是备节点，所以咱们还是需要它的。</p></li></ol><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li><p>般情况下不会把数据目录建立在mongodb的解压目录下，不过这里方便起见，就建在mongodb解压目录下吧。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/mongodb/</span>data/master <br>mkdir -p <span class="hljs-regexp">/mongodb/</span>data/slaver <br>mkdir -p <span class="hljs-regexp">/mongodb/</span>data/arbiter  <br><span class="hljs-comment">#三个目录分别对应主，备，仲裁节点</span><br></code></pre></td></tr></table></figure></li><li><p>建立配置文件,由于配置比较多，所以我们将配置写到文件里，以文件的方式启动，以下配置文件仔细看可以说是只有端口不同，搭建的伪集群。</p></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#master.conf  主节点配置</span><br><br><span class="hljs-comment">#数据存放目录</span><br><span class="hljs-attr">dbpath</span>=/mongodb/data/master  <br><span class="hljs-comment">#日志存放路径</span><br><span class="hljs-attr">logpath</span>=/mongodb/log/master.log<br><span class="hljs-comment">#进程文件</span><br><span class="hljs-attr">pidfilepath</span>=/mongodb/master.pid<br><span class="hljs-comment">#为每一个数据库按照数据库名建立文件夹存放</span><br><span class="hljs-attr">directoryperdb</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#以追加的方式记录日志</span><br><span class="hljs-attr">logappend</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#replica set的名字</span><br><span class="hljs-attr">replSet</span>=testrs<br><span class="hljs-comment">#绑定暴露的ID地址</span><br><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-comment">#端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">27017</span><br><span class="hljs-comment">#mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的5%</span><br><span class="hljs-attr">oplogSize</span>=<span class="hljs-number">10000</span><br><span class="hljs-comment">#以后台方式运行进程</span><br><span class="hljs-attr">fork</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment">#不预先分配存储</span><br><span class="hljs-attr">noprealloc</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#master.conf  副本节点配置</span><br><span class="hljs-comment">#slaver.conf</span><br><span class="hljs-attr">dbpath</span>=/mongodb/data/slaver<br><span class="hljs-attr">logpath</span>=/mongodb/log/slaver.log<br><span class="hljs-attr">pidfilepath</span>=/mongodb/slaver.pid<br><span class="hljs-attr">directoryperdb</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">logappend</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">replSet</span>=testrs<br><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">27018</span><br><span class="hljs-attr">oplogSize</span>=<span class="hljs-number">10000</span><br><span class="hljs-attr">fork</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">noprealloc</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#arbiter.conf  仲裁节点配置</span><br><span class="hljs-attr">dbpath</span>=/mongodb/data/arbiter<br><span class="hljs-attr">logpath</span>=/mongodb/log/arbiter.log<br><span class="hljs-attr">pidfilepath</span>=/mongodb/arbiter.pid<br><span class="hljs-attr">directoryperdb</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">logappend</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">replSet</span>=testrs<br><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">27019</span><br><span class="hljs-attr">oplogSize</span>=<span class="hljs-number">10000</span><br><span class="hljs-attr">fork</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">noprealloc</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>启动mongo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./monood -f master.conf<br>./mongod -f slaver.conf<br>./mongod -f arbiter.conf<br></code></pre></td></tr></table></figure><ol start="4"><li>开始配置主从、仲裁节点，可以通过客户端连接mongodb，也可以直接在三个节点中选择一个连接mongodb。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;./mongo <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">27017</span>   <span class="hljs-comment">#ip和port是某个节点的地址</span><br>&gt;use admin<br>&gt;cfg=&#123; _<span class="hljs-built_in">id</span>:<span class="hljs-string">&quot;testrs&quot;</span>, members:[ &#123;_<span class="hljs-built_in">id</span>:<span class="hljs-number">0</span>,host:<span class="hljs-string">&#x27;127.0.0.1:27017&#x27;</span>,priority:<span class="hljs-number">2</span>&#125;, &#123;_<span class="hljs-built_in">id</span>:<span class="hljs-number">1</span>,host:<span class="hljs-string">&#x27;127.0.0.1:27017&#x27;</span>,priority:<span class="hljs-number">1</span>&#125;, <br>&#123;_<span class="hljs-built_in">id</span>:<span class="hljs-number">2</span>,host:<span class="hljs-string">&#x27;127.0.0.1:27017&#x27;</span>,arbiterOnly:true&#125;] &#125;;<br>&gt;rs.initiate(cfg)             <span class="hljs-comment">#使配置生效</span><br></code></pre></td></tr></table></figure><blockquote><p>cfg是可以任意的名字，当然最好不要是mongodb的关键字，conf，config都可以。最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的127.0.0.1:27017。特别注意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。配置的生效时间根据不同的机器配置会有长有短，配置不错的话基本上十几秒内就能生效，有的配置需要一两分钟。如果生效了，执行rs.status()命令会看到如下信息：<br> <figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs clojure"> &#123;<br>        <span class="hljs-string">&quot;set&quot;</span> : <span class="hljs-string">&quot;testrs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;date&quot;</span> : ISODate(<span class="hljs-string">&quot;2013-01-05T02:44:43Z&quot;</span>)<span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;myState&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;members&quot;</span> : [<br>                &#123;<br>                        <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;127.0.0.1:27017&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;PRIMARY&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;optime&quot;</span> : Timestamp(<span class="hljs-number">1357285565000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;optimeDate&quot;</span> : ISODate(<span class="hljs-string">&quot;2013-01-04T07:46:05Z&quot;</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;self&quot;</span> : <span class="hljs-literal">true</span><br>                &#125;<span class="hljs-punctuation">,</span><br>                &#123;<br>                        <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;127.0.0.1:27018&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;SECONDARY&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;optime&quot;</span> : Timestamp(<span class="hljs-number">1357285565000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;optimeDate&quot;</span> : ISODate(<span class="hljs-string">&quot;2013-01-04T07:46:05Z&quot;</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="hljs-string">&quot;2013-01-05T02:44:42Z&quot;</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-number">0</span><br>                &#125;<span class="hljs-punctuation">,</span><br>                &#123;<br>                        <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;127.0.0.1:27019&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;health&quot;</span> : <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;stateStr&quot;</span> : <span class="hljs-string">&quot;ARBITER&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;uptime&quot;</span> : <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;lastHeartbeat&quot;</span> : ISODate(<span class="hljs-string">&quot;2013-01-05T02:44:42Z&quot;</span>)<span class="hljs-punctuation">,</span><br>                        <span class="hljs-string">&quot;pingMs&quot;</span> : <span class="hljs-number">0</span><br>                &#125;<br>        ]<span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;ok&quot;</span> : <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><br>如果配置正在生效，其中会包含如下信息,同时可以查看对应节点的日志，发现正在等待别的节点生效或者正在分配数据文件：<br> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;stateStr&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;RECOVERING&quot;</span><br></code></pre></td></tr></table></figure></p></blockquote><p> 现在基本上已经完成了集群的所有搭建工作。至于测试工作，可以留给大家自己试试。一个是往主节点插入数据，能从备节点查到之前插入的数据（查询备节点可能会遇到某个问题，可以自己去网上查查看）。二是停掉主节点，备节点能变成主节点提供服务。三是恢复主节点，备节点也能恢复其备的角色，而不是继续充当主的角色。二和三都可以通过rs.status()命令实时查看集群的变化。</p><p> <a href="https://blog.csdn.net/luonanqin/article/details/8497860/">转载来源</a></p>]]></content>
    
    
    <categories>
      
      <category>Mongo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongo集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitmq实现延时队列任务</title>
    <link href="/2022/12/10/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/12/10/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时…</p><h4 id="要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"><a href="#要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。" class="headerlink" title="要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"></a>要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml">#### 1.更新yum源<br>&gt; yum update<br><br>#### 2.安装docker<br>&gt; yum install -y docker<br><br>#### 3拉取镜像<br>&gt; docker pull rabbitmq:management<br><br>#### 4启动容器<br>&gt; docker run -d --name rabbitmq --privileged=true -p 9158:5672 -p 9159:15672 \<br>-v /root/program/rabbit/data:/var/lib/rabbitmq \<br>-v /root/program/rabbit/log:/var/log/rabbitmq/ \<br>-v /root/program/rabbit/plugins:/plugins/ \<br>--hostname my-rabbit -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=the_rabbit -e RABBITMQ_DEFAULT_PASS=the_rabbit rabbitmq:management<br><br>#### 5插件目录映射，先cp出容器的插件到宿主机，那会将延迟插件放入宿主机目录下，此操作先随便起个mq容器<br>&gt; docker cp rabbitmq:/plugins/ /root/program/rabbit/<br><br>#### 6进入容器方式<br>&gt; docker exec -it 容器ID /bin/bash<br><br>#### 7退出容器<br>&gt; exit 或者 Ctrl+p+q<br><br>#### 8向容器发送命令<br>&gt; docker exec -d rabbitmq rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br><br></code></pre></td></tr></table></figure><h4 id="两种延时方式"><a href="#两种延时方式" class="headerlink" title="两种延时方式"></a>两种延时方式</h4><ol><li>死信+普通交换器，依靠消息过期自动进入死信队列，然后消费死信队列的数据这个思路，但是由于这种方式不管设置队列过期时间还是消息过期时间，都不能达到单个队列消息灵活过期的目的。<br>比如，先放入队列10s过期消息，再放入2s过期。mq会检测头部10s是否过期，10s不过期的情况下，2s就算过去也不会跑到死信。</li><li>使用插件rabbitmq_delayed_message_exchange。这个可以很好的解决消息不能灵活过期的问题，但是有个弊端就是很难查看消息堆积的情况，因为他把要发送的延时消息存在本地的分布式mnesia 数据库中，其次过期时间为最大int值，超过这个值得代码判定重复过期设置。</li></ol><h4 id="延时插件的使用方式"><a href="#延时插件的使用方式" class="headerlink" title="延时插件的使用方式"></a>延时插件的使用方式</h4><ol><li>去MQ官网下载插件 ++<a href="https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)">https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)</a></li><li>把插件放到MQ的安装目录的plugins下</li><li>然后执行rabbitmq-plugins enable rabbitmq_delayed_message_exchange 命令启用插件</li><li>然后就也可以在web页面查看新的交换器x-delayed-message（其实并不是真正意义上的，真正的只有4个）</li><li>然后上代码实现延时任务，配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring:<br>   rabbitmq:<br>    host: 192.168.0.245<br>    port: 9158<br>    username: ym_rabbit<br>    password: ym_rabbit<br>    listener:<br>      simple:<br>        acknowledge-mode: manual #手动应答<br>        retry:<br>          enabled: true<br><br># 用户自定义配置<br>config-center:<br>  rabbitRuleConfig:<br>    # 系统标志<br>    systemMark: local<br>    # 普通消息<br>    normalExchange: topic.normal<br>    # 延时消息<br>    delayExchange: topic.delay<br>    # 普通和延时消息死信<br>    deadExchange: topic.dead<br><br></code></pre></td></tr></table></figure></li><li>spring中MQ的配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RabbitMQConfig 配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年05月07日 14:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConfig</span> &#123;<br><br><br><span class="hljs-comment">//----------------------------常量定义-----------------------</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">POINT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nml&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dly&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;que&quot;</span>;<br><br><span class="hljs-comment">//----------------------------交换器定义----------------------------</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通交换器名字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 死信交换器名字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时交换器名字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//-------------------------队列定义--------------------------</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORMAL_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时队列存放任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DELAY_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通死信队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_NORMAL_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时死信队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEAD_DELAY_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ConfigCenterProperties configCenterProperties;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RabbitTemplate <span class="hljs-title function_">rabbitTemplate</span><span class="hljs-params">(CachingConnectionFactory rabbitListenerContainerFactory)</span> &#123;<br><span class="hljs-type">RabbitTemplate</span> <span class="hljs-variable">rabbitTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>(rabbitListenerContainerFactory);<br>rabbitTemplate.setUsePublisherConnection(<span class="hljs-literal">true</span>);<br>rabbitTemplate.setChannelTransacted(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> rabbitTemplate;<br>&#125;<br><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RabbitRuleConfig</span> <span class="hljs-variable">rabbitRuleConfig</span> <span class="hljs-operator">=</span> configCenterProperties.getRabbitRuleConfig();<br>NORMAL_EXCHANGE = rabbitRuleConfig.getNormalExchange() + POINT + rabbitRuleConfig.getSystemMark();<br>DEAD_EXCHANGE = rabbitRuleConfig.getDeadExchange() + POINT + rabbitRuleConfig.getSystemMark();<br>DELAY_EXCHANGE = rabbitRuleConfig.getDelayExchange() + POINT + rabbitRuleConfig.getSystemMark();<br>NORMAL_QUEUE = rabbitRuleConfig.getNormalExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();<br>DELAY_QUEUE = rabbitRuleConfig.getDelayExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();<br>DEAD_NORMAL_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + NORMAL + POINT + rabbitRuleConfig.getSystemMark();<br>DEAD_DELAY_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + DELAY + POINT + rabbitRuleConfig.getSystemMark();<br>&#125;<br><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory) &#123;<br><span class="hljs-type">SimpleRabbitListenerContainerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRabbitListenerContainerFactory</span>();<br>factory.setConnectionFactory(connectionFactory);<br>factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);<br>factory.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>());<br>factory.setChannelTransacted(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> factory;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory2(ConnectionFactory connectionFactory) &#123;<br><span class="hljs-type">SimpleRabbitListenerContainerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRabbitListenerContainerFactory</span>();<br>factory.setConnectionFactory(connectionFactory);<br>factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);<br>factory.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerMessageConverter</span>());<br>factory.setChannelTransacted(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> factory;<br>&#125;<br><br><span class="hljs-comment">//------------------------------交换器声明start---------------------------</span><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">normalExchange</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(NORMAL_EXCHANGE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">deadExchange</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(DEAD_EXCHANGE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayExchange</span><span class="hljs-params">()</span> &#123;<br>Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>args.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;topic&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(DELAY_EXCHANGE, <span class="hljs-string">&quot;x-delayed-message&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, args);<br>&#125;<br><br><span class="hljs-comment">//------------------------------交换器声明end---------------------------</span><br><br><span class="hljs-comment">//-------------------------------队列start---------------------------------</span><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">deadNormalQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DEAD_NORMAL_QUEUE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">deadDelayQueue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DEAD_DELAY_QUEUE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">normalQueue</span><span class="hljs-params">()</span> &#123;<br>Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>params.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>params.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, DEAD_NORMAL_QUEUE);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(NORMAL_QUEUE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayQueue</span><span class="hljs-params">()</span> &#123;<br>Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>params.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE);<br>params.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, DEAD_DELAY_QUEUE);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(DELAY_QUEUE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, params);<br>&#125;<br><span class="hljs-comment">//-------------------------------队列end---------------------------------</span><br><br><br><span class="hljs-comment">//-------------------------------绑定start---------------------------------</span><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingNormalExchange</span><span class="hljs-params">(Queue normalQueue, TopicExchange normalExchange)</span> &#123;<br><span class="hljs-keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(NORMAL_QUEUE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingNormalDeadExchange</span><span class="hljs-params">(Queue deadNormalQueue, TopicExchange deadExchange)</span> &#123;<br><span class="hljs-keyword">return</span> BindingBuilder.bind(deadNormalQueue).to(deadExchange).with(DEAD_NORMAL_QUEUE);<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingDelayExchange</span><span class="hljs-params">(Queue delayQueue, CustomExchange delayExchange)</span> &#123;<br><span class="hljs-keyword">return</span> BindingBuilder.bind(delayQueue).to(delayExchange).with(DELAY_QUEUE).noargs();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingDelayDeadExchange</span><span class="hljs-params">(Queue deadDelayQueue, TopicExchange deadExchange)</span> &#123;<br><span class="hljs-keyword">return</span> BindingBuilder.bind(deadDelayQueue).to(deadExchange).with(DEAD_DELAY_QUEUE);<br>&#125;<br><br><span class="hljs-comment">//-----------------------------------------绑定end------------------------------------------</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>7.生产者代码开发,我这里将延时任务和普通消息分开了，所以有2个发送方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送消息给MQ</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年09月19日 11:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IMessageSenderSV</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(IMessageSenderSV.class);<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送云信消息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> messageTask 消息内容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(NormalMessageTask messageTask)</span> &#123;<br>LOG.info(<span class="hljs-string">&quot;发送[ &#123;&#125; ]消息到MQ&quot;</span>, messageTask.getMessageTypeEnum().getDescribe());<br>rabbitTemplate.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>());<br>rabbitTemplate.convertAndSend(RabbitMQConfig.NORMAL_EXCHANGE, RabbitMQConfig.NORMAL_QUEUE, messageTask, (message) -&gt; &#123;<br><span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>messageProperties.setMessageId(messageTask.getUuid());<br>messageProperties.setType(messageTask.getMessageTypeEnum().getDescribe());<br>messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON);<br><span class="hljs-type">String</span> <span class="hljs-variable">sendTime</span> <span class="hljs-operator">=</span> DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">// 发送时间</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;send_time&quot;</span>, sendTime);<br><span class="hljs-keyword">return</span> message;<br>&#125;);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送延时任务给队列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> task 任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendDelayTask</span><span class="hljs-params">(AbstractDelayedTask task)</span> &#123;<br>LOG.info(<span class="hljs-string">&quot;发送延时任务 [ &#123;&#125;:&#123;&#125; ] 到MQ&quot;</span>, task.getDescribe(), task.getDelay());<br>rabbitTemplate.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerMessageConverter</span>());<br>rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;<br><span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br><span class="hljs-type">long</span> <span class="hljs-variable">nextDelay</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (task.getDelay() &gt; Integer.MAX_VALUE) &#123;<br><span class="hljs-comment">//如果延时时间大于erlang最大数值，多次延时</span><br>messageProperties.setDelay(Integer.MAX_VALUE);<br>nextDelay = task.getDelay() - Integer.MAX_VALUE;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>messageProperties.setDelay(task.getDelay().intValue());<br>&#125;<br><span class="hljs-comment">// 下次延时的时间</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;next_delay&quot;</span>, nextDelay);<br>messageProperties.setMessageId(task.getUuid());<br>messageProperties.setType(task.getDescribe());<br>messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);<br><span class="hljs-type">String</span> <span class="hljs-variable">sendTime</span> <span class="hljs-operator">=</span> DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">// 发送时间</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;send_time&quot;</span>, sendTime);<br><span class="hljs-type">String</span> <span class="hljs-variable">expirationTime</span> <span class="hljs-operator">=</span> DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + task.getDelay()));<br><span class="hljs-comment">// 过期时间</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;expiration_time&quot;</span>, expirationTime);<br><span class="hljs-comment">// 任务的入参</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;params&quot;</span>, task.getParams().toString());<br><span class="hljs-keyword">return</span> message;<br>&#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多次延时，再次发送任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> task 任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nextDelay 下次延时时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendAgain</span><span class="hljs-params">(Message task, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> nextDelay)</span> &#123;<br>rabbitTemplate.setMessageConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerMessageConverter</span>());<br>rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;<br><span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br><span class="hljs-type">long</span> <span class="hljs-variable">nextDelayNew</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (nextDelay &gt; Integer.MAX_VALUE) &#123;<br><span class="hljs-comment">//如果延时时间大于erlang最大数值，多次延时</span><br>messageProperties.setDelay(Integer.MAX_VALUE);<br>nextDelayNew = nextDelay - Integer.MAX_VALUE;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>messageProperties.setDelay((<span class="hljs-type">int</span>) nextDelay);<br>&#125;<br><span class="hljs-comment">// 下次延时的时间</span><br>messageProperties.setHeader(<span class="hljs-string">&quot;next_delay&quot;</span>, nextDelayNew);<br><span class="hljs-keyword">return</span> message;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8.消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费MQ消息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年09月18日 10:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@EnableRabbit</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IMessageReceiveSV</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(IMessageReceiveSV.class);<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IMessageSenderSV messageSenderSV;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IYunxinUserSV yunxinUserSV;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Value(&quot;$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.nml.$&#123;config-center.rabbitRuleConfig.systemMark&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String normalDeadQueue;<br><br><span class="hljs-meta">@Value(&quot;$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.dly.$&#123;config-center.rabbitRuleConfig.systemMark&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String delayDeadQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;$&#123;config-center.rabbitRuleConfig.normalExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;&quot;, containerFactory = &quot;rabbitListenerContainerFactory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoNormalMsg</span><span class="hljs-params">(<span class="hljs-meta">@Payload</span> NormalMessageTask messageTask, <span class="hljs-meta">@Headers</span> Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>channel.txSelect();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> normalHandle(messageTask);<br><span class="hljs-keyword">if</span> (success) &#123;<br>channel.basicAck((<span class="hljs-type">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="hljs-literal">false</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>channel.basicReject((<span class="hljs-type">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="hljs-literal">false</span>);<br>&#125;<br>channel.txCommit();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 手动消费普通消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manualConsumptionNormal</span><span class="hljs-params">()</span> &#123;<br>rabbitTemplate.receiveAndReply(normalDeadQueue, (payload) -&gt; &#123;<br><span class="hljs-type">NormalMessageTask</span> <span class="hljs-variable">normalMessageTask</span> <span class="hljs-operator">=</span> (NormalMessageTask) payload;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> normalHandle(normalMessageTask);<br><span class="hljs-keyword">if</span> (!success) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AmqpException</span>(<span class="hljs-string">&quot;普通消息消费异常&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费普通消息方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> messageTask</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">normalHandle</span><span class="hljs-params">(NormalMessageTask messageTask)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">MessageTypeEnum</span> <span class="hljs-variable">messageTypeEnum</span> <span class="hljs-operator">=</span> messageTask.getMessageTypeEnum();<br><span class="hljs-type">Object</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> messageTask.getMsg();<br>LOG.info(<span class="hljs-string">&quot;消费消息 [ &#123;&#125; ],消息ID为[ &#123;&#125; ]&quot;</span>, messageTypeEnum.getDescribe(), messageTask.getUuid());<br><span class="hljs-keyword">switch</span> (messageTypeEnum) &#123;<br><span class="hljs-keyword">case</span> YUN_XIN: &#123;<br>yunxinUserSV.syncMessages((String) msg);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>: &#123;<br><span class="hljs-comment">// do</span><br>LOG.info(<span class="hljs-string">&quot;未知消息:&#123;&#125;&quot;</span>, (String) msg);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BusinessException) &#123;<br>LOG.info(e.getMessage());<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>LOG.error(<span class="hljs-string">&quot;消费异常:&#123;&#125;&quot;</span>, ExceptionUtil.getExceptionMessage(e));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时消息,执行策略</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 能收到说明已经到时间了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RabbitListener(queues = &quot;$&#123;config-center.rabbitRuleConfig.delayExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;&quot;, containerFactory = &quot;rabbitListenerContainerFactory2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoDelayMsg</span><span class="hljs-params">(<span class="hljs-meta">@Payload</span> Message message, <span class="hljs-meta">@Headers</span> Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>channel.txSelect();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> delayHandle(message);<br><span class="hljs-keyword">if</span> (success) &#123;<br>channel.basicAck((<span class="hljs-type">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="hljs-literal">false</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>channel.basicReject((<span class="hljs-type">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="hljs-literal">false</span>);<br>&#125;<br>channel.txCommit();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费延时消息方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delayHandle</span><span class="hljs-params">(Message message)</span> &#123;<br><span class="hljs-type">MessageProperties</span> <span class="hljs-variable">messageProperties</span> <span class="hljs-operator">=</span> message.getMessageProperties();<br>Map&lt;String, Object&gt; headers = messageProperties.getHeaders();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 判定是否要多次延时</span><br><span class="hljs-type">long</span> <span class="hljs-variable">nextDelay</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) headers.get(<span class="hljs-string">&quot;next_delay&quot;</span>);<br><span class="hljs-keyword">if</span> (nextDelay &gt; <span class="hljs-number">0</span>) &#123;<br>messageSenderSV.sendAgain(message, nextDelay);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">byte</span>[] body = message.getBody();<br><span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span> &amp;&amp; body.length &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//判定为一个有效消息，进行执行</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(body));) &#123;<br><span class="hljs-type">AbstractDelayedTask</span> <span class="hljs-variable">abstractDelayedTask</span> <span class="hljs-operator">=</span> (AbstractDelayedTask) ois.readObject();<br>LOG.info(<span class="hljs-string">&quot;执行延时任务 [ &#123;&#125; ],消息ID为[ &#123;&#125; ],参数为:&#123;&#125;&quot;</span>, abstractDelayedTask.getDescribe(), abstractDelayedTask.getUuid(), JSONObject.toJSONString(headers));<br>abstractDelayedTask.excute();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br><span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BusinessException) &#123;<br>LOG.info(e.getMessage());<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>LOG.error(<span class="hljs-string">&quot;消费异常:&#123;&#125;&quot;</span>, ExceptionUtil.getExceptionMessage(e));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 手动消费延时消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manualConsumptionDelay</span><span class="hljs-params">()</span> &#123;<br>rabbitTemplate.receiveAndReply(delayDeadQueue, (payload) -&gt; &#123;<br><span class="hljs-type">AbstractDelayedTask</span> <span class="hljs-variable">abstractDelayedTask</span> <span class="hljs-operator">=</span> (AbstractDelayedTask) payload;<br><span class="hljs-keyword">try</span> &#123;<br>abstractDelayedTask.excute();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>LOG.error(ExceptionUtil.getExceptionMessage(e));<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AmqpException</span>(<span class="hljs-string">&quot;延时消息异常&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.延时任务抽象类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 延时队列Task</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractDelayedTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AbstractDelayedTask.class);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务唯一性标志</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.uuid();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务描述</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String describe;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多久后执行，单位毫秒</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Long delay;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法需要执行的参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> JSONObject params;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractDelayedTask</span><span class="hljs-params">(String describe, <span class="hljs-type">long</span> delay, JSONObject params)</span> &#123;<br><span class="hljs-built_in">this</span>.describe = describe;<br><span class="hljs-built_in">this</span>.delay = delay;<br><span class="hljs-built_in">this</span>.params = params;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">excute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>LOG.info(<span class="hljs-string">&quot;执行延时任务开始===========》&#123;&#125;&quot;</span>, describe);<br><span class="hljs-built_in">this</span>.run();<br>LOG.info(<span class="hljs-string">&quot;执行延时任务结束===========》&#123;&#125;&quot;</span>, describe);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="9"><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//15分钟未支付取消订单操作</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>params.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;订单ID&quot;</span>);<br><span class="hljs-type">UnPayCancelOrderTask</span> <span class="hljs-variable">unPayCancelOrderTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnPayCancelOrderTask</span>(<span class="hljs-string">&quot;下单后不支付自动取消订单&quot;</span>, TimeUnit.MINUTES.toMillis(<span class="hljs-number">15</span>), params);<br>messageSenderSV.sendDelayTask(unPayCancelOrderTask);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/10/hello-world/"/>
    <url>/2022/12/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="/2022/12/10/excel/"/>
    <url>/2022/12/10/excel/</url>
    
    <content type="html"><![CDATA[<p><a href="https://996.icu/"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h1 id="excel-poi"><a href="#excel-poi" class="headerlink" title="excel-poi"></a>excel-poi</h1><h4 id="maven使用方式"><a href="#maven使用方式" class="headerlink" title="maven使用方式"></a>maven使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- excel导入导出 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.github.stupdit1t&lt;/groupId&gt;<br>    &lt;artifactId&gt;poi-excel&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本工程并没有使用注解方式实现，完全是编码方式。个人觉得注解方式对代码侵入比较大。不如纯编码方便，请以maven版本为主，此源码可能不是最新版本。环境为，POI4.0.1 ，JDK1.8</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>支持严格的单元格校验</li><li>支持数据行的图片导入</li><li>3支持数据回调处理</li><li>03和07都支持</li></ol><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ol><li>动态表头+表尾</li><li>支持List<Map>数据</li><li>支持图片导出，</li><li>支持复杂对象的导出</li><li>支持回调处理数据后再导出</li><li>支持单元格的样式设置</li><li>支持模板导出</li><li>导出03和07都支持，默认为03，具体看以下使用方式</li><li>支持多sheet导出</li></ol><h3 id="选择03还是07？"><a href="#选择03还是07？" class="headerlink" title="选择03还是07？"></a>选择03还是07？</h3><ol><li>03速度较快，单sheet最大65535行，体积大</li><li>07速度慢，单sheet最大1048576行，体积小</li></ol><h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p>1.简单的导入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.获取源文件</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">wb</span> <span class="hljs-operator">=</span> WorkbookFactory.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\test\\java\\excel\\imports\\import.xlsx&quot;</span>));<br><span class="hljs-comment">// 2.获取sheet0导入</span><br><span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> wb.getSheetAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 3.生成VO数据</span><br><span class="hljs-comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量</span><br>ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate.class, EvaluateVerifyBuilder.getInstance(), sheet, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (list.isSuccess()) &#123;<br><span class="hljs-comment">// 导入没有错误，打印数据</span><br>System.out.println(JSON.toJSONString(list.getData()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 导入有错误，打印输出错误</span><br>System.out.println(list.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>2.复杂导入，带图片导入，带回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.获取源文件</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">wb</span> <span class="hljs-operator">=</span> WorkbookFactory.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\test\\java\\excel\\imports\\import.xlsx&quot;</span>));<br><span class="hljs-comment">// 2.获取sheet0导入</span><br><span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> wb.getSheetAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 3.生成VO数据</span><br><span class="hljs-comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量;5.导入每条数据的回调</span><br>ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate.class, ProjectVerifyBuilder.getInstance(), sheet, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, (row, rowNum) -&gt; &#123;<br><span class="hljs-comment">//1.此处可以完成更多的校验</span><br><span class="hljs-keyword">if</span>(row.getAreaName() == <span class="hljs-string">&quot;中青旅&quot;</span>)&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POIException</span>(<span class="hljs-string">&quot;第&quot;</span>+rowNum+<span class="hljs-string">&quot;行，区域名字不能为中青旅！&quot;</span>);<br>&#125;<br><span class="hljs-comment">//2.图片导入，再ProjectEvaluate定义类型为byte[]的属性就可以，ProjectVerifyBuilder定义ImgVerfiy校验列.就OK了</span><br>&#125;);<br><span class="hljs-keyword">if</span> (list.isSuccess()) &#123;<br><span class="hljs-comment">// 导入没有错误，打印数据</span><br>System.out.println(JSON.toJSONString(list.getData()));<br><span class="hljs-comment">//打印图片byte数组长度</span><br><span class="hljs-type">byte</span>[] img = list.getData().get(<span class="hljs-number">0</span>).getImg();<br>System.out.println(img);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 导入有错误，打印输出错误</span><br>System.out.println(list.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><p>3.自定义校验器，导入需要校验字段,必须继承AbstractVerifyBuidler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectVerifyBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractVerifyBuidler</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ProjectVerifyBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProjectVerifyBuilder</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProjectVerifyBuilder <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> builder;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义列校验实体：提取的字段、提取列、校验规则</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ProjectVerifyBuilder</span><span class="hljs-params">()</span> &#123;<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;projectName&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;项目名称&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;areaName&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;所属区域&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;province&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;省份&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;市&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;people&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;项目所属人&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;leader&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringVerify</span>(<span class="hljs-string">&quot;项目领导人&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;scount&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerVerify</span>(<span class="hljs-string">&quot;总分&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;avg&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleVerify</span>(<span class="hljs-string">&quot;历史平均分&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;createTime&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTimeVerify</span>(<span class="hljs-string">&quot;创建时间&quot;</span>, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>, <span class="hljs-literal">true</span>)));<br>cellEntitys.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CellVerifyEntity</span>(<span class="hljs-string">&quot;img&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImgVerify</span>(<span class="hljs-string">&quot;图片&quot;</span>, <span class="hljs-literal">false</span>)));<br><span class="hljs-comment">// 必须调用</span><br><span class="hljs-built_in">super</span>.init();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="导入示例图"><a href="#导入示例图" class="headerlink" title="导入示例图"></a>导入示例图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1118/104015_a439ba1a_1215820.png" alt="输入图片说明" title="QQ截图20181118104004.png"></p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>0.基础数据构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单sheet数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> List&lt;ProjectEvaluate&gt; sheetData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * map型数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; mapData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复杂对象数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> List&lt;Student&gt; complexData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多sheet数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> List&lt;List&lt;?&gt;&gt; moreSheetData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><br><span class="hljs-keyword">static</span> &#123;<br><br>    <span class="hljs-comment">// 1.单sheet数据填充</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">ProjectEvaluate</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProjectEvaluate</span>();<br>        obj.setProjectName(<span class="hljs-string">&quot;中青旅&quot;</span> + i);<br>        obj.setAreaName(<span class="hljs-string">&quot;华东长三角&quot;</span>);<br>        obj.setProvince(<span class="hljs-string">&quot;河北省&quot;</span>);<br>        obj.setCity(<span class="hljs-string">&quot;保定市&quot;</span>);<br>        obj.setPeople(<span class="hljs-string">&quot;张三&quot;</span> + i);<br>        obj.setLeader(<span class="hljs-string">&quot;李四&quot;</span> + i);<br>        obj.setScount(<span class="hljs-number">50</span>);<br>        obj.setAvg(<span class="hljs-number">60.0</span>);<br>        obj.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        obj.setImg(ImageParseBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/test/java/excel/export/1.png&quot;</span>)));<br>        sheetData.add(obj);<br>    &#125;<br>    <span class="hljs-comment">// 2.map型数据填充</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>        Map&lt;String, Object&gt; obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        obj.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span> + i);<br>        obj.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">5</span> + i);<br>        mapData.add(obj);<br>    &#125;<br>    <span class="hljs-comment">// 3.复杂对象数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-comment">// 學生</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// 學生所在的班級，用對象</span><br>        stu.setClassRoom(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassRoom</span>(<span class="hljs-string">&quot;六班&quot;</span>));<br>        <span class="hljs-comment">// 學生的更多信息，用map</span><br>        Map&lt;String, Object&gt; moreInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        moreInfo.put(<span class="hljs-string">&quot;parent&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-string">&quot;張無忌&quot;</span>));<br>        stu.setMoreInfo(moreInfo);<br>        stu.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        complexData.add(stu);<br>    &#125;<br>    <span class="hljs-comment">// 4.多sheet数据填充</span><br>    moreSheetData.add(sheetData);<br>    moreSheetData.add(mapData);<br>    moreSheetData.add(complexData);<br>&#125;<br></code></pre></td></tr></table></figure><p>1.简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.获取导出的数据体</span><br> <span class="hljs-comment">// 1.导出的hearder设置</span><br>String[] hearder = &#123;<span class="hljs-string">&quot;序号&quot;</span>, <span class="hljs-string">&quot;项目名称&quot;</span>, <span class="hljs-string">&quot;所属区域&quot;</span>, <span class="hljs-string">&quot;省份&quot;</span>, <span class="hljs-string">&quot;市&quot;</span>, <span class="hljs-string">&quot;项目所属人&quot;</span>, <span class="hljs-string">&quot;项目领导人&quot;</span>, <span class="hljs-string">&quot;得分&quot;</span>, <span class="hljs-string">&quot;平均分&quot;</span>, <span class="hljs-string">&quot;创建时间&quot;</span>, <span class="hljs-string">&quot;项目图片&quot;</span>&#125;;<br><span class="hljs-comment">// 2.导出hearder对应的字段设置</span><br>Column[] column = &#123;Column.field(<span class="hljs-string">&quot;projectName&quot;</span>), Column.field(<span class="hljs-string">&quot;areaName&quot;</span>), Column.field(<span class="hljs-string">&quot;province&quot;</span>),<br>        Column.field(<span class="hljs-string">&quot;city&quot;</span>), Column.field(<span class="hljs-string">&quot;people&quot;</span>), Column.field(<span class="hljs-string">&quot;leader&quot;</span>), Column.field(<span class="hljs-string">&quot;scount&quot;</span>),<br>        Column.field(<span class="hljs-string">&quot;avg&quot;</span>), Column.field(<span class="hljs-string">&quot;createTime&quot;</span>),<br>        <span class="hljs-comment">// 项目图片</span><br>        Column.field(<span class="hljs-string">&quot;img&quot;</span>)<br><br>&#125;;<br><span class="hljs-comment">// 3.执行导出到工作簿</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ExcelUtils.createWorkbook(sheetData, ExportRules.simpleRule(column, hearder).title(<span class="hljs-string">&quot;项目资源统计&quot;</span>).sheetName(<span class="hljs-string">&quot;mysheet1&quot;</span>).autoNum(<span class="hljs-literal">true</span>), <span class="hljs-literal">true</span>,<br>        (feildName, value, t, customStyle) -&gt; &#123;<br>            <span class="hljs-comment">//此处指向回调逻辑，可以修改写入excel的值,以及单元格样式，如颜色等</span><br>            <span class="hljs-keyword">return</span> value;<br>        &#125;);<br><span class="hljs-comment">// 4.写出文件</span><br>bean.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export1.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="1导出图"><a href="#1导出图" class="headerlink" title="1导出图"></a>1导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161804_3ddf0b6b_1215820.png" alt="输入图片说明" title="1.png"></p><p>2.复杂表格导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.表头设置,可以对应excel设计表头，一看就懂</span><br>HashMap&lt;String, String&gt; headerRules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>headerRules.put(<span class="hljs-string">&quot;1,1,A,K&quot;</span>, <span class="hljs-string">&quot;项目资源统计&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,3,A,A&quot;</span>, <span class="hljs-string">&quot;序号&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,2,B,E&quot;</span>, <span class="hljs-string">&quot;基本信息&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,B,B&quot;</span>, <span class="hljs-string">&quot;项目名称&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,C,C&quot;</span>, <span class="hljs-string">&quot;所属区域&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,D,D&quot;</span>, <span class="hljs-string">&quot;省份&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,E,E&quot;</span>, <span class="hljs-string">&quot;市&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,3,F,F&quot;</span>, <span class="hljs-string">&quot;项目所属人&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,3,G,G&quot;</span>, <span class="hljs-string">&quot;市项目领导人&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,2,H,I&quot;</span>, <span class="hljs-string">&quot;分值&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,H,H&quot;</span>, <span class="hljs-string">&quot;得分&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;3,3,I,I&quot;</span>, <span class="hljs-string">&quot;平均分&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,3,J,J&quot;</span>, <span class="hljs-string">&quot;创建时间&quot;</span>);<br>headerRules.put(<span class="hljs-string">&quot;2,3,K,K&quot;</span>, <span class="hljs-string">&quot;项目图片&quot;</span>);<br><span class="hljs-comment">// 2.尾部设置，一般可以用来设计合计栏</span><br>HashMap&lt;String, String&gt; footerRules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>footerRules.put(<span class="hljs-string">&quot;1,2,A,C&quot;</span>, <span class="hljs-string">&quot;注释:&quot;</span>);<br>footerRules.put(<span class="hljs-string">&quot;1,2,D,K&quot;</span>, <span class="hljs-string">&quot;导出参考代码！&quot;</span>);<br><span class="hljs-comment">// 3.导出hearder对应的字段设置</span><br>Column[] column = &#123;<br>        Column.field(<span class="hljs-string">&quot;projectName&quot;</span>),<br>        <span class="hljs-comment">// 4.1设置此列宽度为10</span><br>        Column.field(<span class="hljs-string">&quot;areaName&quot;</span>).width(<span class="hljs-number">10</span>),<br>        <span class="hljs-comment">// 4.2设置此列下拉框数据</span><br>        Column.field(<span class="hljs-string">&quot;province&quot;</span>).width(<span class="hljs-number">5</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;陕西省&quot;</span>, <span class="hljs-string">&quot;山西省&quot;</span>, <span class="hljs-string">&quot;辽宁省&quot;</span>&#125;),<br>        <span class="hljs-comment">// 4.3设置此列水平居右</span><br>        Column.field(<span class="hljs-string">&quot;city&quot;</span>).align(HorizontalAlignment.RIGHT),<br>        <span class="hljs-comment">// 4.4 设置此列垂直居上</span><br>        Column.field(<span class="hljs-string">&quot;people&quot;</span>).valign(VerticalAlignment.TOP),<br>        <span class="hljs-comment">// 4.5 设置此列单元格 自定义校验 只能输入文本</span><br>        Column.field(<span class="hljs-string">&quot;leader&quot;</span>).width(<span class="hljs-number">4</span>).verifyCustom(<span class="hljs-string">&quot;VALUE(F3:F500)&quot;</span>, <span class="hljs-string">&quot;我是提示&quot;</span>),<br>        <span class="hljs-comment">// 4.6设置此列单元格 整数 数据校验 ，同时设置背景色为棕色</span><br>        Column.field(<span class="hljs-string">&quot;scount&quot;</span>).verifyIntNum(<span class="hljs-string">&quot;10~20&quot;</span>).backColor(IndexedColors.BROWN),<br>        <span class="hljs-comment">// 4.7设置此列单元格 浮点数 数据校验， 同时设置字体颜色红色</span><br>        Column.field(<span class="hljs-string">&quot;avg&quot;</span>).verifyFloatNum(<span class="hljs-string">&quot;10.0~20.0&quot;</span>).color(IndexedColors.RED),<br>        <span class="hljs-comment">// 4.8设置此列单元格 日期 数据校验 ，同时宽度为20、限制用户表格输入、水平居中、垂直居中、背景色、字体颜色</span><br>        Column.field(<span class="hljs-string">&quot;createTime&quot;</span>).width(<span class="hljs-number">20</span>).verifyDate(<span class="hljs-string">&quot;2000-01-03 12:35~3000-05-06 23:23&quot;</span>)<br>                .align(HorizontalAlignment.LEFT).valign(VerticalAlignment.CENTER)<br>                .backColor(IndexedColors.YELLOW).color(IndexedColors.GOLD),<br>        <span class="hljs-comment">// 4.9项目图片</span><br>        Column.field(<span class="hljs-string">&quot;img&quot;</span>)<br><br>&#125;;<br><span class="hljs-comment">// 4.执行导出到工作簿</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ExcelUtils.createWorkbook(<br>        sheetData,<br>        ExportRules.complexRule(column, headerRules).autoNum(<span class="hljs-literal">true</span>).footerRules(footerRules).sheetName(<span class="hljs-string">&quot;mysheet2&quot;</span>),<br>        <span class="hljs-literal">true</span>,<br>        (fieldName, value, row, col) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;projectName&quot;</span>.equals(fieldName) &amp;&amp; row.getProjectName().equals(<span class="hljs-string">&quot;中青旅23&quot;</span>)) &#123;<br>                col.align(HorizontalAlignment.LEFT);<br>                col.valign(VerticalAlignment.CENTER);<br>                col.height(<span class="hljs-number">2</span>);<br>                col.backColor(IndexedColors.RED);<br>                col.color(IndexedColors.YELLOW);<br>            &#125;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;);<br><span class="hljs-comment">// 5.写出文件</span><br>bean.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export2.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="2导出图"><a href="#2导出图" class="headerlink" title="2导出图"></a>2导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161814_61f83ff1_1215820.png" alt="输入图片说明" title="2.png"></p><p>3.复杂的对象级联导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 1.导出的hearder设置</span><br>String[] hearder = &#123;<span class="hljs-string">&quot;學生姓名&quot;</span>, <span class="hljs-string">&quot;所在班級&quot;</span>, <span class="hljs-string">&quot;所在學校&quot;</span>, <span class="hljs-string">&quot;更多父母姓名&quot;</span>&#125;;<br><span class="hljs-comment">// 2.导出hearder对应的字段设置，列宽设置</span><br>Column[] column = &#123;Column.field(<span class="hljs-string">&quot;name&quot;</span>), Column.field(<span class="hljs-string">&quot;classRoom.name&quot;</span>), Column.field(<span class="hljs-string">&quot;classRoom.school.name&quot;</span>),<br>        Column.field(<span class="hljs-string">&quot;moreInfo.parent.name&quot;</span>),&#125;;<br><span class="hljs-comment">// 3.执行导出到工作簿</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ExcelUtils.createWorkbook(complexData, ExportRules.simpleRule(column, hearder).title(<span class="hljs-string">&quot;學生基本信息&quot;</span>), <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 4.写出文件</span><br>bean.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export3.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="3导出图"><a href="#3导出图" class="headerlink" title="3导出图"></a>3导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193615_b483f034_1215820.png" alt="输入图片说明" title="4.png"></p><p>4.map对象的简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.导出的hearder设置</span><br>String[] hearder = &#123;<span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>&#125;;<br><span class="hljs-comment">// 2.导出hearder对应的字段设置，列宽设置</span><br>Column[] column = &#123;Column.field(<span class="hljs-string">&quot;name&quot;</span>),<br>        Column.field(<span class="hljs-string">&quot;age&quot;</span>),<br>&#125;;<br><span class="hljs-comment">// 3.执行导出到工作簿</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ExcelUtils.createWorkbook(mapData, ExportRules.simpleRule(column, hearder), <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 4.写出文件</span><br>bean.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export4.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="4导出图"><a href="#4导出图" class="headerlink" title="4导出图"></a>4导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193608_c75b81ee_1215820.png" alt="输入图片说明" title="4.png"></p><p>5.模板导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 1.导出的hearder设置</span><br>String[] hearder = &#123;<span class="hljs-string">&quot;宝宝姓名&quot;</span>, <span class="hljs-string">&quot;宝宝昵称&quot;</span>, <span class="hljs-string">&quot;家长姓名&quot;</span>, <span class="hljs-string">&quot;手机号码&quot;</span>, <span class="hljs-string">&quot;宝宝生日&quot;</span>, <span class="hljs-string">&quot;月龄&quot;</span>, <span class="hljs-string">&quot;宝宝性别&quot;</span>, <span class="hljs-string">&quot;来源渠道&quot;</span>, <span class="hljs-string">&quot;市场人员&quot;</span>, <span class="hljs-string">&quot;咨询顾问&quot;</span>, <span class="hljs-string">&quot;客服顾问&quot;</span>,<br>    <span class="hljs-string">&quot;分配校区&quot;</span>, <span class="hljs-string">&quot;备注&quot;</span>&#125;;<br><span class="hljs-comment">// 2.导出hearder对应的字段设置，列宽设置</span><br>Column[] column = &#123;Column.field(<span class="hljs-string">&quot;宝宝姓名&quot;</span>), Column.field(<span class="hljs-string">&quot;宝宝昵称&quot;</span>), Column.field(<span class="hljs-string">&quot;家长姓名&quot;</span>),<br>    Column.field(<span class="hljs-string">&quot;手机号码&quot;</span>).verifyText(<span class="hljs-string">&quot;11~11&quot;</span>, <span class="hljs-string">&quot;请输入11位的手机号码！&quot;</span>),<br>    Column.field(<span class="hljs-string">&quot;宝宝生日&quot;</span>).verifyDate(<span class="hljs-string">&quot;2000-01-01~3000-12-31&quot;</span>),<br>    Column.field(<span class="hljs-string">&quot;月龄&quot;</span>).width(<span class="hljs-number">4</span>).verifyCustom(<span class="hljs-string">&quot;VALUE(F3:F6000)&quot;</span>, <span class="hljs-string">&quot;月齡格式：如1年2个月则输入14&quot;</span>),<br>    Column.field(<span class="hljs-string">&quot;宝宝性别&quot;</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>&#125;),<br>    Column.field(<span class="hljs-string">&quot;来源渠道&quot;</span>).width(<span class="hljs-number">12</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;品推&quot;</span>, <span class="hljs-string">&quot;市场&quot;</span>&#125;),<br>    Column.field(<span class="hljs-string">&quot;市场人员&quot;</span>).width(<span class="hljs-number">6</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>&#125;),<br>    Column.field(<span class="hljs-string">&quot;咨询顾问&quot;</span>).width(<span class="hljs-number">6</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>&#125;),<br>    Column.field(<span class="hljs-string">&quot;客服顾问&quot;</span>).width(<span class="hljs-number">6</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;大唐&quot;</span>, <span class="hljs-string">&quot;银泰&quot;</span>&#125;),<br>    Column.field(<span class="hljs-string">&quot;分配校区&quot;</span>).width(<span class="hljs-number">6</span>).dorpDown(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;大唐&quot;</span>, <span class="hljs-string">&quot;银泰&quot;</span>&#125;), Column.field(<span class="hljs-string">&quot;备注&quot;</span>)&#125;;<br><span class="hljs-comment">// 3.执行导出到工作簿</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ExcelUtils.createWorkbook(Collections.emptyList(), ExportRules.simpleRule(column, hearder), <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 4.写出文件</span><br>bean.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export5.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="5导出图"><a href="#5导出图" class="headerlink" title="5导出图"></a>5导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/180646_50cc4004_1215820.png" alt="输入图片说明" title="5.png"></p><p>6.多sheet合并导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 1.导出的hearder设置</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">emptyWorkbook</span> <span class="hljs-operator">=</span> ExcelUtils.createEmptyWorkbook(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 2.执行导出到工作簿.1.项目数据2.map数据3.复杂对象数据</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; moreSheetData.size(); i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>        List&lt;ProjectEvaluate&gt; data1 = (ArrayList&lt;ProjectEvaluate&gt;) moreSheetData.get(i);<br>        <span class="hljs-comment">// 1.导出的hearder设置</span><br>        String[] hearder = &#123;<span class="hljs-string">&quot;序号&quot;</span>, <span class="hljs-string">&quot;项目名称&quot;</span>, <span class="hljs-string">&quot;所属区域&quot;</span>, <span class="hljs-string">&quot;省份&quot;</span>, <span class="hljs-string">&quot;市&quot;</span>, <span class="hljs-string">&quot;项目所属人&quot;</span>, <span class="hljs-string">&quot;项目领导人&quot;</span>, <span class="hljs-string">&quot;得分&quot;</span>, <span class="hljs-string">&quot;平均分&quot;</span>, <span class="hljs-string">&quot;创建时间&quot;</span>, <span class="hljs-string">&quot;项目图片&quot;</span>&#125;;<br>        <span class="hljs-comment">// 2.导出hearder对应的字段设置</span><br>        Column[] column = &#123;Column.field(<span class="hljs-string">&quot;projectName&quot;</span>), Column.field(<span class="hljs-string">&quot;areaName&quot;</span>), Column.field(<span class="hljs-string">&quot;province&quot;</span>),<br>                Column.field(<span class="hljs-string">&quot;city&quot;</span>), Column.field(<span class="hljs-string">&quot;people&quot;</span>), Column.field(<span class="hljs-string">&quot;leader&quot;</span>), Column.field(<span class="hljs-string">&quot;scount&quot;</span>),<br>                Column.field(<span class="hljs-string">&quot;avg&quot;</span>), Column.field(<span class="hljs-string">&quot;createTime&quot;</span>),<br>                <span class="hljs-comment">// 项目图片</span><br>                Column.field(<span class="hljs-string">&quot;img&quot;</span>)<br><br>        &#125;;<br>        ExcelUtils.fillBook(emptyWorkbook, data1, ExportRules.simpleRule(column, hearder).title(<span class="hljs-string">&quot;项目资源统计&quot;</span>).sheetName(<span class="hljs-string">&quot;mysheet1&quot;</span>).autoNum(<span class="hljs-literal">true</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; data2 = (ArrayList&lt;Map&lt;String, Object&gt;&gt;) moreSheetData.get(i);<br>        <span class="hljs-comment">// 1.导出的hearder设置</span><br>        String[] hearder = &#123;<span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>&#125;;<br>        <span class="hljs-comment">// 2.导出hearder对应的字段设置，列宽设置</span><br>        Column[] column = &#123;Column.field(<span class="hljs-string">&quot;name&quot;</span>),<br>                Column.field(<span class="hljs-string">&quot;age&quot;</span>),<br>        &#125;;<br>        ExcelUtils.fillBook(emptyWorkbook, data2, ExportRules.simpleRule(column, hearder).sheetName(<span class="hljs-string">&quot;mysheet2&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>        List&lt;Student&gt; data3 = (ArrayList&lt;Student&gt;) moreSheetData.get(i);<br>        <span class="hljs-comment">// 1.导出的hearder设置</span><br>        String[] hearder = &#123;<span class="hljs-string">&quot;學生姓名&quot;</span>, <span class="hljs-string">&quot;所在班級&quot;</span>, <span class="hljs-string">&quot;所在學校&quot;</span>, <span class="hljs-string">&quot;更多父母姓名&quot;</span>&#125;;<br>        <span class="hljs-comment">// 2.导出hearder对应的字段设置，列宽设置</span><br>        Column[] column = &#123;Column.field(<span class="hljs-string">&quot;name&quot;</span>), Column.field(<span class="hljs-string">&quot;classRoom.name&quot;</span>), Column.field(<span class="hljs-string">&quot;classRoom.school.name&quot;</span>),<br>                Column.field(<span class="hljs-string">&quot;moreInfo.parent.name&quot;</span>),&#125;;<br>        <span class="hljs-comment">// 3.执行导出到工作簿</span><br>        ExcelUtils.fillBook(emptyWorkbook, data3, ExportRules.simpleRule(column, hearder).title(<span class="hljs-string">&quot;學生基本信息&quot;</span>));<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">// 4.写出文件</span><br>emptyWorkbook.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/test/java/excel/export/export6.xlsx&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>轮子工具</tag>
      
      <tag>POI</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置ssh拉代码</title>
    <link href="/2022/12/10/git%E9%85%8D%E7%BD%AEssh%E6%8B%89%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/12/10/git%E9%85%8D%E7%BD%AEssh%E6%8B%89%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<ol><li>生成证书<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入指定路径文件夹</span>  <br>cd ~/.ssh    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">提示输入文件名, 如id_rsa_stupidt义, 密码不输入</span><br>ssh-keygen -t rsa -C &quot;你的邮箱&quot; <br></code></pre></td></tr></table></figure></li><li>配置仓库匹配<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入指定路径文件夹</span>  <br>cd ~/.ssh  <br>touch config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件内容如下</span><br>Host github.com<br>  User damon<br>  Hostname github.com<br>  IdentityFile ~/.ssh/id_rsa_yami<br> <br>Host github.com<br>  User 625<br>  Hostname github.com<br>  IdentityFile ~/.ssh/id_rsa_stupidt<br> <br>Host gitee.com<br>  User 625<br>  Hostname gitee.com<br>  IdentityFile ~/.ssh/id_rsa<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基本介绍</title>
    <link href="/2022/12/10/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/12/10/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<ul><li><strong>Redis是什么？</strong><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li></ul><span id="more"></span><ul><li><p><strong>Redis是什么？</strong></p><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li><li><p><strong>特性</strong></p><blockquote><ol><li>速度快，数据放在内存中，官方给出的读写性能10万&#x2F;S，与机器性能也有关<blockquote><ul><li>数据放内存中是速度快的主要原因</li><li>C语言实现，与操作系统距离近</li><li>使用了单线程架构，预防多线程可能产生的竞争问题</li></ul></blockquote></li><li>键值对的数据结构服务器</li><li>丰富的功能：见上功能</li><li>简单稳定：单线程</li><li>持久化：发生断电或机器故障，数据可能会丢失，持久化到硬盘</li><li>主从复制：实现多个相同数据的redis副本</li><li>高可用和分布式：哨兵机制实现高可用，保证redis节点故障发现和自动转移</li><li>客户端语言多：java php python c c++ nodejs等</li></ol></blockquote></li><li><p><strong>使用场景</strong></p><blockquote><ol><li>缓存：合理使用缓存加快数据访问速度，降低后端数据源压力</li><li>排行榜：按照热度排名，按照发布时间排行，主要用到列表和有序集合</li><li>计数器应用：视频网站播放数，网站浏览数，使用redis计数</li><li>社交网络：赞、踩、粉丝、下拉刷新</li><li>消息队列：发布和订阅</li></ol></blockquote></li><li><p><strong>常用客户端命令</strong></p></li></ul><table><thead><tr><th>可执行文件</th><th>作用</th></tr></thead><tbody><tr><td>redis-server</td><td>启动redis</td></tr><tr><td>redis-cli</td><td>redis命令行客户端</td></tr><tr><td>redis-benchmark</td><td>基准测试工具</td></tr><tr><td>redis-check-aof</td><td>AOF持久化文件检测和修复工具</td></tr><tr><td>redis-check-dump</td><td>RDB持久化文件检测和修复工具</td></tr><tr><td>redis-sentinel</td><td>启动哨兵</td></tr></tbody></table><blockquote><ol><li><strong>redis-server启动：</strong><blockquote><ol><li>默认配置：redis-server, 日志输出版本信息，端口6379</li><li>运行启动：redis-server –port 6380  不建议</li><li>配置文件启动： redis-server &#x2F;opt&#x2F;redis&#x2F;redis.conf，灵活，生产环境使用这种</li></ol></blockquote></li><li><strong>redis-cli 启动</strong><blockquote><ol><li>交互式：redis-cli -h {host} -p {prot}连接到redis服务，没有h默认连127.0<br>redis-cli -h 127.0.0.1 -p 6379                &#x2F;&#x2F;没有p 默认连6379</li><li>命令式：redis-cli -h 127.0.0.1 -p 6379 get hello  &#x2F;&#x2F;取key&#x3D;hello的value</li></ol></blockquote></li><li><strong>停止redis服务： redis-cli shutdown</strong><blockquote><ul><li>a.关闭时：断开连接，持久化文件生成，相对安</li><li>b.还可以用kill关闭，此方式不会做持久化，还会造成缓冲区非法关闭，可能会造成AOF和丢失数据</li></ul></blockquote></li><li>__版本__：<blockquote><ul><li>版本号第二位为奇数，为非稳定版本（2.7、2.9、3.1）</li><li>第二为偶数，为稳定版本（2.6、2.8、3.0）</li><li>当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本</li></ul></blockquote></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis基本介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基本介绍</title>
    <link href="/2022/12/10/Redis%E5%9F%BA%E6%9C%AC%E9%80%9A%E8%AE%AF%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/12/10/Redis%E5%9F%BA%E6%9C%AC%E9%80%9A%E8%AE%AF%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>点击标题查看详情</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis基本介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenResty下载与安装(Linux&amp;Windos)</title>
    <link href="/2022/12/10/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/"/>
    <url>/2022/12/10/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenResty下载与安装"><a href="#OpenResty下载与安装" class="headerlink" title="OpenResty下载与安装"></a>OpenResty下载与安装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">OpenResty</span>=<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span> <br><span class="hljs-attr">linux.centos</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">windows</span>=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h5 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h5><ul><li>OpenResty 官网:<a href="http://openresty.org/cn/">http://openresty.org/cn/</a></li><li>OpenResty 下载及安装说明地址：<a href="http://openresty.org/cn/download.html">http://openresty.org/cn/download.html</a></li></ul><h2 id="Win-10-安装"><a href="#Win-10-安装" class="headerlink" title="Win 10 安装"></a>Win 10 安装</h2><p>解压即安装，双击 nginx.exe 即运行；</p><p>或者进入安装目录，执行 start nginx.exe 即运行；</p><h2 id="Linux-Tar-安装"><a href="#Linux-Tar-安装" class="headerlink" title="Linux Tar 安装"></a>Linux Tar 安装</h2><p>官方源码安装指南：<a href="http://openresty.org/cn/installation.html">http://openresty.org/cn/installation.html</a></p><h5 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> pcre-devel openssl-devel gcc curl<br></code></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">./configure 默认 --prefix=/usr/local/openresty</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./configure --<span class="hljs-built_in">help</span> 查看更多的选项。</span><br>./configure<br></code></pre></td></tr></table></figure><h5 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 编译</span><br><span class="hljs-built_in">make</span> <br><span class="hljs-meta"># 安装</span><br><span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方式一：进入 openresty安装目录/bin 目录，执行</span><br>./openresty<br><span class="hljs-comment"># 方式二：进入 openresty安装目录/nginx/sbin 目录，执行</span><br>./nginx<br></code></pre></td></tr></table></figure><h2 id="Linux-Yum-安装"><a href="#Linux-Yum-安装" class="headerlink" title="Linux Yum 安装"></a>Linux Yum 安装</h2><h5 id="添加-OpenResty-仓库"><a href="#添加-OpenResty-仓库" class="headerlink" title="添加 OpenResty 仓库"></a>添加 OpenResty 仓库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum install -y yum-utils<br>sudo yum-config-manager --add-repo https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/package/</span>centos/openresty.repo<br></code></pre></td></tr></table></figure><h5 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 下载与安装</span><br>sudo yum <span class="hljs-keyword">install</span> -y openresty<br><span class="hljs-comment"># 更新</span><br>sudo yum check-update<br></code></pre></td></tr></table></figure><p>注：默认安装目录：&#x2F;usr&#x2F;local&#x2F;openresty</p><h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方式一：进入 openresty安装目录/bin 目录，执行</span><br>./openresty<br><span class="hljs-comment"># 方式二：进入 openresty安装目录//nginx/sbin 目录，执行</span><br>./nginx<br></code></pre></td></tr></table></figure><h5 id="安装-OpenResty-命令工具"><a href="#安装-OpenResty-命令工具" class="headerlink" title="安装 OpenResty 命令工具"></a>安装 OpenResty 命令工具</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> -y openresty-resty<br></code></pre></td></tr></table></figure><p>命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头</p><h5 id="附录-configure-选项"><a href="#附录-configure-选项" class="headerlink" title="附录-configure 选项"></a>附录-configure 选项</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">root@localhost openresty<span class="hljs-number">-1.15</span><span class="hljs-number">.8</span><span class="hljs-number">.2</span>]<span class="hljs-comment"># ./configure --help</span><br>  <span class="hljs-comment">--help                             this message</span><br><br>  <span class="hljs-comment">--prefix=PATH                      set the installation prefix (default to /usr/local/openresty)</span><br><br>  <span class="hljs-comment">--with-debug                       enable debug logging</span><br>  <span class="hljs-comment">--with-dtrace-probes               enable dtrace USDT probes</span><br>  <span class="hljs-comment">--with-dtrace=PATH                 set dtrace utility pathname</span><br><br>  <span class="hljs-comment">--with-no-pool-patch               enable the no-pool patch for debugging memory issues</span><br><br>  -jN                                pass -jN option <span class="hljs-built_in">to</span> make <span class="hljs-keyword">while</span> building <span class="hljs-keyword">the</span> bundled<br>                                     Lua <span class="hljs-number">5.1</span> interpreter <span class="hljs-keyword">or</span> LuaJIT <span class="hljs-number">2.1</span><br><br>  <span class="hljs-comment">--without-http_echo_module         disable ngx_http_echo_module</span><br>  <span class="hljs-comment">--without-http_xss_module          disable ngx_http_xss_module</span><br>  <span class="hljs-comment">--without-http_coolkit_module      disable ngx_http_coolkit_module</span><br>  <span class="hljs-comment">--without-http_set_misc_module     disable ngx_http_set_misc_module</span><br>  <span class="hljs-comment">--without-http_form_input_module   disable ngx_http_form_input_module</span><br>  <span class="hljs-comment">--without-http_encrypted_session_module</span><br>                                     disable ngx_http_encrypted_session_module<br>  <span class="hljs-comment">--without-http_srcache_module      disable ngx_http_srcache_module</span><br>  <span class="hljs-comment">--without-http_lua_module          disable ngx_http_lua_module</span><br>  <span class="hljs-comment">--without-http_lua_upstream_module disable ngx_http_lua_upstream_module</span><br>  <span class="hljs-comment">--without-http_headers_more_module disable ngx_http_headers_more_module</span><br>  <span class="hljs-comment">--without-http_array_var_module    disable ngx_http_array_var_module</span><br>  <span class="hljs-comment">--without-http_memc_module         disable ngx_http_memc_module</span><br>  <span class="hljs-comment">--without-http_redis2_module       disable ngx_http_redis2_module</span><br>  <span class="hljs-comment">--without-http_redis_module        disable ngx_http_redis_module</span><br>  <span class="hljs-comment">--without-http_rds_json_module     disable ngx_http_rds_json_module</span><br>  <span class="hljs-comment">--without-http_rds_csv_module      disable ngx_http_rds_csv_module</span><br>  <span class="hljs-comment">--without-stream_lua_module        disable ngx_stream_lua_module</span><br>  <span class="hljs-comment">--without-ngx_devel_kit_module     disable ngx_devel_kit_module</span><br>  <span class="hljs-comment">--without-http_ssl_module          disable ngx_http_ssl_module</span><br>  <span class="hljs-comment">--without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><br>  <span class="hljs-comment">--with-http_iconv_module           enable ngx_http_iconv_module</span><br>  <span class="hljs-comment">--with-http_drizzle_module         enable ngx_http_drizzle_module</span><br>  <span class="hljs-comment">--with-http_postgres_module        enable ngx_http_postgres_module</span><br><br>  <span class="hljs-comment">--without-lua_cjson                disable the lua-cjson library</span><br>  <span class="hljs-comment">--without-lua_tablepool            disable the lua-tablepool library (and by consequence, the</span><br>                                     lua-resty-<span class="hljs-built_in">shell</span> library)<br>  <span class="hljs-comment">--without-lua_redis_parser         disable the lua-redis-parser library</span><br>  <span class="hljs-comment">--without-lua_rds_parser           disable the lua-rds-parser library</span><br>  <span class="hljs-comment">--without-lua_resty_dns            disable the lua-resty-dns library</span><br>  <span class="hljs-comment">--without-lua_resty_memcached      disable the lua-resty-memcached library</span><br>  <span class="hljs-comment">--without-lua_resty_redis          disable the lua-resty-redis library</span><br>  <span class="hljs-comment">--without-lua_resty_mysql          disable the lua-resty-mysql library</span><br>  <span class="hljs-comment">--without-lua_resty_upload         disable the lua-resty-upload library</span><br>  <span class="hljs-comment">--without-lua_resty_upstream_healthcheck</span><br>                                     disable <span class="hljs-keyword">the</span> lua-resty-upstream-healthcheck library<br>  <span class="hljs-comment">--without-lua_resty_string         disable the lua-resty-string library</span><br>  <span class="hljs-comment">--without-lua_resty_websocket      disable the lua-resty-websocket library</span><br>  <span class="hljs-comment">--without-lua_resty_limit_traffic  disable the lua-resty-limit-traffic library</span><br>  <span class="hljs-comment">--without-lua_resty_lock           disable the lua-resty-lock library</span><br>  <span class="hljs-comment">--without-lua_resty_lrucache       disable the lua-resty-lrucache library</span><br>  <span class="hljs-comment">--without-lua_resty_signal         disable the lua-resty-signal library (and by consequence,</span><br>                                     <span class="hljs-keyword">the</span> lua-resty-<span class="hljs-built_in">shell</span> library)<br>  <span class="hljs-comment">--without-lua_resty_shell          disable the lua-resty-shell library</span><br>  <span class="hljs-comment">--without-lua_resty_core           disable the lua-resty-core library</span><br><br>  <span class="hljs-comment">--with-luajit                      enable and build the bundled LuaJIT 2.1 (the default)</span><br>  <span class="hljs-comment">--with-luajit=DIR                  use the external LuaJIT 2.1 installation specified by DIR</span><br>  <span class="hljs-comment">--with-luajit-xcflags=FLAGS        Specify extra C compiler flags for LuaJIT 2.1</span><br>  <span class="hljs-comment">--without-luajit-lua52             Turns off the LuaJIT extensions from Lua 5.2 that may break</span><br>                                     backward compatibility.<br>  <span class="hljs-comment">--without-luajit-gc64              Turns off the LuaJIT GC64 mode (which is enabled by default</span><br>                                     <span class="hljs-keyword">on</span> <span class="hljs-title">x86_64</span>)<br><br>  <span class="hljs-comment">--with-libdrizzle=DIR              specify the libdrizzle 1.0 (or drizzle) installation prefix</span><br>  <span class="hljs-comment">--with-libpq=DIR                   specify the libpq (or postgresql) installation prefix</span><br>  <span class="hljs-comment">--with-pg_config=PATH              specify the path of the pg_config utility</span><br><br>Options directly inherited <span class="hljs-built_in">from</span> nginx<br><br>  <span class="hljs-comment">--sbin-path=PATH                   set nginx binary pathname</span><br>  <span class="hljs-comment">--modules-path=PATH                set modules path</span><br>  <span class="hljs-comment">--conf-path=PATH                   set nginx.conf pathname</span><br>  <span class="hljs-comment">--error-log-path=PATH              set error log pathname</span><br>  <span class="hljs-comment">--pid-path=PATH                    set nginx.pid pathname</span><br>  <span class="hljs-comment">--lock-path=PATH                   set nginx.lock pathname</span><br>  <span class="hljs-comment">--tapset-prefix=PATH               set systemtap tapset directory prefix</span><br>  <span class="hljs-comment">--stap-nginx-path=PATH             set stap-nginx pathname</span><br><br>  <span class="hljs-comment">--user=USER                        set non-privileged user for</span><br>                                     worker processes<br>  <span class="hljs-comment">--group=GROUP                      set non-privileged group for</span><br>                                     worker processes<br><br>  <span class="hljs-comment">--build=NAME                       set build name</span><br>  <span class="hljs-comment">--builddir=DIR                     set the build directory</span><br><br>  <span class="hljs-comment">--with-select_module               enable select module</span><br>  <span class="hljs-comment">--without-select_module            disable select module</span><br>  <span class="hljs-comment">--with-poll_module                 enable poll module</span><br>  <span class="hljs-comment">--without-poll_module              disable poll module</span><br><br>  <span class="hljs-comment">--with-threads                     enable thread pool support</span><br><br>  <span class="hljs-comment">--with-file-aio                    enable file AIO support</span><br>  <span class="hljs-comment">--with-ipv6                        enable IPv6 support</span><br><br>  <span class="hljs-comment">--with-http_v2_module              enable ngx_http_v2_module</span><br>  <span class="hljs-comment">--with-http_realip_module          enable ngx_http_realip_module</span><br>  <span class="hljs-comment">--with-http_addition_module        enable ngx_http_addition_module</span><br>  <span class="hljs-comment">--with-http_xslt_module            enable ngx_http_xslt_module</span><br>  <span class="hljs-comment">--with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module</span><br>  <span class="hljs-comment">--with-http_image_filter_module    enable ngx_http_image_filter_module</span><br>  <span class="hljs-comment">--with-http_image_filter_module=dynamic</span><br>                                     enable dynamic ngx_http_image_filter_module<br>  <span class="hljs-comment">--with-http_geoip_module           enable ngx_http_geoip_module</span><br>  <span class="hljs-comment">--with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module</span><br>  <span class="hljs-comment">--with-http_sub_module             enable ngx_http_sub_module</span><br>  <span class="hljs-comment">--with-http_dav_module             enable ngx_http_dav_module</span><br>  <span class="hljs-comment">--with-http_flv_module             enable ngx_http_flv_module</span><br>  <span class="hljs-comment">--with-http_mp4_module             enable ngx_http_mp4_module</span><br>  <span class="hljs-comment">--with-http_gunzip_module          enable ngx_http_gunzip_module</span><br>  <span class="hljs-comment">--with-http_gzip_static_module     enable ngx_http_gzip_static_module</span><br>  <span class="hljs-comment">--with-http_auth_request_module    enable ngx_http_auth_request_module</span><br>  <span class="hljs-comment">--with-http_random_index_module    enable ngx_http_random_index_module</span><br>  <span class="hljs-comment">--with-http_secure_link_module     enable ngx_http_secure_link_module</span><br>  <span class="hljs-comment">--with-http_degradation_module     enable ngx_http_degradation_module</span><br>  <span class="hljs-comment">--with-http_slice_module           enable ngx_http_slice_module</span><br>  <span class="hljs-comment">--with-http_stub_status_module     enable ngx_http_stub_status_module</span><br><br>  <span class="hljs-comment">--without-http_charset_module      disable ngx_http_charset_module</span><br>  <span class="hljs-comment">--without-http_gzip_module         disable ngx_http_gzip_module</span><br>  <span class="hljs-comment">--without-http_ssi_module          disable ngx_http_ssi_module</span><br>  <span class="hljs-comment">--without-http_userid_module       disable ngx_http_userid_module</span><br>  <span class="hljs-comment">--without-http_access_module       disable ngx_http_access_module</span><br>  <span class="hljs-comment">--without-http_auth_basic_module   disable ngx_http_auth_basic_module</span><br>  <span class="hljs-comment">--without-http_autoindex_module    disable ngx_http_autoindex_module</span><br>  <span class="hljs-comment">--without-http_geo_module          disable ngx_http_geo_module</span><br>  <span class="hljs-comment">--without-http_map_module          disable ngx_http_map_module</span><br>  <span class="hljs-comment">--without-http_split_clients_module disable ngx_http_split_clients_module</span><br>  <span class="hljs-comment">--without-http_referer_module      disable ngx_http_referer_module</span><br>  <span class="hljs-comment">--without-http_rewrite_module      disable ngx_http_rewrite_module</span><br>  <span class="hljs-comment">--without-http_proxy_module        disable ngx_http_proxy_module</span><br>  <span class="hljs-comment">--without-http_fastcgi_module      disable ngx_http_fastcgi_module</span><br>  <span class="hljs-comment">--without-http_uwsgi_module        disable ngx_http_uwsgi_module</span><br>  <span class="hljs-comment">--without-http_scgi_module         disable ngx_http_scgi_module</span><br>  <span class="hljs-comment">--without-http_memcached_module    disable ngx_http_memcached_module</span><br>  <span class="hljs-comment">--without-http_limit_conn_module   disable ngx_http_limit_conn_module</span><br>  <span class="hljs-comment">--without-http_limit_req_module    disable ngx_http_limit_req_module</span><br>  <span class="hljs-comment">--without-http_empty_gif_module    disable ngx_http_empty_gif_module</span><br>  <span class="hljs-comment">--without-http_browser_module      disable ngx_http_browser_module</span><br>  <span class="hljs-comment">--without-http_upstream_hash_module</span><br>                                     disable ngx_http_upstream_hash_module<br>  <span class="hljs-comment">--without-http_upstream_ip_hash_module</span><br>                                     disable ngx_http_upstream_ip_hash_module<br>  <span class="hljs-comment">--without-http_upstream_least_conn_module</span><br>                                     disable ngx_http_upstream_least_conn_module<br>  <span class="hljs-comment">--without-http_upstream_keepalive_module</span><br>                                     disable ngx_http_upstream_keepalive_module<br><br>  <span class="hljs-comment">--without-http_upstream_zone_module</span><br>                                     disable ngx_http_upstream_zone_module<br>  <span class="hljs-comment">--with-http_perl_module            enable ngx_http_perl_module</span><br>  <span class="hljs-comment">--with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module</span><br>  <span class="hljs-comment">--with-perl_modules_path=PATH      set Perl modules path</span><br>  <span class="hljs-comment">--with-perl=PATH                   set perl binary pathname</span><br><br>  <span class="hljs-comment">--http-log-path=PATH               set http access log pathname</span><br>  <span class="hljs-comment">--http-client-body-temp-path=PATH  set path to store</span><br>                                     <span class="hljs-keyword">http</span> client request body temporary <span class="hljs-built_in">files</span><br>  <span class="hljs-comment">--http-proxy-temp-path=PATH        set path to store</span><br>                                     <span class="hljs-keyword">http</span> proxy temporary <span class="hljs-built_in">files</span><br>  <span class="hljs-comment">--http-fastcgi-temp-path=PATH      set path to store</span><br>                                     <span class="hljs-keyword">http</span> fastcgi temporary <span class="hljs-built_in">files</span><br>  <span class="hljs-comment">--http-uwsgi-temp-path=PATH        set path to store</span><br>                                     <span class="hljs-keyword">http</span> uwsgi temporary <span class="hljs-built_in">files</span><br>  <span class="hljs-comment">--http-scgi-temp-path=PATH         set path to store</span><br>                                     <span class="hljs-keyword">http</span> scgi temporary <span class="hljs-built_in">files</span><br><br>  <span class="hljs-comment">--without-http                     disable HTTP server</span><br>  <span class="hljs-comment">--without-http-cache               disable HTTP cache</span><br><br>  <span class="hljs-comment">--with-mail                        enable POP3/IMAP4/SMTP proxy module</span><br>  <span class="hljs-comment">--with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module</span><br>  <span class="hljs-comment">--with-mail_ssl_module             enable ngx_mail_ssl_module</span><br>  <span class="hljs-comment">--without-mail_pop3_module         disable ngx_mail_pop3_module</span><br>  <span class="hljs-comment">--without-mail_imap_module         disable ngx_mail_imap_module</span><br>  <span class="hljs-comment">--without-mail_smtp_module         disable ngx_mail_smtp_module</span><br><br>  <span class="hljs-comment">--without-stream                   disable TCP/UDP proxy module</span><br>  <span class="hljs-comment">--without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><br>  <span class="hljs-comment">--with-stream                      enable TCP/UDP proxy module (default on)</span><br>  <span class="hljs-comment">--with-stream=dynamic              enable dynamic TCP/UDP proxy module</span><br>  <span class="hljs-comment">--with-stream_ssl_module           enable ngx_stream_ssl_module (default on)</span><br>  <span class="hljs-comment">--with-stream_realip_module        enable ngx_stream_realip_module</span><br>  <span class="hljs-comment">--with-stream_geoip_module         enable ngx_stream_geoip_module</span><br>  <span class="hljs-comment">--with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module</span><br>  <span class="hljs-comment">--with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module</span><br>  <span class="hljs-comment">--without-stream_limit_conn_module disable ngx_stream_limit_conn_module</span><br>  <span class="hljs-comment">--without-stream_access_module     disable ngx_stream_access_module</span><br>  <span class="hljs-comment">--without-stream_geo_module        disable ngx_stream_geo_module</span><br>  <span class="hljs-comment">--without-stream_map_module        disable ngx_stream_map_module</span><br>  <span class="hljs-comment">--without-stream_split_clients_module</span><br>                                     disable ngx_stream_split_clients_module<br>  <span class="hljs-comment">--without-stream_return_module     disable ngx_stream_return_module</span><br>  <span class="hljs-comment">--without-stream_upstream_hash_module</span><br>                                     disable ngx_stream_upstream_hash_module<br>  <span class="hljs-comment">--without-stream_upstream_least_conn_module</span><br>                                     disable ngx_stream_upstream_least_conn_module<br>  <span class="hljs-comment">--without-stream_upstream_zone_module</span><br>                                     disable ngx_stream_upstream_zone_module<br><br>  <span class="hljs-comment">--with-google_perftools_module     enable ngx_google_perftools_module</span><br>  <span class="hljs-comment">--with-cpp_test_module             enable ngx_cpp_test_module</span><br><br>  <span class="hljs-comment">--add-module=PATH                  enable external module</span><br>  <span class="hljs-comment">--add-dynamic-module=PATH          enable dynamic external module</span><br><br>  <span class="hljs-comment">--with-cc=PATH                     set C compiler pathname</span><br>  <span class="hljs-comment">--with-cpp=PATH                    set C preprocessor pathname</span><br>  <span class="hljs-comment">--with-cc-opt=OPTIONS              set additional C compiler options</span><br>  <span class="hljs-comment">--with-ld-opt=OPTIONS              set additional linker options</span><br>  <span class="hljs-comment">--with-cpu-opt=CPU                 build for the specified CPU, valid values:</span><br>                                     pentium, pentiumpro, pentium3, pentium4,<br>                                     athlon, opteron, sparc32, sparc64, ppc64<br><br>  <span class="hljs-comment">--without-pcre                     disable PCRE library usage</span><br>  <span class="hljs-comment">--with-pcre                        force PCRE library usage</span><br>  <span class="hljs-comment">--with-pcre=DIR                    set path to PCRE library sources</span><br>  <span class="hljs-comment">--with-pcre-opt=OPTIONS            set additional make options for PCRE</span><br>  <span class="hljs-comment">--with-pcre-conf-opt=OPTIONS       set additional configure options for PCRE</span><br>  <span class="hljs-comment">--with-pcre-jit                    build PCRE with JIT compilation support</span><br><br>  <span class="hljs-comment">--with-zlib=DIR                    set path to zlib library sources</span><br>  <span class="hljs-comment">--with-zlib-opt=OPTIONS            set additional build options for zlib</span><br>  <span class="hljs-comment">--with-zlib-asm=CPU                use zlib assembler sources optimized</span><br>                                     <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> specified CPU, valid values:<br>                                     pentium, pentiumpro<br><br>  <span class="hljs-comment">--with-libatomic                   force libatomic_ops library usage</span><br>  <span class="hljs-comment">--with-libatomic=DIR               set path to libatomic_ops library sources</span><br><br>  <span class="hljs-comment">--with-openssl=DIR                 set path to OpenSSL library sources</span><br>  <span class="hljs-comment">--with-openssl-opt=OPTIONS         set additional build options for OpenSSL</span><br><br>  <span class="hljs-comment">--dry-run                          dry running the configure, for testing only</span><br>  <span class="hljs-comment">--platform=PLATFORM                forcibly specify a platform name, for testing only</span><br>————————————————<br>版权声明：本文为CSDN博主「SIMBA1949」的原创文章，遵循 CC <span class="hljs-number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="hljs-keyword">https</span>://blog.csdn.net/simba1949/java/article/details/<span class="hljs-number">103333599</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth 2.0 的一个简单解释！</title>
    <link href="/2022/12/10/OAuth%202.0%20%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <url>/2022/12/10/OAuth%202.0%20%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/">2019年4月 4日</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">OAuth 2.0</a> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，下面我就通过一个简单的类比，帮助大家轻松理解，OAuth 2.0 到底是什么。</p><h2 id="一、快递员问题"><a href="#一、快递员问题" class="headerlink" title="一、快递员问题"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040401.jpg"></p><p>小区有门禁系统。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040402.jpg"></p><p>进入的时候需要输入密码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040403.jpg"></p><p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040404.jpg"></p><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><h2 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p><p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p><p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p><p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p><p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p><p>第四步，快递员向门禁系统输入令牌，进入小区。</p><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p><h2 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p><p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p><p>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</p><h2 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">下一篇文章</a>，我就来介绍这四种类型，并给出代码实例。</p><p>（完）</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><ul><li><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享3.0许可证</a>）</p></li><li><p>发表日期： 2019年4月 4日</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>认证授权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth 2.0 的四种方式！</title>
    <link href="/2022/12/10/OAuth%202.0%20%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/12/10/OAuth%202.0%20%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/">2019年4月 9日</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html">上一篇文章</a>介绍了 OAuth 2.0 是一种授权机制，主要用来颁发令牌（token）。本文接着介绍颁发令牌的实务操作。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040901.jpg"></p><p>下面我假定，你已经理解了 OAuth 2.0 的含义和设计思想，否则请先阅读这个系列的<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html">上一篇文章</a>。</p><blockquote><p>进入正文之前，插播一则活动消息。</p><p>4月22日（周一）到4月29日（下周一），每天晚上八点都有两小时的免费直播课，体系化介绍高级前端开发知识，网易云课堂主办。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html#support">详细介绍</a>请看本文结尾，欢迎关注。</p></blockquote><h2 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h2><p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p><blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，OAuth 的核心就是向第三方应用颁发令牌。然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p></blockquote><p>也就是说，OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式。</p><blockquote><ul><li><p>授权码（authorization-code）</p></li><li><p>隐藏式（implicit）</p></li><li><p>密码式（password）：</p></li><li><p>客户端凭证（client credentials）</p></li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h2 id="第一种授权方式：授权码"><a href="#第一种授权方式：授权码" class="headerlink" title="第一种授权方式：授权码"></a>第一种授权方式：授权码</h2><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><blockquote><p><a href="https://b.com/oauth/authorize">https://b.com/oauth/authorize</a>?<br>  response_type&#x3D;code&amp;<br>  client_id&#x3D;CLIENT_ID&amp;<br>  redirect_uri&#x3D;CALLBACK_URL&amp;<br>  scope&#x3D;read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040902.jpg"></p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><blockquote><p><a href="https://a.com/callback?code=AUTHORIZATION_CODE">https://a.com/callback?code=AUTHORIZATION_CODE</a></p></blockquote><p>上面 URL 中，<code>code</code>参数就是授权码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040907.jpg"></p><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><blockquote><p><a href="https://b.com/oauth/token">https://b.com/oauth/token</a>?<br> client_id&#x3D;CLIENT_ID&amp;<br> client_secret&#x3D;CLIENT_SECRET&amp;<br> grant_type&#x3D;authorization_code&amp;<br> code&#x3D;AUTHORIZATION_CODE&amp;<br> redirect_uri&#x3D;CALLBACK_URL</p></blockquote><p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040904.jpg"></p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p><blockquote><p>{<br>  “access_token”:”ACCESS_TOKEN”,<br>  “token_type”:”bearer”,<br>  “expires_in”:2592000,<br>  “refresh_token”:”REFRESH_TOKEN”,<br>  “scope”:”read”,<br>  “uid”:100101,<br>  “info”:{…}}</p></blockquote><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040905.jpg"></p><h2 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h2><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</p><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><blockquote><p><a href="https://b.com/oauth/authorize">https://b.com/oauth/authorize</a>?<br>  response_type&#x3D;token&amp;<br>  client_id&#x3D;CLIENT_ID&amp;<br>  redirect_uri&#x3D;CALLBACK_URL&amp;<br>  scope&#x3D;read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><blockquote><p><a href="https://a.com/callback#token=ACCESS_TOKEN">https://a.com/callback#token=ACCESS_TOKEN</a></p></blockquote><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040906.jpg"></p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h2 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h2><p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</p><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><blockquote><p><a href="https://oauth.b.com/token">https://oauth.b.com/token</a>?<br>  grant_type&#x3D;password&amp;<br>  username&#x3D;USERNAME&amp;<br>  password&#x3D;PASSWORD&amp;<br>  client_id&#x3D;CLIENT_ID</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><p>这种方式需要用户给出自己的用户名&#x2F;密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h2 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h2><p>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</p><p>第一步，A 应用在命令行向 B 发出请求。</p><blockquote><p><a href="https://oauth.b.com/token">https://oauth.b.com/token</a>?<br>  grant_type&#x3D;client_credentials&amp;<br>  client_id&#x3D;CLIENT_ID&amp;<br>  client_secret&#x3D;CLIENT_SECRET</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p><p>第二步，B 网站验证通过以后，直接返回令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p><blockquote><p>curl -H “Authorization: Bearer ACCESS_TOKEN” \“<a href="https://api.b.com&quot;/">https://api.b.com&quot;</a></p></blockquote><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><blockquote><p><a href="https://b.com/oauth/token">https://b.com/oauth/token</a>?<br>  grant_type&#x3D;refresh_token&amp;<br>  client_id&#x3D;CLIENT_ID&amp;<br>  client_secret&#x3D;CLIENT_SECRET&amp;<br>  refresh_token&#x3D;REFRESH_TOKEN</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p><p>B 网站验证通过以后，就会颁发新的令牌。</p><p>写到这里，颁发令牌的四种方式就介绍完了。<a href="http://www.ruanyifeng.com/blog/2019/04/github-oauth.html">下一篇文章</a>会编写一个真实的 Demo，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p>]]></content>
    
    
    
    <tags>
      
      <tag>认证授权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql通篇回顾</title>
    <link href="/2022/12/10/Mysql%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE/"/>
    <url>/2022/12/10/Mysql%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是 MySQL 默认的事务型存储引擎，只要在需要它不支持的特性时，才考虑使用其他存储引擎。</p><p>InnoDB 采用 MVCC 来支持高并发，并且实现了四个标准隔离级别(未提交读、提交读、可重复读、可串行化)。其默认级别时可重复读（REPEATABLE READ），在可重复读级别下，通过 MVCC + Next-Key Locking 防止幻读。</p><p>主索引时聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对主键查询有很高的性能。</p><p>InnoDB 内部做了很多优化，包括从磁盘读取数据时采用的可预测性读，能够自动在内存中创建 hash 索引以加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。</p><p>InnoDB 支持真正的在线热备份，MySQL 其他的存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合的场景中，停止写入可能也意味着停止读取。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p><p>提供了大量的特性，包括压缩表、空间数据索引等。</p><p>不支持事务。</p><p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p><h3 id="InnoDB-和-MyISAM-的比较"><a href="#InnoDB-和-MyISAM-的比较" class="headerlink" title="InnoDB 和 MyISAM 的比较"></a>InnoDB 和 MyISAM 的比较</h3><ul><li><p>事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。  </p></li><li><p>并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。  </p></li><li><p>外键：InnoDB 支持外键。  </p></li><li><p>备份：InnoDB 支持在线热备份。  </p></li><li><p>崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。  </p></li><li><p>其它特性：MyISAM 支持压缩表和空间数据索引。</p></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="B-Tree-原理"><a href="#B-Tree-原理" class="headerlink" title="B+ Tree 原理"></a>B+ Tree 原理</h3><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>B Tree 指的是 Balance Tree，也就是平衡树，平衡树是一颗查找树，并且所有叶子节点位于同一层。</p><p>B+ Tree 是 B 树的一种变形，它是基于 B Tree 和叶子节点顺序访问指针进行实现，通常用于数据库和操作系统的文件系统中。</p><p>B+ 树有两种类型的节点：内部节点（也称索引节点）和叶子节点，内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存在叶子节点。</p><p>内部节点中的 key 都按照从小到大的顺序排列，对于内部节点中的一个 key，左子树中的所有 key 都小于它，右子树中的 key 都大于等于它，叶子节点的记录也是按照从小到大排列的。</p><p>每个叶子节点都存有相邻叶子节点的指针。</p><p><img src="https://pic4.zhimg.com/80/v2-4e4b732ccb930fedebdc20405ff8852f_720w.jpg"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>查找</p><p>查找以典型的方式进行，类似于二叉查找树。起始于根节点，自顶向下遍历树，选择其分离值在要查找值的任意一边的子指针。在节点内部典型的使用是二分查找来确定这个位置。</p><p>插入</p><ul><li><p>Perform a search to determine what bucket the new record should go into.  </p></li><li><p>If the bucket is not full(a most b - 1 entries after the insertion，b 是节点中的元素个数，一般是页的整数倍),add tht record.  </p></li><li><p>Otherwise,before inserting the new record  </p><ul><li><p>split the bucket.</p><ul><li><p>original node has 「(L+1)&#x2F;2」items</p></li><li><p>new node has 「(L+1)&#x2F;2」items</p></li></ul></li><li><p>Move 「(L+1)&#x2F;2」-th key to the parent,and insert the new node to the parent.</p></li><li><p>Repeat until a parent is found that need not split.</p></li></ul></li><li><p>If the root splits,treat it as if it has an empty parent ans split as outline above.</p></li></ul><p>B-trees grow as the root and not at the leaves.</p><p>删除</p><p>和插入类似，只不过是自下而上的合并操作。</p><h3 id="树的常见特性"><a href="#树的常见特性" class="headerlink" title="树的常见特性"></a>树的常见特性</h3><p>AVL 树</p><p>平衡二叉树，一般是用平衡因子差值决定并通过旋转来实现，左右子树树高差不超过1，那么和红黑树比较它是严格的平衡二叉树，平衡条件非常严格（树高差只有1），只要插入或删除不满足上面的条件就要通过旋转来保持平衡。由于旋转是非常耗费时间的。所以 AVL 树适用于插入&#x2F;删除次数比较少，但查找多的场景。</p><p>红黑树</p><p>通过对从根节点到叶子节点路径上各个节点的颜色进行约束，确保没有一条路径会比其他路径长2倍，因而是近似平衡的。所以相对于严格要求平衡的AVL树来说，它的旋转保持平衡次数较少。适合，查找少，插入&#x2F;删除次数多的场景。（现在部分场景使用跳表来替换红黑树，可搜索“为啥 redis 使用跳表(skiplist)而不是使用 red-black？”）</p><p>B&#x2F;B+ 树</p><p>多路查找树，出度高，磁盘IO低，一般用于数据库系统中。</p><h3 id="B-树与红黑树的比较"><a href="#B-树与红黑树的比较" class="headerlink" title="B + 树与红黑树的比较"></a>B + 树与红黑树的比较</h3><p>红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因：</p><p>（一）磁盘 IO 次数</p><p>B+ 树一个节点可以存储多个元素，相对于红黑树的树高更低，磁盘 IO 次数更少。</p><p>（二）磁盘预读特性</p><p>为了减少磁盘 I&#x2F;O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道。每次会读取页的整数倍。</p><p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I&#x2F;O 就能完全载入一个节点。</p><h3 id="B-树与-B-树的比较"><a href="#B-树与-B-树的比较" class="headerlink" title="B + 树与 B 树的比较"></a>B + 树与 B 树的比较</h3><p>B+ 树的磁盘 IO 更低</p><p>B+ 树的内部节点并没有指向关键字具体信息的指针。因此其内部节点相对 B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p><p>B+ 树的查询效率更加稳定</p><p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p><p>B+ 树元素遍历效率高</p><p>B 树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而 B 树不支持这样的操作（或者说效率太低）。</p><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p><h3 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B+ Tree 索引"></a>B+ Tree 索引</h3><p>是大多数 MySQL 存储引擎的默认索引类型。</p><ul><li><p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。  </p></li><li><p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。  </p></li><li><p>可以指定多个列作为索引列，多个索引列共同组成键。  </p></li><li><p>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p></li></ul><p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p><img src="https://pic2.zhimg.com/80/v2-16a8457329925b26ddd84ecf862540f1_720w.jpg"></p><p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找，这个过程也被称作回表。</p><p><img src="https://pic2.zhimg.com/80/v2-ed26c40a16d6cceb50617b7f2bf9e1d5_720w.jpg"></p><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p><ul><li><p>无法用于排序与分组；</p></li><li><p>只支持精确查找，无法用于部分查找和范围查找。</p></li></ul><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</p><p>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p><p>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</p><p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。</p><h3 id="空间数据索引"><a href="#空间数据索引" class="headerlink" title="空间数据索引"></a>空间数据索引</h3><p>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p><p>必须使用 GIS 相关的函数来维护数据。</p><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h3><p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p><p>例如下面的查询不能使用 actor_id 列的索引：</p><p>SELECT actor_id FROM sakila.actor WHERE actor_id + 1 &#x3D; 5;</p><h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p><p>SELECT film_id, actor_ id FROM sakila.film_actor<br>WHERE actor_id &#x3D; 1 AND film_id &#x3D; 1;</p><h3 id="索引列的顺序"><a href="#索引列的顺序" class="headerlink" title="索引列的顺序"></a>索引列的顺序</h3><p>让选择性最强的索引列放在前面。</p><p>索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。</p><p>例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p><p>SELECT COUNT(DISTINCT staff_id)&#x2F;COUNT(*) AS staff_id_selectivity,<br>COUNT(DISTINCT customer_id)&#x2F;COUNT(*) AS customer_id_selectivity,<br>COUNT(*)<br>FROM payment;</p><p>   staff_id_selectivity: 0.0001<br>customer_id_selectivity: 0.0373<br>               COUNT(*): 16049</p><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p><p>前缀长度的选取需要根据索引选择性来确定。</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>索引包含所有需要查询的字段的值。</p><p>具有以下优点：</p><ul><li><p>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</p></li><li><p>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</p></li><li><p>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</p></li></ul><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul><li><p>大大减少了服务器需要扫描的数据行数。  </p></li><li><p>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。  </p></li><li><p>将随机 I&#x2F;O 变为顺序 I&#x2F;O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。</p></li></ul><h2 id="索引的使用条件"><a href="#索引的使用条件" class="headerlink" title="索引的使用条件"></a>索引的使用条件</h2><ul><li><p>对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；  </p></li><li><p>对于中到大型的表，索引就非常有效；  </p></li><li><p>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。</p></li></ul><blockquote><p>为什么对于非常小的表，大部分情况下简单的全表扫描比建立索引更高效？<br>如果一个表比较小，那么显然直接遍历表比走索引要快（因为需要回表）。<br>注：首先，要注意这个答案隐含的条件是查询的数据不是索引的构成部分，否也不需要回表操作。其次，查询条件也不是主键，否则可以直接从聚簇索引中拿到数据。  </p></blockquote><h2 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h2><h3 id="使用-explain-分析-select-查询语句"><a href="#使用-explain-分析-select-查询语句" class="headerlink" title="使用 explain 分析 select 查询语句"></a>使用 explain 分析 select 查询语句</h3><blockquote><p>explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。  </p></blockquote><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>常用的有 SIMPLE 简单查询，UNION 联合查询，SUBQUERY 子查询等。</p><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>要查询的表</p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><blockquote><p>The possible indexes to choose  </p></blockquote><p>可选择的索引</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><blockquote><p>The index actually chosen  </p></blockquote><p>实际使用的索引</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><blockquote><p>Estimate of rows to be examined  </p></blockquote><p>扫描的行数</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>索引查询类型，经常用到的索引查询类型：</p><p>const：使用主键或者唯一索引进行查询的时候只有一行匹配 ref：使用非唯一索引 range：使用主键、单个字段的辅助索引、多个字段的辅助索引的最后一个字段进行范围查询 index：和all的区别是扫描的是索引树 all：扫描全表：</p><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><p>触发条件：表只有一行，这是一个 const type 的特殊情况</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>触发条件：在使用主键或者唯一索引进行查询的时候只有一行匹配。</p><p>SELECT * FROM tbl_name WHERE primary_key&#x3D;1;</p><p>SELECT * FROM tbl_name<br>  WHERE primary_key_part1&#x3D;1 AND primary_key_part2&#x3D;2;</p><p><img src="https://pic1.zhimg.com/80/v2-e2689c04282719b7f564c9c9e864a554_720w.jpg"></p><h3 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h3><p>触发条件：在进行联接查询的，使用主键或者唯一索引并且只匹配到一行记录的时候</p><p>SELECT * FROM ref_table,other_table<br>  WHERE ref_table.key_column&#x3D;other_table.column;</p><p>SELECT * FROM ref_table,other_table<br>  WHERE ref_table.key_column_part1&#x3D;other_table.column<br>  AND ref_table.key_column_part2&#x3D;1;</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>触发条件：使用非唯一索引</p><p>SELECT * FROM ref_table WHERE key_column&#x3D;expr;</p><p>SELECT * FROM ref_table,other_table<br>  WHERE ref_table.key_column&#x3D;other_table.column;</p><p>SELECT * FROM ref_table,other_table<br>  WHERE ref_table.key_column_part1&#x3D;other_table.column<br>  AND ref_table.key_column_part2&#x3D;1;</p><p><img src="https://pic2.zhimg.com/80/v2-2ccf160966db1eb1da111695a47378b9_720w.jpeg"></p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>触发条件：只有在使用主键、单个字段的辅助索引、多个字段的辅助索引的最后一个字段进行范围查询才是 range</p><p>SELECT * FROM tbl_name<br>  WHERE key_column &#x3D; 10;</p><p>SELECT * FROM tbl_name<br>  WHERE key_column BETWEEN 10 and 20;</p><p>SELECT * FROM tbl_name<br>  WHERE key_column IN (10,20,30);</p><p>SELECT * FROM tbl_name<br>  WHERE key_part1 &#x3D; 10 AND key_part2 IN (10,20,30);</p><p><img src="https://pic4.zhimg.com/80/v2-5b5932436d1f01ad31cdd357b378c9a3_720w.jpg"></p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><blockquote><p>The index join type is the same as ALL, except that the index tree is scanned. This occurs two ways:  </p></blockquote><p>触发条件：</p><p>只扫描索引树</p><p>1）查询的字段是索引的一部分，覆盖索引。 2）使用主键进行排序</p><p><img src="https://pic3.zhimg.com/80/v2-4a4806bff08adef626e456dac94b54e2_720w.jpg"></p><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>触发条件：全表扫描，不走索引</p><h2 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h2><h3 id="减少请求的数据量"><a href="#减少请求的数据量" class="headerlink" title="减少请求的数据量"></a>减少请求的数据量</h3><ul><li><p>只返回必要的列：最好不要使用 SELECT * 语句。</p></li><li><p>只返回必要的行：使用 LIMIT 语句来限制返回的数据。</p></li><li><p>缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</p></li></ul><h3 id="减少服务器端扫描的行数"><a href="#减少服务器端扫描的行数" class="headerlink" title="减少服务器端扫描的行数"></a>减少服务器端扫描的行数</h3><p>最有效的方式是使用索引来覆盖查询。</p><h2 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h2><h3 id="切分大查询"><a href="#切分大查询" class="headerlink" title="切分大查询"></a>切分大查询</h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><p>DELETE FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH);</p><p>rows_affected &#x3D; 0<br>do {<br>    rows_affected &#x3D; do_query(<br>    “DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000”)<br>} while rows_affected &gt; 0</p><h3 id="分解大连接查询"><a href="#分解大连接查询" class="headerlink" title="分解大连接查询"></a>分解大连接查询</h3><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：</p><ul><li><p>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</p></li><li><p>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</p></li><li><p>减少锁竞争；</p></li><li><p>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。</p><ul><li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li></ul></li></ul><p>SELECT * FROM tag<br>JOIN tag_post ON tag_post.tag_id&#x3D;tag.id<br>JOIN post ON tag_post.post_id&#x3D;post.id<br>WHERE tag.tag&#x3D;’mysql’;</p><p>SELECT * FROM tag WHERE tag&#x3D;’mysql’;<br>SELECT * FROM tag_post WHERE tag_id&#x3D;1234;<br>SELECT * FROM post WHERE post.id IN (123,456,567,9098,8904);</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是指满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>事务最基本的莫过于 ACID 四个特性了，这四个特性分别是：</p><ul><li><p>Atomicity：原子性</p></li><li><p>Consistency：一致性</p></li><li><p>Isolation：隔离性</p></li><li><p>Durability：持久性</p></li></ul><p>原子性</p><p>事务被视为不可分割的最小单元，事务的所有操作要么全部成功，要么全部失败回滚。</p><p>一致性</p><p>数据库在事务执行前后都保持一致性状态，在一致性状态下，所有事务对一个数据的读取结果都是相同的。</p><p>隔离性</p><p>一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p><p>持久性</p><p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢。</p><h2 id="ACID-之间的关系"><a href="#ACID-之间的关系" class="headerlink" title="ACID 之间的关系"></a>ACID 之间的关系</h2><p>事务的 ACID 特性概念很简单，但不好理解，主要是因为这几个特性不是一种平级关系：</p><ul><li><p>只有满足一致性，事务的结果才是正确的。</p></li><li><p>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</p></li><li><p>事务满足持久化是为了能应对数据库崩溃的情况。</p></li></ul><p><img src="https://pic4.zhimg.com/80/v2-48a95374d5c88247a4ed19569e250b7f_720w.jpg"></p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>未提交读（READ UNCOMMITTED）</p><p>事务中的修改，即使没有提交，对其他事务也是可见的。</p><p>提交读（READ COMMITTED）</p><p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其他事务是不可见的。</p><p>可重复读（REPEATABLE READ）</p><p>保证在同一个事务中多次读取同样数据的结果是一样的。</p><p>可串行化（SERIALIZABLE）</p><p>强制事务串行执行。</p><p>需要加锁实现，而其它隔离级别通常不需要。</p><p>ble data-draft-node&#x3D;”block” data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>锁是数据库系统区别于文件系统的一个关键特性。锁机制用于管理对共享资源的并发访问。</p><h3 id="锁类型"><a href="#锁类型" class="headerlink" title="锁类型"></a>锁类型</h3><p>共享锁（S Lock）</p><p>允许事务读一行数据</p><p>排他锁（X Lock）</p><p>允许事务删除或者更新一行数据</p><p>意向共享锁（IS Lock）</p><p>事务想要获得一张表中某几行的共享锁</p><p>意向排他锁</p><p>事务想要获得一张表中某几行的排他锁</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>版本号</p><ul><li><p>系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</p></li><li><p>事务版本号：事务开始时的系统版本号。</p></li></ul><p>隐藏的列</p><p>MVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：</p><ul><li><p>创建版本号：指示创建一个数据行的快照时的系统版本号；</p></li><li><p>删除版本号：如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除了。</p></li></ul><p>Undo 日志</p><p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。</p><p><img src="https://pic2.zhimg.com/80/v2-26ed1887aa929f82cce060accf1c232d_720w.jpg"></p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>以下实现过程针对可重复读隔离级别。</p><p>当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。</p><p>SELECT</p><p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p><p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于等于 T 的版本号，因为如果大于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须是未定义或者大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p><p>INSERT</p><p>将当前系统版本号作为数据行快照的创建版本号。</p><p>DELETE</p><p>将当前系统版本号作为数据行快照的删除版本号。</p><p>UPDATE</p><p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p><h3 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h3><p>在可重复读级别中，通过MVCC机制，虽然让数据变得可重复读，但我们读到的数据可能是历史数据，是不及时的数据，不是数据库当前的数据！这在一些对于数据的时效特别敏感的业务中，就很可能出问题。</p><p>对于这种读取历史数据的方式，我们叫它快照读 (snapshot read)，而读取数据库当前版本数据的方式，叫当前读 (current read)。很显然，在MVCC中：</p><p>快照读</p><p>MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。</p><p>select * from table ….;</p><p>当前读</p><p>MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。</p><p>INSERT;<br>UPDATE;<br>DELETE;</p><p>在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。</p><p>- select * from table where ? lock in share mode;</p><ul><li>select * from table where ? for update;</li></ul><p>事务的隔离级别实际上都是定义的当前读的级别，MySQL为了减少锁处理（包括等待其它锁）的时间，提升并发能力，引入了快照读的概念，使得select不用加锁。而update、insert这些“当前读”的隔离性，就需要通过加锁来实现了。</p><h2 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h2><h3 id="Record-Lock"><a href="#Record-Lock" class="headerlink" title="Record Lock"></a>Record Lock</h3><p>锁定一个记录上的索引，而不是记录本身。</p><p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p><h3 id="Gap-Lock"><a href="#Gap-Lock" class="headerlink" title="Gap Lock"></a>Gap Lock</h3><p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p><p>SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;</p><h3 id="Next-Key-Lock"><a href="#Next-Key-Lock" class="headerlink" title="Next-Key Lock"></a>Next-Key Lock</h3><p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：</p><p>(-∞, 10]<br>(10, 11]<br>(11, 13]<br>(13, 20]<br>(20, +∞)</p><blockquote><p>在 InnoDB 存储引擎中，SELECT 操作的不可重复读问题通过 MVCC 得到了解决，而 UPDATE、DELETE 的不可重复读问题通过 Record Lock 解决，INSERT 的不可重复读问题是通过 Next-Key Lock（Record Lock + Gap Lock）解决的。  </p></blockquote><h2 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>脏读指的是不同事务下，当前事务可以读取到另外事务未提交的数据。</p><p>例如：</p><p>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。</p><p><img src="https://pic4.zhimg.com/80/v2-45bc5159953e5e31a1beff831889030b_720w.jpg"></p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读指的是同一事务内多次读取同一数据集合，读取到的数据是不一样的情况。</p><p>例如：</p><p>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><p><img src="https://pic2.zhimg.com/80/v2-3ba664819013c01ae1b5712e2ee5375d_720w.jpg"></p><p>在 InnoDB 存储引擎中，SELECT 操作的不可重复读问题通过 MVCC 得到了解决，而 UPDATE、DELETE 的不可重复读问题是通过 Record Lock 解决的，INSERT 的不可重复读问题是通过 Next-Key Lock（Record Lock + Gap Lock）解决的。</p><h3 id="Phantom-Proble（幻影读）"><a href="#Phantom-Proble（幻影读）" class="headerlink" title="Phantom Proble（幻影读）"></a>Phantom Proble（幻影读）</h3><blockquote><p>The so-called phantom problem occurs within a transaction when the same query produces different sets of rows at different times. For example, if a SELECT is executed twice, but returns a row the second time that was not returned the first time, the row is a “phantom” row.  </p></blockquote><p>Phantom Proble 是指在同一事务下，连续执行两次同样的 sql 语句可能返回不同的结果，第二次的 sql 语句可能会返回之前不存在的行。</p><p>幻影读是一种特殊的不可重复读问题。</p><h3 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h3><p>一个事务的更新操作会被另一个事务的更新操作所覆盖。</p><p>例如：</p><p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p><p><img src="https://pic1.zhimg.com/80/v2-21808e8e2b9a88c0648e264b4914fb24_720w.jpg"></p><p>这类型问题可以通过给 SELECT 操作加上排他锁来解决，不过这可能会引入性能问题，具体使用要视业务场景而定。</p><h2 id="分库分表数据切分"><a href="#分库分表数据切分" class="headerlink" title="分库分表数据切分"></a>分库分表数据切分</h2><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p><p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p><p><img src="https://pic2.zhimg.com/80/v2-a6c9ecaad9ef9439fe1dda307aa40f65_720w.jpg"></p><h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分是将一张表按列分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直气氛将经常被使用的列喝不经常被使用的列切分到不同的表中。</p><p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不通的库中，例如将原来电商数据部署库垂直切分称商品数据库、用户数据库等。</p><p><img src="https://pic1.zhimg.com/80/v2-e88499e975a2b10130106db63007f268_720w.jpg"></p><h3 id="Sharding-策略"><a href="#Sharding-策略" class="headerlink" title="Sharding 策略"></a>Sharding 策略</h3><ul><li><p>哈希取模：hash(key)%N</p></li><li><p>范围：可以是 ID 范围也可以是时间范围</p></li><li><p>映射表：使用单独的一个数据库来存储映射关系</p></li></ul><h3 id="Sharding-存在的问题"><a href="#Sharding-存在的问题" class="headerlink" title="Sharding 存在的问题"></a>Sharding 存在的问题</h3><p>事务问题</p><p>使用分布式事务来解决，比如 XA 接口</p><p>连接</p><p>可以将原来的连接分解成多个单表查询，然后在用户程序中进行连接。</p><p>唯一性</p><ul><li><p>使用全局唯一 ID （GUID）</p></li><li><p>为每个分片指定一个 ID 范围</p></li><li><p>分布式 ID 生成器（如 Twitter 的 Snowflake 算法）</p></li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>主要涉及三个线程：binlog 线程、I&#x2F;O 线程和 SQL 线程。</p><ul><li><p>binlog 线程 ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</p></li><li><p>I&#x2F;O 线程 ：负责从主服务器上读取- 二进制日志，并写入从服务器的中继日志（Relay log）。</p></li><li><p>SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</p></li></ul><p><img src="https://pic3.zhimg.com/80/v2-9f7a2dbcb62f5720cff38407e1f85c82_720w.jpg"></p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><p>读写分离能提高性能的原因在于：</p><ul><li><p>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</p></li><li><p>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</p></li><li><p>增加冗余，提高可用性。</p></li></ul><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><p><img src="https://pic3.zhimg.com/80/v2-9786e5aa2a6e5f4e3ac514b55825e40e_720w.jpg"></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote><p>在实际业务中经常会使用到 JSON 数据类型，在查询过程中主要有两种使用需求：  </p></blockquote><ol><li><p>在 where 条件中有通过 json 中的某个字段去过滤返回结果的需求</p></li><li><p>查询 json 字段中的部分字段作为返回结果（减少内存占用）</p></li></ol><h3 id="JSON-CONTAINS"><a href="#JSON-CONTAINS" class="headerlink" title="JSON_CONTAINS"></a>JSON_CONTAINS</h3><p>JSON_CONTAINS(target, candidate[, path])</p><p>如果在 json 字段 target 指定的位置 path，找到了目标值 condidate，返回 1，否则返回 0</p><p>如果只是检查在指定的路径是否存在数据，使用JSON_CONTAINS_PATH()</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; SET \@j = <span class="hljs-emphasis">&#x27;\&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: \&#123;&quot;d&quot;: 4\&#125;\&#125;&#x27;</span>;<br>mysql&gt; SET \@j2 = <span class="hljs-emphasis">&#x27;1&#x27;</span>;<br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.a&#x27;\);</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.a&#x27;\) |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">|                             1 |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.b&#x27;\);</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.b&#x27;\) |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">|                             0 |</span><br><span class="hljs-section">+-------------------------------+</span><br><br>mysql&gt; SET \@j2 = <span class="hljs-emphasis">&#x27;\&#123;&quot;d&quot;: 4\&#125;&#x27;</span>;<br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.a&#x27;\);</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.a&#x27;\) |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">|                             0 |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.c&#x27;\);</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\(\@j, \@j2, &#x27;\$.c&#x27;\) |</span><br><span class="hljs-section">+-------------------------------+</span><br><span class="hljs-section">|                             1 |</span><br><span class="hljs-section">+-------------------------------+</span><br></code></pre></td></tr></table></figure><h3 id="JSON-CONTAINS-PATH"><a href="#JSON-CONTAINS-PATH" class="headerlink" title="JSON_CONTAINS_PATH"></a>JSON_CONTAINS_PATH</h3><p>JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] …)</p><p>如果在指定的路径存在数据返回 1，否则返回 0</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; SET \@j = <span class="hljs-emphasis">&#x27;\&#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: \&#123;&quot;d&quot;: 4\&#125;\&#125;&#x27;</span>;<br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.a&#x27;, &#x27;\$.e&#x27;\);</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.a&#x27;, &#x27;\$.e&#x27;\) |</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">|                                           1 |</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\_PATH\(\@j, &#x27;all&#x27;, &#x27;\$.a&#x27;, &#x27;\$.e&#x27;\);</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\_PATH\(\@j, &#x27;all&#x27;, &#x27;\$.a&#x27;, &#x27;\$.e&#x27;\) |</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">|                                           0 |</span><br><span class="hljs-section">+---------------------------------------------+</span><br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.c.d&#x27;\);</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.c.d&#x27;\) |</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">|                                      1 |</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">mysql&gt; SELECT JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.a.d&#x27;\);</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">| JSON\_CONTAINS\_PATH\(\@j, &#x27;one&#x27;, &#x27;\$.a.d&#x27;\) |</span><br><span class="hljs-section">+----------------------------------------+</span><br><span class="hljs-section">|                                      0 |</span><br><span class="hljs-section">+----------------------------------------+</span><br></code></pre></td></tr></table></figure><p>实际使用：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\$</span>conds = new Criteria<span class="hljs-symbol">\(</span><span class="hljs-symbol">\)</span>;<br><span class="hljs-symbol">\$</span>conds-&gt;andWhere<span class="hljs-symbol">\(</span>&#x27;dept\_code&#x27;, &#x27;in&#x27;, <span class="hljs-symbol">\$</span>deptCodes<span class="hljs-symbol">\)</span>;<br>if <span class="hljs-symbol">\(</span>\!empty<span class="hljs-symbol">\(</span><span class="hljs-symbol">\$</span>aoiAreaId<span class="hljs-symbol">\)</span><span class="hljs-symbol">\)</span> \&#123;<br>    <span class="hljs-symbol">\$</span>aoiAreaIdCond = new Criteria<span class="hljs-symbol">\(</span><span class="hljs-symbol">\)</span>;<br>    <span class="hljs-symbol">\$</span>aoiAreaIdCond-&gt;orWhere<span class="hljs-symbol">\(</span>&quot;JSON\_CONTAINS\_PATH<span class="hljs-symbol">\(</span>new\_aoi\_area\_ids,&#x27;one&#x27;, &#x27;<span class="hljs-symbol">\$</span>.<span class="hljs-symbol">\\</span>&quot;<span class="hljs-symbol">\$</span>aoiAreaId<span class="hljs-symbol">\\</span>&quot;&#x27;<span class="hljs-symbol">\)</span>&quot;, &#x27;=&#x27;, 1<span class="hljs-symbol">\)</span>;<br>    <span class="hljs-symbol">\$</span>aoiAreaIdCond-&gt;orWhere<span class="hljs-symbol">\(</span>&quot;JSON\_CONTAINS\_PATH<span class="hljs-symbol">\(</span>old\_aoi\_area\_ids,&#x27;one&#x27;, &#x27;<span class="hljs-symbol">\$</span>.<span class="hljs-symbol">\\</span>&quot;<span class="hljs-symbol">\$</span>aoiAreaId<span class="hljs-symbol">\\</span>&quot;&#x27;<span class="hljs-symbol">\)</span>&quot;, &#x27;=&#x27;, 1<span class="hljs-symbol">\)</span>;<br>    <span class="hljs-symbol">\$</span>conds-&gt;andWhere<span class="hljs-symbol">\(</span><span class="hljs-symbol">\$</span>aoiAreaIdCond<span class="hljs-symbol">\)</span>;<br>\&#125;<br></code></pre></td></tr></table></figure><h3 id="column-gt-path、column-gt-gt-path"><a href="#column-gt-path、column-gt-gt-path" class="headerlink" title="column-&gt;path、column-&gt;&gt;path"></a>column-&gt;path、column-&gt;&gt;path</h3><p>获取指定路径的值</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">\-&gt; vs \-&gt;&gt;<br><br>Whereas the \-&gt; operator simply extracts a value, the \-&gt;&gt; operator in addition unquotes the extracted result.<br><br><span class="hljs-section">mysql&gt; SELECT \* FROM jemp WHERE g &gt; 2;</span><br><span class="hljs-section">+-------------------------------+------+</span><br><span class="hljs-section">| c                             | g    |</span><br><span class="hljs-section">+-------------------------------+------+</span><br>| \&#123;&quot;id&quot;: &quot;3&quot;, &quot;name&quot;: &quot;Barney&quot;\&#125; |    3 |<br><span class="hljs-section">| \&#123;&quot;id&quot;: &quot;4&quot;, &quot;name&quot;: &quot;Betty&quot;\&#125;  |    4 |</span><br><span class="hljs-section">+-------------------------------+------+</span><br>2 rows in set \(0.01 sec\)<br><br>mysql&gt; SELECT c-&gt;<span class="hljs-emphasis">&#x27;\$.name&#x27;</span> AS name<br><span class="hljs-section">    -&gt;     FROM jemp WHERE g &gt; 2;</span><br><span class="hljs-section">+----------+</span><br><span class="hljs-section">| name     |</span><br><span class="hljs-section">+----------+</span><br>| &quot;Barney&quot; |<br><span class="hljs-section">| &quot;Betty&quot;  |</span><br><span class="hljs-section">+----------+</span><br>2 rows in set \(0.00 sec\)<br><br>mysql&gt; SELECT JSON\_UNQUOTE\(c-&gt;<span class="hljs-emphasis">&#x27;\$.name&#x27;</span>\) AS name<br><span class="hljs-section">    -&gt;     FROM jemp WHERE g &gt; 2;</span><br><span class="hljs-section">+--------+</span><br><span class="hljs-section">| name   |</span><br><span class="hljs-section">+--------+</span><br>| Barney |<br><span class="hljs-section">| Betty  |</span><br><span class="hljs-section">+--------+</span><br>2 rows in set \(0.00 sec\)<br><br>mysql&gt; SELECT c-&gt;&gt;<span class="hljs-emphasis">&#x27;\$.name&#x27;</span> AS name<br><span class="hljs-section">    -&gt;     FROM jemp WHERE g &gt; 2;</span><br><span class="hljs-section">+--------+</span><br><span class="hljs-section">| name   |</span><br><span class="hljs-section">+--------+</span><br>| Barney |<br><span class="hljs-section">| Betty  |</span><br><span class="hljs-section">+--------+</span><br>2 rows in set \(0.00 sec\)<br></code></pre></td></tr></table></figure><p>实际使用：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sml">\$retTask = <span class="hljs-type">AoiAreaTaskOrm</span>::findRows\(\[<span class="hljs-symbol">&#x27;status&#x27;</span>, <span class="hljs-symbol">&#x27;extra</span>\_info-&gt;&gt;<span class="hljs-string">&quot;\$.new\_aoi\_area\_infos&quot;</span> <span class="hljs-keyword">as</span> new\_aoi\_area\_infos&#x27;, <span class="hljs-symbol">&#x27;extra</span>\_info-&gt;&gt;<span class="hljs-string">&quot;\$.old\_aoi\_area\_infos&quot;</span> <span class="hljs-keyword">as</span> old\_aoi\_area\_infos&#x27;\], \$cond\);<br></code></pre></td></tr></table></figure><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p><p>如果 {A1，A2，… ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p><p>对于 A-&gt;B，如果能找到 A 的真子集 A’，使得 A’-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p><p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>以下的学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p><p>ble data-draft-node&#x3D;”block”data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p><ul><li><p>冗余数据：例如 <code>学生-2</code> 出现了两次。</p></li><li><p>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</p></li><li><p>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。</p></li><li><p>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</p></li></ul><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>范式理论是为了解决以上提到四种异常。</p><p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式 (1NF)"></a>第一范式 (1NF)</h3><p>属性不可分。</p><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式 (2NF)"></a>第二范式 (2NF)</h3><p>每个非主属性完全函数依赖于键码。</p><p>可以通过分解来满足。</p><p>分解前</p><p>ble data-draft-node&#x3D;”block”data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p><ul><li><p>Sno -&gt; Sname, Sdept</p></li><li><p>Sdept -&gt; Mname</p></li><li><p>Sno, Cname-&gt; Grade</p></li></ul><p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p><p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p><p>分解后</p><p>关系-1</p><p>ble data-draft-node&#x3D;”block” data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><p>有以下函数依赖：</p><ul><li><p>Sno -&gt; Sname, Sdept</p></li><li><p>Sdept -&gt; Mname</p></li></ul><p>关系-2</p><p>ble data-draft-node&#x3D;”block” data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><p>有以下函数依赖：</p><ul><li>Sno, Cname -&gt; Grade</li></ul><h3 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式 (3NF)"></a>第三范式 (3NF)</h3><p>非主属性不传递函数依赖于键码。</p><p>上面的 关系-1 中存在以下传递函数依赖：</p><ul><li>Sno -&gt; Sdept -&gt; Mname</li></ul><p>可以进行以下分解：</p><p>关系-11</p><p>ble data-draft-node&#x3D;”block” data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><p>关系-12</p><p>ble data-draft-node&#x3D;”block” data-draft-type&#x3D;”table” data-size&#x3D;”normal” data-row-style&#x3D;”normal”&gt;</p><h3 id="ER-图"><a href="#ER-图" class="headerlink" title="ER 图"></a>ER 图</h3><p>Entity-Relationship，有三个组成部分：实体、属性、联系。</p><p>用来进行关系型数据库系统的概念设计。</p><h3 id="实体的三种联系"><a href="#实体的三种联系" class="headerlink" title="实体的三种联系"></a>实体的三种联系</h3><p>包含一对一，一对多，多对多三种。</p><ul><li><p>如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；</p></li><li><p>如果是一对一，画两个带箭头的线段；</p></li><li><p>如果是多对多，画两个不带箭头的线段。</p></li></ul><p>下图的 Course 和 Student 是一对多的关系。</p><p><img src="https://pic3.zhimg.com/80/v2-417dcb80dfb273f93012a8bc7c95fbfa_720w.jpg"></p><h3 id="表示出现多次的关系"><a href="#表示出现多次的关系" class="headerlink" title="表示出现多次的关系"></a>表示出现多次的关系</h3><p>一个实体在联系出现几次，就要用几条线连接。</p><p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p><p><img src="https://pic4.zhimg.com/80/v2-a34e7063c243a1b8ffe53911300d5057_720w.jpg"></p><h3 id="联系的多向性"><a href="#联系的多向性" class="headerlink" title="联系的多向性"></a>联系的多向性</h3><p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p><p><img src="https://pic4.zhimg.com/80/v2-ec2b1f26121ca652dedea515b793fe43_720w.jpg"></p><h3 id="表示子类"><a href="#表示子类" class="headerlink" title="表示子类"></a>表示子类</h3><p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p><p><img src="https://pic3.zhimg.com/80/v2-fc103da3aad081581c0d259f87f501ae_720w.jpg"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>姜承尧. MySQL 技术内幕: InnoDB 存储引擎 [M]. 机械工业出版社, 2011.</p></li><li><p><a href="https://link.zhihu.com/?target=https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md">CS-Notes-MySQL</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/B%252B_tree">B+ tree</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://www.cnblogs.com/charlesblc/p/5987812.html">红黑树、B(+)树、跳表、AVL等数据结构，应用场景及分析，以及一些英文缩写</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://www.cnblogs.com/chengdabelief/p/7384691.html">B树、B+树、红黑树、AVL树比较</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://dev.mysql.com/doc/refman/8.0/en/explain-output.html%23explain-join-types">8.8.2 EXPLAIN Output Format</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://mengkang.net/1124.html">最官方的 mysql explain type 字段解读</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html">12.18.3 Functions That Search JSON Values</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/265575385">转载地址</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql去重sql</title>
    <link href="/2022/12/10/Mysql%E5%8E%BB%E9%87%8Dsql/"/>
    <url>/2022/12/10/Mysql%E5%8E%BB%E9%87%8Dsql/</url>
    
    <content type="html"><![CDATA[<p>替换变量table_name 和 group_by</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span><br>$&#123;<span class="hljs-built_in">table_name</span>&#125;<br><span class="hljs-keyword">WHERE</span> ID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span><br>*<br><span class="hljs-keyword">FROM</span><br>(<br><span class="hljs-keyword">SELECT</span><br>Max(ID)<br><span class="hljs-keyword">FROM</span><br>    $&#123;<span class="hljs-built_in">table_name</span>&#125;<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>$&#123;group_by&#125;<br><br>    ) bb<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中Mybatis枚举翻译插件实现</title>
    <link href="/2022/12/10/Mybatis%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0,%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/12/10/Mybatis%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0,%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="开发目的"><a href="#开发目的" class="headerlink" title="开发目的"></a>开发目的</h3><p>新项目中类似状态值都是使用数据库的KEY:VALUE替代的.发现同事都是每次都是自己去数据库查出来,然后循环对比值…</p><span id="more"></span><h3 id="开发目的-1"><a href="#开发目的-1" class="headerlink" title="开发目的"></a>开发目的</h3><blockquote><p>新项目中类似状态值都是使用数据库的KEY:VALUE替代的.发现同事都是每次都是自己去数据库查出来,然后循环对比值.<br>或者是给前端提供枚举查询接口,然后前端遍历.非常麻烦.<br>所以使用Mybatis插件替代这个重复性工作.<br>开发完毕后,发现Mybatis有类型转换器,但是和项目现在的现象出入挺大.以下介绍以下插件的开发.之后还发现和PageHepler冲突,修复了一番.</p></blockquote><h3 id="插件配置到spring容器中"><a href="#插件配置到spring容器中" class="headerlink" title="插件配置到spring容器中"></a>插件配置到spring容器中</h3><blockquote><p>此处有点坑,起初按照容器初始化加入到容器的方式.但是与Springboot的Mybatis的PagerHepler的starter顺序不好控制.导致插件的加载顺序不一致.由于分页插件的拦截顺序严格控制.如果拦截相同的地方就会导致分页插件总计失效.所以采用以下方式,采用容器启动后,加入到Mybatis拦截中的最后一个位置:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置枚举翻译插件</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年04月28日 15:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPluginConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> List&lt;SqlSessionFactory&gt; sqlSessionFactoryList;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sqlSessionFactoryList.iterator();<br>        <span class="hljs-keyword">while</span> (var3.hasNext()) &#123;<br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> (SqlSessionFactory) var3.next();<br>            sqlSessionFactory.getConfiguration().addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBatisEnumHandlePlugin</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="插件开发代码"><a href="#插件开发代码" class="headerlink" title="插件开发代码"></a>插件开发代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理枚举字段</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年04月28日 14:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(type = ResultSetHandler.class, method = &quot;handleResultSets&quot;, args = Statement.class)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisEnumHandlePlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">DefaultResultSetHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> (DefaultResultSetHandler) invocation.getTarget();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> invocation.proceed();<br>        <span class="hljs-keyword">if</span> (proceed <span class="hljs-keyword">instanceof</span> List) &#123;<br>            <span class="hljs-type">List</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (List) proceed;<br>            <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> proceed;<br>            &#125;<br>            <span class="hljs-comment">// 对第一个对象进行分析</span><br>            List&lt;Map&lt;String, Object&gt;&gt; translationInformation = getTranslationInformation(data.get(<span class="hljs-number">0</span>).getClass());<br>            <span class="hljs-comment">// 如果没有字典标识,直接返回</span><br>            <span class="hljs-keyword">if</span> (translationInformation.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> proceed;<br>            &#125;<br><br>            <span class="hljs-comment">// 遍历结果进行设置翻译值</span><br>            <span class="hljs-keyword">for</span> (Object datum : data) &#123;<br>                <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; info : translationInformation) &#123;<br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">readField</span> <span class="hljs-operator">=</span> (Field) info.get(<span class="hljs-string">&quot;read&quot;</span>);<br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">writeField</span> <span class="hljs-operator">=</span> (Field) info.get(<span class="hljs-string">&quot;write&quot;</span>);<br>                    <span class="hljs-type">Map</span> <span class="hljs-variable">dictValues</span> <span class="hljs-operator">=</span> (Map) info.get(<span class="hljs-string">&quot;value&quot;</span>);<br>                    FieldUtils.writeField(writeField, datum, dictValues.get(readField.get(datum)), <span class="hljs-literal">true</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> Plugin.wrap(o, <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过类,获取需要翻译的字段信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cls</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">getTranslationInformation</span><span class="hljs-params">(Class&lt;?&gt; cls)</span> &#123;<br>        <span class="hljs-comment">// 查询字典值service</span><br>        <span class="hljs-type">ISysDictSV</span> <span class="hljs-variable">sysDictSV</span> <span class="hljs-operator">=</span> SpringUtil.getObject(ISysDictSV.class);<br>        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;DictField&gt; dicts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        getAllDictAnnotation(cls, dicts);<br>        <span class="hljs-keyword">if</span> (dicts.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-comment">// 开始填充Field</span><br>        <span class="hljs-keyword">for</span> (DictField dictField : dicts) &#123;<br>            <span class="hljs-keyword">if</span> (dictField.enumClass().equals(DictEnum.class)) &#123;<br>                <span class="hljs-comment">// 如果是父类枚举直接返回</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 字典读写翻译信息存储</span><br>            Map&lt;String, Object&gt; fieldInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">toField</span> <span class="hljs-operator">=</span> dictField.to();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(toField)) &#123;<br>                <span class="hljs-comment">//如果没有设置，默认为From()+Name</span><br>                toField = dictField.from() + <span class="hljs-string">&quot;Name&quot;</span>;<br>            &#125;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">readField</span> <span class="hljs-operator">=</span> FieldUtils.getField(cls, dictField.from(), <span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">writeField</span> <span class="hljs-operator">=</span> FieldUtils.getField(cls, toField, <span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">dictValues</span> <span class="hljs-operator">=</span> sysDictSV.getDictValues(dictField.enumClass(), dictField.codeType());<br>            <span class="hljs-keyword">if</span> (readField == <span class="hljs-literal">null</span> || writeField == <span class="hljs-literal">null</span> || dictValues == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            fieldInfo.put(<span class="hljs-string">&quot;read&quot;</span>, readField);<br>            fieldInfo.put(<span class="hljs-string">&quot;write&quot;</span>, writeField);<br>            fieldInfo.put(<span class="hljs-string">&quot;value&quot;</span>, dictValues);<br>            list.add(fieldInfo);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取所有的字典注解</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cls    类信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fields 存放值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllDictAnnotation</span><span class="hljs-params">(Class&lt;?&gt; cls, List&lt;DictField&gt; fields)</span> &#123;<br>        <span class="hljs-type">DictEntity</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> cls.getAnnotation(DictEntity.class);<br>        <span class="hljs-comment">// 加入注解</span><br>        <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>            DictField[] value = annotation.value();<br>            fields.addAll(Arrays.asList(value));<br>        &#125;<br>        <span class="hljs-comment">// 继续往上找</span><br>        <span class="hljs-keyword">if</span> (cls.getSuperclass() != <span class="hljs-literal">null</span> &amp;&amp; cls.getSuperclass() != BaseSearchModel.class &amp;&amp; cls.getSuperclass() != Object.class) &#123;<br>            getAllDictAnnotation(cls.getSuperclass(), fields);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举翻译注解"><a href="#枚举翻译注解" class="headerlink" title="枚举翻译注解"></a>枚举翻译注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 标识是一个含有数据字典的实体</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年04月28日 12:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> DictEntity &#123;<br>    DictField[] value();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 标识是一个含有数据字典的实体</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 李涛</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 2019年04月28日 12:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Repeatable(value = DictEntity.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> DictField &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 要翻译的字段名称</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">from</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 翻译到哪个字段.默认为from()+Name,可以自定义</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">to</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 枚举类</span><br><span class="hljs-comment">     */</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DictEnum</span>&gt; enumClass();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * code类型</span><br><span class="hljs-comment">     */</span><br>    Class <span class="hljs-title function_">codeType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> String.class;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>轮子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java根据文件流准确判定文件类型</title>
    <link href="/2022/12/10/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/12/10/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..</p><span id="more"></span><p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀判断的。而是通过文件本身的二进制数据，软件来解析到底一定的目的。话不多说上代码，通过判断文件流的前几个字节，来判断文件的类型。可以自己添加新的类型，类型不一定对，可以自己调试调整一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ym.common.utils.qiniu;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTypeHelper</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; FILE_TYPE_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">FileTypeHelper</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-comment">//初始化文件类型信息</span><br>getAllFileType();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created on 2010-7-1</span><br><span class="hljs-comment"> * &lt;p&gt;Discription:[getAllFileType,常见文件头信息]&lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>:[shixing_11@sina.com]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFileType</span><span class="hljs-params">()</span> &#123;<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;FFD8FF&quot;</span>); <span class="hljs-comment">//JPEG (jpg)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;89504E47&quot;</span>);  <span class="hljs-comment">//PNG (png)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;47494638&quot;</span>);  <span class="hljs-comment">//GIF (gif)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;tif&quot;</span>, <span class="hljs-string">&quot;49492A00&quot;</span>);  <span class="hljs-comment">//TIFF (tif)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;bmp&quot;</span>, <span class="hljs-string">&quot;424D&quot;</span>); <span class="hljs-comment">//Windows Bitmap (bmp)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;dwg&quot;</span>, <span class="hljs-string">&quot;41433130&quot;</span>); <span class="hljs-comment">//CAD (dwg)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;68746D6C3E&quot;</span>);  <span class="hljs-comment">//HTML (html)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;rtf&quot;</span>, <span class="hljs-string">&quot;7B5C727466&quot;</span>);  <span class="hljs-comment">//Rich Text Format (rtf)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;xml&quot;</span>, <span class="hljs-string">&quot;3C3F786D6C&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;zip&quot;</span>, <span class="hljs-string">&quot;504B03041400000008005959104FFE4A759FF1&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;rar&quot;</span>, <span class="hljs-string">&quot;52617221&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;psd&quot;</span>, <span class="hljs-string">&quot;38425053&quot;</span>);  <span class="hljs-comment">//Photoshop (psd)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;eml&quot;</span>, <span class="hljs-string">&quot;44656C69766572792D646174653A&quot;</span>);  <span class="hljs-comment">//Email [thorough only] (eml)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;dbx&quot;</span>, <span class="hljs-string">&quot;CFAD12FEC5FD746F&quot;</span>);  <span class="hljs-comment">//Outlook Express (dbx)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;pst&quot;</span>, <span class="hljs-string">&quot;2142444E&quot;</span>);  <span class="hljs-comment">//Outlook (pst)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;xls&quot;</span>, <span class="hljs-string">&quot;D0CF11E0A1B11AE1000000000000000000000000000000003B&quot;</span>);  <span class="hljs-comment">//MS Word</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;xlsx&quot;</span>, <span class="hljs-string">&quot;504B03041400060008000000210097454E26A&quot;</span>);  <span class="hljs-comment">//MS Word</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;docx&quot;</span>, <span class="hljs-string">&quot;504B030414000600080000002100DFA4D26C5A&quot;</span>);  <span class="hljs-comment">//MS Excel 注意：word 和 excel的文件头一样</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;pptx&quot;</span>, <span class="hljs-string">&quot;504B030414000600080000002100DFCC18F5AD&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000001&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;ppt&quot;</span>, <span class="hljs-string">&quot;D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000003&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;mdb&quot;</span>, <span class="hljs-string">&quot;5374616E64617264204A&quot;</span>);  <span class="hljs-comment">//MS Access (mdb)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;wpd&quot;</span>, <span class="hljs-string">&quot;FF575043&quot;</span>); <span class="hljs-comment">//WordPerfect (wpd)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;eps&quot;</span>, <span class="hljs-string">&quot;252150532D41646F6265&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;ps&quot;</span>, <span class="hljs-string">&quot;252150532D41646F6265&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;pdf&quot;</span>, <span class="hljs-string">&quot;255044462D312E&quot;</span>);  <span class="hljs-comment">//Adobe Acrobat (pdf)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;qdf&quot;</span>, <span class="hljs-string">&quot;AC9EBD8F&quot;</span>);  <span class="hljs-comment">//Quicken (qdf)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;pwl&quot;</span>, <span class="hljs-string">&quot;E3828596&quot;</span>);  <span class="hljs-comment">//Windows Password (pwl)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;wav&quot;</span>, <span class="hljs-string">&quot;57415645,52494646&quot;</span>);  <span class="hljs-comment">//Wave (wav)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;avi&quot;</span>, <span class="hljs-string">&quot;41564920&quot;</span>);<br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;ram&quot;</span>, <span class="hljs-string">&quot;2E7261FD&quot;</span>);  <span class="hljs-comment">//Real Audio (ram)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;rm&quot;</span>, <span class="hljs-string">&quot;2E524D46&quot;</span>);  <span class="hljs-comment">//Real Media (rm)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;mpg&quot;</span>, <span class="hljs-string">&quot;000001BA&quot;</span>);  <span class="hljs-comment">//</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;mov&quot;</span>, <span class="hljs-string">&quot;6D6F6F76&quot;</span>);  <span class="hljs-comment">//Quicktime (mov)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;asf&quot;</span>, <span class="hljs-string">&quot;3026B2758E66CF11&quot;</span>); <span class="hljs-comment">//Windows Media (asf)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;mid&quot;</span>, <span class="hljs-string">&quot;4D546864&quot;</span>);  <span class="hljs-comment">//MIDI (mid)</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;aac&quot;</span>, <span class="hljs-string">&quot;FFF15C4013&quot;</span>);  <span class="hljs-comment">//aac语音</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;mp3&quot;</span>, <span class="hljs-string">&quot;FFE368&quot;</span>);  <span class="hljs-comment">//mp3</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;webm&quot;</span>, <span class="hljs-string">&quot;1A45DFA39F42868101&quot;</span>);  <span class="hljs-comment">//webm</span><br>FILE_TYPE_MAP.put(<span class="hljs-string">&quot;m4a&quot;</span>, <span class="hljs-string">&quot;0000001C667479704D344120000000004D3441206D70&quot;</span>);  <span class="hljs-comment">//webm</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据文件判定流类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileTypeByFile</span><span class="hljs-params">(File file)</span> &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> getFileTypeByStream(is);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据流判定文件类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileTypeByStream</span><span class="hljs-params">(InputStream is)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">filetype</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">try</span> &#123;<br>is.read(b);<br>filetype = getFileTypeByByte(b);<br>is.close();<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> filetype;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created on 2010-7-1</span><br><span class="hljs-comment"> * &lt;p&gt;Discription:[getFileTypeByStream]&lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> fileType</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>:[shixing_11@sina.com]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileTypeByByte</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">filetypeHex</span> <span class="hljs-operator">=</span> String.valueOf(getFileHexString(b));<br>Iterator&lt;Entry&lt;String, String&gt;&gt; entryiterator = FILE_TYPE_MAP.entrySet().iterator();<br><span class="hljs-keyword">while</span> (entryiterator.hasNext()) &#123;<br>Entry&lt;String, String&gt; entry = entryiterator.next();<br><span class="hljs-type">String</span> <span class="hljs-variable">fileTypeHexValue</span> <span class="hljs-operator">=</span> entry.getValue();<br>String[] split = fileTypeHexValue.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">for</span> (String sufix : split) &#123;<br><span class="hljs-keyword">if</span> (filetypeHex.toUpperCase().startsWith(sufix)) &#123;<br><span class="hljs-keyword">return</span> entry.getKey();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;txt&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created on 2010-7-1</span><br><span class="hljs-comment"> * &lt;p&gt;Discription:[getFileHexString]&lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> fileTypeHex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>:[shixing_11@sina.com]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFileHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">byteLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-literal">null</span> || b.length &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b.length &lt; byteLength) &#123;<br>byteLength = b.length;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; byteLength; i++) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> b[i] &amp; <span class="hljs-number">0xFF</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">hv</span> <span class="hljs-operator">=</span> Integer.toHexString(v);<br><span class="hljs-keyword">if</span> (hv.length() &lt; <span class="hljs-number">2</span>) &#123;<br>stringBuilder.append(<span class="hljs-number">0</span>);<br>&#125;<br>stringBuilder.append(hv);<br>&#125;<br><span class="hljs-keyword">return</span> stringBuilder.toString();<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>轮子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件类型判断</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java排列组合算法</title>
    <link href="/2022/12/10/Java%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/12/10/Java%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>本算法场景在优惠券组合计算上，通过用户持有优惠券、计算出优惠券可用叠加的组合。算法已经抽象为通用的排列组合，拿下标计算。</p><span id="more"></span><h1 id="排列组合算法"><a href="#排列组合算法" class="headerlink" title="排列组合算法"></a>排列组合算法</h1><blockquote><p>本算法场景在优惠券组合计算上，通过用户持有优惠券、计算出优惠券可用叠加的组合。算法已经抽象为通用的排列组合，拿下标计算。</p></blockquote><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yamibuy.mkt.service.common.coupon;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.collection.CollectionUtil;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 优惠券组合数计算</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponCombSolution</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参与组合的集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; element;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参与组合的，元素和下标关系</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Integer&gt; elementIndexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冲突的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Set&lt;String&gt;&gt; conflictElement = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 冲突的元素下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; conflictElementIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参与组合的长度数，会拿下标组合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> elementNum;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最大组合数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxGroup;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CouponCombSolution</span><span class="hljs-params">(<span class="hljs-type">int</span> maxGroup, List&lt;String&gt; element, Map&lt;String, Set&lt;String&gt;&gt; conflictInfoMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxGroup = maxGroup;<br>        <span class="hljs-built_in">this</span>.element = element;<br>        <span class="hljs-built_in">this</span>.elementNum = element.size();<br><br>        <span class="hljs-comment">// 设置元素和下标关系</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.elementNum; i++) &#123;<br>            elementIndexMap.put(<span class="hljs-built_in">this</span>.element.get(i), i);<br>        &#125;<br><br>        <span class="hljs-comment">// 冲突的元素设置</span><br>        <span class="hljs-keyword">if</span> (conflictInfoMap != <span class="hljs-literal">null</span> &amp;&amp; !conflictInfoMap.isEmpty()) &#123;<br>            <span class="hljs-built_in">this</span>.conflictElement = conflictInfoMap;<br>            <span class="hljs-built_in">this</span>.conflictElement.forEach((elementOne, conflictElements) -&gt; &#123;<br>                <span class="hljs-comment">// 当前元素下标</span><br>                List&lt;Integer&gt; conflictElementsIndex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (String conflictElement : conflictElements) &#123;<br>                    conflictElementsIndex.add(elementIndexMap.get(conflictElement));<br>                &#125;<br>                <span class="hljs-built_in">this</span>.conflictElementIndex.put(elementIndexMap.get(elementOne), conflictElementsIndex);<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CouponCombSolution <span class="hljs-title function_">build</span><span class="hljs-params">(List&lt;String&gt; element, <span class="hljs-type">int</span> maxGroup, Map&lt;String, Set&lt;String&gt;&gt; conflictInfoMap)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponCombSolution</span>(maxGroup, element, conflictInfoMap);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算下标组合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">calcToIndex</span><span class="hljs-params">()</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; finalResult = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">32</span>);<br>        <span class="hljs-comment">// 串行计算</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">this</span>.maxGroup; i++) &#123;<br>            <span class="hljs-built_in">this</span>.combine(<span class="hljs-built_in">this</span>.elementNum, i, finalResult);<br>        &#125;<br>        <span class="hljs-keyword">return</span> finalResult;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算真实元素组合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">calcToElementToString</span><span class="hljs-params">()</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; calcToIndexList = <span class="hljs-built_in">this</span>.calcToIndex();<br>        List&lt;String&gt; calcToElementList = calcToIndexList.stream().map(index -&gt; index.stream().map(element::get).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>))<br>        ).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> calcToElementList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算真实元素组合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">calcToElement</span><span class="hljs-params">()</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; calcToIndexList = <span class="hljs-built_in">this</span>.calcToIndex();<br>        List&lt;List&lt;String&gt;&gt; calcToElementList = calcToIndexList.stream().map(index -&gt; index.stream().map(element::get).collect(Collectors.toList())<br>        ).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> calcToElementList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组合计算</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size     总长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupNum 组合数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> res      结果存放</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combine</span><span class="hljs-params">(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> groupNum, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;<br>        <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span> || groupNum &lt;= <span class="hljs-number">0</span> || size &lt; groupNum) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        generateCombinations(size, groupNum, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(groupNum), res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateCombinations</span><span class="hljs-params">(<span class="hljs-type">int</span> size, <span class="hljs-type">int</span> groupNum, <span class="hljs-type">int</span> start, List&lt;Integer&gt; list, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;<br>        <span class="hljs-comment">// 组合数达到</span><br>        <span class="hljs-keyword">if</span> (list.size() == groupNum) &#123;<br>            res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(list));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 超出</span><br>        <span class="hljs-keyword">if</span> (start &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> groupNum - (list.size());<br>        <span class="hljs-comment">//list当中最终应该有k个元素，当前元素为list.size() + 1，那么我们要为下次回溯留下足够多的数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= size - len; i++) &#123;<br>            <span class="hljs-comment">// 判断是否冲突</span><br>            <span class="hljs-keyword">if</span>(isConflict(list, i))&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            list.add(i);<br>            generateCombinations(size, groupNum, i + <span class="hljs-number">1</span>, list, res);<br>            list.remove(list.size() - <span class="hljs-number">1</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断当前要插入的元素下标是否冲突</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConflict</span><span class="hljs-params">(List&lt;Integer&gt; list, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span>(list.size() &gt; <span class="hljs-number">0</span> &amp;&amp; !conflictElementIndex.isEmpty())&#123;<br>            <span class="hljs-comment">// 获取要组合数字的冲突数组</span><br>            List&lt;Integer&gt; conflictElementIndexInfo = conflictElementIndex.get(i);<br>            <span class="hljs-keyword">if</span>(conflictElementIndexInfo!=<span class="hljs-literal">null</span> &amp;&amp; !conflictElementIndexInfo.isEmpty())&#123;<br>                <span class="hljs-comment">// 如果当前组合有包含冲突组合</span><br>                <span class="hljs-keyword">return</span> CollectionUtil.containsAny(list,conflictElementIndexInfo);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些常用的linux基础命令</title>
    <link href="/2022/12/10/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/12/10/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录</p><span id="more"></span><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>端口占用情况</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">lsof -i <span class="hljs-attr">tcp</span>:<span class="hljs-number">8000</span> </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">netstat -tunlp |grep <span class="hljs-number">8000</span></span><br></code></pre></td></tr></table></figure></li><li><p>列出所有端口</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">netstat -ntlp</span><br></code></pre></td></tr></table></figure></li><li><p>根据程序名找进程</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&gt; ps axu |<span class="hljs-keyword">grep</span> 程序名<span class="hljs-regexp">/端口号/I</span>P等等<br></code></pre></td></tr></table></figure></li><li><p>查询指定端口是否已开</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">&gt; firewall-<span class="hljs-keyword">cmd</span><span class="language-bash"> --query-port=666/tcp</span><br></code></pre></td></tr></table></figure></li><li><p>查看所有开放的端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&gt; iptables -t <span class="hljs-attribute">filter</span> -L <span class="hljs-selector-tag">INPUT</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><ul><li><p>查看防火墙状态</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">systemctl status firewalld</span><br></code></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">systemctl start firewalld</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">service firewalld start </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">##若遇到无法开启,先用：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">systemctl unmask firewalld.<span class="hljs-property">service</span> </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">然后：</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">systemctl start firewalld.<span class="hljs-property">service</span></span><br></code></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">systemctl stop firewalld</span><br></code></pre></td></tr></table></figure></li><li><p>对外开放端口</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">firewall-cmd --zone=public --add-port=<span class="hljs-number">8080</span>/tcp --permanent</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> iptables -I <span class="hljs-variable constant_">INPUT</span> -p tcp --dport <span class="hljs-number">9150</span> -j <span class="hljs-variable constant_">ACCEPT</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">##或者</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">sudo vi sysconfig/iptables</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">##然后</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">-A <span class="hljs-variable constant_">INPUT</span> -m state --state <span class="hljs-variable constant_">NEW</span> -m tcp -p tcp --dport <span class="hljs-number">9150</span> -j <span class="hljs-variable constant_">ACCEPT</span></span><br></code></pre></td></tr></table></figure></li><li><p>查看对外开放的端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&gt; iptables -t <span class="hljs-attribute">filter</span> -L <span class="hljs-selector-tag">INPUT</span><br></code></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">firewall-cmd --reload systemctl </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">restart firewalld.<span class="hljs-property">service</span>；</span><br></code></pre></td></tr></table></figure></li><li><p>关闭指定端口</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">&gt; <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">remove</span><span class="hljs-literal">-</span><span class="hljs-comment">port=123/tcp</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul><li><p>关键词查找</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">##执行的是返回的内容 </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">grep 正则 文件目录</span><br></code></pre></td></tr></table></figure></li><li><p>关键词查找及随后的目录中搜索字符串</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">grep -R 正则 文件目录</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h4><ul><li><p>hava后台启动</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-Xmx512m -<span class="hljs-keyword">jar </span>lamp-oauth-server.<span class="hljs-keyword">jar </span>&gt; gateway.log  <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>  &amp;<br><br></code></pre></td></tr></table></figure></li><li><p>查看JAVA进程并输出JVM参数</p></li></ul><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">jps -v</span><br></code></pre></td></tr></table></figure><ul><li><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&gt; jmap -<span class="hljs-keyword">dump</span>:live,format=b,<span class="hljs-keyword">file</span>=<span class="hljs-keyword">dump</span>.hprof <span class="hljs-number">28920</span><br></code></pre></td></tr></table></figure></li><li><p>jhat dump文件路径，在线查看对文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">屏幕显示“<span class="hljs-built_in">Server</span> is ready.” 的提示后， 用户在浏览器中键入 http:<span class="hljs-comment">//localhost:7000/就可以访问详情</span><br></code></pre></td></tr></table></figure></li><li><p>查看堆的使用情况</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">jmap -heap <span class="hljs-number">28920</span></span><br></code></pre></td></tr></table></figure></li><li><p>查看堆中的对象信息</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">jmap -<span class="hljs-attr">histo</span>:live <span class="hljs-number">28920</span> | more</span><br></code></pre></td></tr></table></figure></li><li><p>查看当前程序的线程快照</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"> jstack -l <span class="hljs-number">11494</span>|more</span><br></code></pre></td></tr></table></figure></li><li><p>实时查看调整Jvm参数</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">jinfo -flag <span class="hljs-number">11494</span></span><br></code></pre></td></tr></table></figure></li><li><p>查看最近10此的GC的情况，每2秒</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jstat</span> -gc <span class="hljs-number">1</span>  <span class="hljs-number">2000</span> <span class="hljs-number">10</span> |awk &#x27;&#123;print $<span class="hljs-number">13</span>,$<span class="hljs-number">14</span>,$<span class="hljs-number">15</span>,$<span class="hljs-number">16</span>,$<span class="hljs-number">17</span>&#125;&#x27;<br></code></pre></td></tr></table></figure></li><li><p>查看内存排行前20的数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jmap</span> – histo <span class="hljs-number">1196</span> | head -<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h4><ul><li><p>显示电脑以及操作系统的相关信息</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">uname -a </span><br></code></pre></td></tr></table></figure></li><li><p>正在运行的内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cat</span> /proc/version</span><br></code></pre></td></tr></table></figure></li><li><p>发行版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/issue</span><br></code></pre></td></tr></table></figure></li><li><p>环境变量</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&gt; vim <span class="hljs-regexp">/etc/</span>profile<br>&gt; <span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure></li><li><p>docker-compose 重新构建容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 构建指定容器</span><br>docker-compose up -d --no-deps --build &lt;service_name&gt;<br><br><span class="hljs-comment"># 构建所有</span><br>docker-compose up --force-recreate --build -d<br>-d                             在后台运行服务容器<br>–no-color                  不使用颜色来区分不同的服务的控制输出<br>–no-deps                  不启动服务所链接的容器<br>–force-recreate         强制重新创建容器，不能与–no-recreate同时使用<br>–no-recreate             如果容器已经存在，则不重新创建，不能与–force-recreate同时使用<br>–no-build                  不自动构建缺失的服务镜像<br>–build                       在启动容器前构建服务镜像<br>–abort-on-container-<span class="hljs-keyword">exit</span>      停止所有容器，如果任何一个容器被停止，不能与-d同时使用<br>-t, –timeout TIMEOUT          停止容器时候的超时（默认为<span class="hljs-number">10</span>秒）<br>–remove-orphans                 删除服务中没有在compose文件中定义的容器<br>–scale SERVICE=NUM          设置服务运行容器的个数，将覆盖在compose中通过scale指定的参数<br></code></pre></td></tr></table></figure></li></ul><h4 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h4><ul><li>合并不同分支的代码<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 合并代码</span><br>git merge --squash  lamp/<span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br><span class="hljs-comment"># 忽略验证</span><br>git commit --no-verify -m “XXX”<br></code></pre></td></tr></table></figure></li></ul><h4 id="maven相关"><a href="#maven相关" class="headerlink" title="maven相关"></a>maven相关</h4><ul><li><p>编译指定模块和他依赖的模块</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">clean <span class="hljs-keyword">package</span> -T <span class="hljs-number">1</span>C -DskipTests -Dmaven.<span class="hljs-keyword">compile</span>.fork=<span class="hljs-keyword">true</span> -Dmaven.test.skip=<span class="hljs-keyword">true</span> -pl lamp-gateway/lamp-gateway-server -am<br></code></pre></td></tr></table></figure></li><li><p>多线程加速构建多模块</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">clean <span class="hljs-keyword">package</span> -T <span class="hljs-number">1</span>C -DskipTests -Dmaven.<span class="hljs-keyword">compile</span>.fork=<span class="hljs-keyword">true</span> -Dmaven.test.skip=<span class="hljs-keyword">true</span> -f pom.xml<br></code></pre></td></tr></table></figure></li><li><p>跳过测试，跳过文档</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">clean install -DskipTests -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dmaven</span>.</span></span>test.skip=<span class="hljs-literal">true</span> -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dmaven</span>.</span></span>javadoc.skip=<span class="hljs-literal">true</span> -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dgpg</span>.</span></span>skip=<span class="hljs-literal">true</span> -<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Dmaven</span>.</span></span>source.skip=<span class="hljs-literal">true</span> -Pdev -f pom.xml<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础命令</tag>
      
      <tag>Jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GC日志时间分析</title>
    <link href="/2022/12/10/GC%E6%97%A5%E5%BF%97%E6%97%B6%E9%97%B4%E5%88%86%E6%9E%90/"/>
    <url>/2022/12/10/GC%E6%97%A5%E5%BF%97%E6%97%B6%E9%97%B4%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Java中的GC有哪几种类型？</p><table cellpadding="0" cellspacing="0" width="852"><tbody style="box-sizing: border-box; outline: 0px; border: 0px; overflow-wrap: break-word;"><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); overflow-wrap: break-word;" class="firstRow"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">参数</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">描述</p></td></tr><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); background-color: rgb(247, 247, 247); overflow-wrap: break-word;"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">UseSerialGC</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">虚拟机运行在Client模式的默认值，打开此开关参数后，</p><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">使用Serial+Serial Old收集器组合进行垃圾收集。</p></td></tr><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); overflow-wrap: break-word;"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">UseParNewGC</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">打开此开关参数后，使用ParNew+Serial Old收集器组合进行垃圾收集。</p></td></tr><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); background-color: rgb(247, 247, 247); overflow-wrap: break-word;"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">UseConcMarkSweepGC</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">打开此开关参数后，使用ParNew+CMS+Serial Old收集器组合进行垃圾收集。Serial Old作为CMS收集器出现Concurrent Mode Failure的备用垃圾收集器。</p></td></tr><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); overflow-wrap: break-word;"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">UseParallelGC</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">虚拟机运行在Server模式的默认值，打开此开关参数后，使用Parallel Scavenge+Serial Old收集器组合进行垃圾收集。</p></td></tr><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); background-color: rgb(247, 247, 247); overflow-wrap: break-word;"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">UseParallelOldGC</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">打开此开关参数后，使用Parallel Scavenge+Parallel Old收集器组合进行垃圾收集。</p></td></tr></tbody></table> <p>在Java程序启动完成后，通过jps观察进程来查询到当前运行的java进程，使用</p><p>jinfo –flag UseSerialGC 进程</p><p> </p><p>的方式可以定位其使用的gc策略，因为这些参数都是boolean型的常量，如果使用该种gc策略会出现＋号，否则－号。</p><p> </p><p>使用-XX:+上述GC策略可以开启对应的GC策略。</p><p> </p><p> </p><h1 id="GC日志查看"><a href="#GC日志查看" class="headerlink" title="GC日志查看"></a>GC日志查看</h1><p>可以通过在java命令种加入参数来指定对应的gc类型，打印gc日志信息并输出至文件等策略。</p><p> </p><p>GC的日志是以替换的方式(&gt;)写入的，而不是追加(&gt;&gt;)，如果下次写入到同一个文件中的话，以前的GC内容会被清空。</p><p> </p><p>对应的参数列表</p><p>-XX:+PrintGC 输出GC日志<br>-XX:+PrintGCDetails 输出GC的详细日志<br>-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）<br>-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）<br>-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息<br>-Xloggc:..&#x2F;logs&#x2F;gc.log 日志文件的输出路径</p><p> </p><p>例如:eclipse.ini中配置下面代码启动后会在同一目录下生成gc.log</p><table cellpadding="0" cellspacing="0" width="852"><tbody style="box-sizing: border-box; outline: 0px; border: 0px; overflow-wrap: break-word;"><tr style="box-sizing: border-box; outline: 0px; border-width: 1px 0px 0px; border-right-style: initial; border-bottom-style: initial; border-left-style: initial; border-right-color: initial; border-bottom-color: initial; border-left-color: initial; border-image: initial; border-top-style: solid; border-top-color: rgb(221, 221, 221); overflow-wrap: break-word;" class="firstRow"><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">1</p><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">2</p><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;">3</p></td><td style="box-sizing: border-box; outline: 0px; padding: 8px; margin: 0px; overflow-wrap: break-word; font-size: 14px; color: rgb(79, 79, 79); line-height: 22px;"><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;"><code style="box-sizing: border-box; outline: 0px; border-radius: 4px; overflow-wrap: break-word; word-break: break-word;">-Xloggc:gc.log</code></p><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;"><code style="box-sizing: border-box; outline: 0px; border-radius: 4px; overflow-wrap: break-word; word-break: break-word;">-XX:+PrintGCTimeStamps</code></p><p style="box-sizing: border-box; outline: 0px; overflow: auto hidden; line-height: 22px; overflow-wrap: break-word;"><code style="box-sizing: border-box; outline: 0px; border-radius: 4px; overflow-wrap: break-word; word-break: break-word;">-XX:+PrintGCDetails</code></p></td></tr></tbody></table> <p> </p><p>这里使用如下的参数来进行日志的打印：</p><p>-XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:.&#x2F;gclogs</p><p>  </p><p>对于新生代回收的一行日志，其基本内容如下：</p><p>2014-07-18T16:02:17.606+0800: 611.633: [GC 611.633: [DefNew: 843458K-&gt;2K(948864K), 0.0059180 secs] 2186589K-&gt;1343132K(3057292K), 0.0059490 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</p><p> </p><p> </p><p>其含义大概如下：</p><p>2014-07-18T16:02:17.606+0800（当前时间戳）: 611.633（时间戳）: [GC（表示Young GC） 611.633: [DefNew（单线程Serial年轻代GC）: 843458K（年轻代垃圾回收前的大小）-&gt;2K（年轻代回收后的大小）(948864K（年轻代总大小）), 0.0059180 secs（本次回收的时间）] 2186589K（整个堆回收前的大小）-&gt;1343132K（整个堆回收后的大小）(3057292K（堆总大小）), 0.0059490 secs（回收时间）] [Times: user&#x3D;0.00（用户耗时） sys&#x3D;0.00（系统耗时）, real&#x3D;0.00 secs（实际耗时）]</p><p> </p><p> </p><p>老年代回收的日志如下：</p><p>2014-07-18T16:19:16.794+0800: 1630.821: [GC 1630.821: [DefNew: 1005567K-&gt;111679K(1005568K), 0.9152360 secs]1631.736: [Tenured:<br>2573912K-&gt;1340650K(2574068K), 1.8511050 secs] 3122548K-&gt;1340650K(3579636K), [Perm : 17882K-&gt;17882K(21248K)], 2.7854350 secs] [Times: user&#x3D;2.57 sys&#x3D;0.22, real&#x3D;2.79 secs]</p><p> </p><p> </p><p>gc日志中的最后貌似是系统运行完成前的快照：</p><p>Heap<br> def new generation   total 1005568K, used 111158K [0x00000006fae00000, 0x000000073f110000, 0x0000000750350000)<br>  eden space 893888K,  12% used [0x00000006fae00000, 0x0000000701710e90, 0x00000007316f0000)<br>  from space 111680K,   3% used [0x0000000738400000, 0x000000073877c9b0, 0x000000073f110000)<br>  to   space 111680K,   0% used [0x00000007316f0000, 0x00000007316f0000, 0x0000000738400000)<br> tenured generation   total 2234420K, used 1347671K [0x0000000750350000, 0x00000007d895d000, 0x00000007fae00000)<br>   the space 2234420K,  60% used [0x0000000750350000, 0x00000007a2765cb8, 0x00000007a2765e00, 0x00000007d895d000)<br> compacting perm gen  total 21248K, used 17994K [0x00000007fae00000, 0x00000007fc2c0000, 0x0000000800000000)<br>   the space 21248K,  84% used [0x00000007fae00000, 0x00000007fbf92a50, 0x00000007fbf92c00, 0x00000007fc2c0000)<br>No shared spaces configured.</p><p> </p><p> </p><h1 id="GC日志的离线分析"><a href="#GC日志的离线分析" class="headerlink" title="GC日志的离线分析"></a>GC日志的离线分析</h1><p>可以使用一些离线的工具来对GC日志进行分析，比如sun的gchisto( <a href="https://java.net/projects/gchisto">https://java.net/projects/gchisto</a>)，gcviewer（ <a href="https://github.com/chewiebug/GCViewer">https://github.com/chewiebug/GCViewer</a> ），这些都是开源的工具，用户可以直接通过版本控制工具下载其源码，进行离线分析。</p><p> </p><p>下面就已gcviewer为例，简要分析一下gc日志的离线分析，gcviewer源代码工程是maven结构的，可以直接用maven进行package，这里编译的是1.34版本，本版本的快照已经上传至附件中。</p><p> </p><p>需要说明的是，gcviewer支持多种参数生成的gc日志，直接通过java –jar的方式运行，加载生成的gc日志即可：</p><p> </p><p>  <br><img src="http://dl2.iteye.com/upload/attachment/0099/9586/483dd971-065c-3ced-857c-83978a87939f.png"></p><p> </p><p> </p><p> </p><p> </p><p>-———————–第二种理解———————–</p><p> </p><p>首先，给出一个日志输出的例子：</p><p>参数设置为：</p><p>-XX:+PrintGCDetails -XX:-UseAdaptiveSizePolicy -XX:SurvivorRatio&#x3D;8 -XX:NewSize&#x3D;10M -XX:MaxNewSize&#x3D;10M</p><p>参数解释：</p><p>-XX:+PrintGCDetails 启用日志</p><p>-XX:-UseAdaptiveSizePolicy 禁用动态调整，使SurvivorRatio可以起作用</p><p>-XX:SurvivorRatio&#x3D;8 设置Eden:Survivior&#x3D;8</p><p>-XX:NewSize&#x3D;10M -XX:MaxNewSize&#x3D;10M 设置整个新生代的大小为10M</p><p>默认垃圾收集器为：Parallel Scavenge</p><p>输出结果为：</p><p>[GC [PSYoungGen: 4423K-&gt;320K(9216K)] 4423K-&gt;320K(58880K), 0.0011900 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.01 secs] <br>[Full GC (System) [PSYoungGen: 320K-&gt;0K(9216K)] [ParOldGen: 0K-&gt;222K(49664K)] 320K-&gt;222K(58880K) [PSPermGen: 2458K-&gt;2456K(21248K)], 0.0073610 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.00 secs] <br>Heap<br> PSYoungGen      total 9216K, used 491K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)<br>  eden space 8192K, 6% used [0x00000000ff600000,0x00000000ff67af50,0x00000000ffe00000)<br>  from space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)<br>  to   space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)<br> ParOldGen       total 49664K, used 222K [0x00000000c5800000, 0x00000000c8880000, 0x00000000ff600000)<br>  object space 49664K, 0% used [0x00000000c5800000,0x00000000c58378a0,0x00000000c8880000)<br> PSPermGen       total 21248K, used 2466K [0x00000000c0600000, 0x00000000c1ac0000, 0x00000000c5800000)<br>  object space 21248K, 11% used [0x00000000c0600000,0x00000000c0868b48,0x00000000c1ac0000)</p><p> </p><p> </p><p> </p><p>前半段分析：</p><p>GC （minor ）日志</p><p><img src="https://img-blog.csdn.net/20131002100114703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXhjMTM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p>Full GC 日志</p><p><img src="https://img-blog.csdn.net/20131002100112187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXhjMTM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p> </p><p> </p><p> </p><p> </p><p>后半段分析：</p><p><img src="https://img-blog.csdn.net/20130930164842000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXhjMTM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20130930164907500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXhjMTM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p>对照上面的图，GC日志中的PSYoungGen（PS是指Parallel Scavenge）为Eden+FromSpace，而整个YoungGeneration为Eden+FromSpace+ToSpace。</p><p>  我们设置的新生代大小为10240K，这包括9216K大小的PSYoungGen和1024K大小的ToSpace。其中，PSYoungGen中的Eden:FromSpace为8:1，</p><p>这包括8192K的Eden和1024K的FromSpace。</p><p>  关于老年代和永久代的输出比较简单，不再详述。</p><p> </p><p>更详细描述参见官方文档：<a href="http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html">http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html</a></p><p> </p><p> </p><p>  最后注意，如果新生代的空间不能刚好按比例划分，则可能有一定的误差。比如，将上述的参数中SurvivorRatio改为10，则输出如下：</p><p>[GC [PSYoungGen: 4439K-&gt;320K(9408K)] 4439K-&gt;320K(59072K), 0.0010120 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] <br>[Full GC (System) [PSYoungGen: 320K-&gt;0K(9408K)] [ParOldGen: 0K-&gt;222K(49664K)] 320K-&gt;222K(59072K) [PSPermGen: 2458K-&gt;2456K(21248K)], 0.0095710 secs] [Times: user&#x3D;0.02 sys&#x3D;0.00, real&#x3D;0.00 secs] <br>Heap<br> PSYoungGen      total 9408K, used 514K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)<br>  eden space 8576K, 6% used [0x00000000ff600000,0x00000000ff680b78,0x00000000ffe60000)<br>  from space 832K, 0% used [0x00000000ffe60000,0x00000000ffe60000,0x00000000fff30000)<br>  to   space 832K, 0% used [0x00000000fff30000,0x00000000fff30000,0x0000000100000000)<br> ParOldGen       total 49664K, used 222K [0x00000000c5800000, 0x00000000c8880000, 0x00000000ff600000)<br>  object space 49664K, 0% used [0x00000000c5800000,0x00000000c58378a0,0x00000000c8880000)<br> PSPermGen       total 21248K, used 2466K [0x00000000c0600000, 0x00000000c1ac0000, 0x00000000c5800000)<br>  object space 21248K, 11% used [0x00000000c0600000,0x00000000c0868b48,0x00000000c1ac0000)</p><p>  可以看到新生代的相关数值是有一定误差的</p><p>GC日志分析</p><p>　在GC日志里，一条完整的GC日志记录最后，会带有本次GC所花费的时间，如下面这一条新生代GC：</p><p>[GC [DefNew: 3298K-&gt;149K(5504K), 0.0053498 secs] 3298K-&gt;3221K(9600K), .0053750 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs]</p><p>　　注意到日志中时间分为了三块：<code>user</code>， <code>sys</code>，和 <code>real</code>，三者的区别和含义如下：</p><ul><li><p>　　<code>real</code>：指的是在此次GC事件中所花费的总时间；</p></li><li><p>　　<code>user</code>：指的是CPU工作在_用户态_所花费的时间；</p></li><li><p>　　<code>sys</code>：指的是CPU工作在_内核态_所花费的时间。</p></li></ul><p>　　<code>user</code> + <code>sys</code> 就是CPU花费的实际时间，注意这个值统计了所有CPU上的时间，如果进程工作在多线程的环境下，这个值是会超出 real 所记录的值的，即 <code>user</code> + <code>sys</code> &gt;&#x3D; <code>real</code></p><p>　　对于GC事件来说，无论是 Minor GC 还是 Full GC 的过程，都存在并发的GC算法，如新生代的ParNew，老年代的ParallelOld，GC过程中工作负载是由多个线程共同完成的，这也就意味着使用这些GC算法时，GC日志中我们应该观察到：<code>user</code> + <code>sys</code> &gt; <code>real</code>。譬如说：配置了<code>ParNew</code>且并发数为5的GC活动（<code>-XX:+UseParNewGC \-XX:ParallelGCThreads=5</code>）中，如果<code>user</code> + <code>sys</code>的值为 _2 seconds_，那么 <code>real</code> 的时间 就近似为 <code>400ms(2 seconds / 5)</code>。</p><p>场景1：</p><p>[Times: user&#x3D;11.53 sys&#x3D;1.38, real&#x3D;1.03 secs]</p><p>　　垃圾回收过程是通过并发执行，因此 <code>user</code> + <code>sys</code> 远大于 <code>real</code> 。</p><p>场景2：</p><p>[Times: user&#x3D;0.09 sys&#x3D;0.00, real&#x3D;0.09 secs]</p><p>　　因为使用了串行的垃圾回收期，所以时间应该是 <code>user</code> 和 <code>real</code> 相等。</p><p>场景3：</p><p>[Times: user&#x3D;0.20 sys&#x3D;0.01, real&#x3D;18.45 secs]</p><p>　　这是一个异常的示例，可以看到 <code>real</code> 所显示的时间 远 大于 <code>user</code> + <code>sys</code>。一般来说，如果观察到GC日志里多次出现了场景3所示的日志，这表明JVM的GC 过程存在某些问题（等待计算资源），原因可能是下面这两种：</p><ul><li><p>　　频繁的IO操作</p></li><li><p>　　缺乏CPU资源</p></li></ul><p>繁忙的I&#x2F;O操作</p><p>　　当程序存在繁忙的I&#x2F;O操作（网络IO或磁盘IO）时，会让 <code>real</code> 时间大幅上升。因为在记录GC日志的时候，你的程序进行了磁盘读写，如果同一时间其他IO操作较重，则此时GC事件会延迟，进而影响了最终的 <code>real</code> 的值。注意，如果程序本身不存在的频繁的IO操作，同一机器上其他进程的频繁IO也会影响 <code>real</code> 的最终结果。Linux环境下可以使用 <code>sar</code> 监视机器上的I&#x2F;O，eg. <code>sar \-d \-p 1</code>，如果频繁的IO操作的确存在，可以通过下面两种方式改进：</p><ul><li><p>　　优化程序本身的IO操作逻辑；</p></li><li><p>　　消除其他进程带来的IO影响。</p></li></ul><p>缺乏CPU资源</p><p>　　当程序本身是CPU密集型应用，或机器上其他进程占用了大量的CPU计算资源，则有可能会出现分配不到 CPU cycles的情况，这会让程序挂起，GC所花费的实际时间也将远大于 <code>user</code> + <code>sys</code> 的值。</p><p>　　可以使用 <code>top</code> 命令观察一下 进程的CPU利用率，同时辅以Profiler工具统计一段时间内进程的状态分布。如果的确是CPU资源不足，解决方法无法下面几种：</p><ul><li><p>　　优化程序内部的线程使用，确保无冗余的线程配置；</p></li><li><p>　　增加虚拟机或容器的CPU配置，提升机器总的计算能力。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现天平秤秤球？</title>
    <link href="/2022/12/10/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/"/>
    <url>/2022/12/10/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/</url>
    
    <content type="html"><![CDATA[<p>一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。<br>题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Boolean[] balls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>[] &#123; <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span><br>System.out.println(<span class="hljs-string">&quot;已知的空球为:&quot;</span> + balls[<span class="hljs-number">4</span>].hashCode());<br>searchBall(balls, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 天平称重找出不同的球，此处通过打印hashCode来判断球的唯一标志</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> balls</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> findValue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchBall</span><span class="hljs-params">(Boolean[] balls, <span class="hljs-type">boolean</span> findValue)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;称重.....&quot;</span>);<br><span class="hljs-keyword">if</span> (balls == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">indexSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (balls.length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>size = balls.length - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>size = balls.length;<br>&#125;<br>indexSize = size / <span class="hljs-number">2</span>;<br>Boolean[] preBalls = Arrays.copyOfRange(balls, <span class="hljs-number">0</span>, indexSize);<br>Boolean[] lastBalls = Arrays.copyOfRange(balls, indexSize, size);<br><span class="hljs-type">int</span> <span class="hljs-variable">weight1</span> <span class="hljs-operator">=</span> getWeight(preBalls);<br><span class="hljs-type">int</span> <span class="hljs-variable">weight2</span> <span class="hljs-operator">=</span> getWeight(lastBalls);<br><span class="hljs-keyword">if</span> (weight1 == weight2) &#123;<br>System.out.println(<span class="hljs-string">&quot;已找到不同的球：&quot;</span> + balls[balls.length - <span class="hljs-number">1</span>].hashCode());<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (weight1 &gt; weight2) &#123;<br><span class="hljs-keyword">if</span> (lastBalls.length == <span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;已找到不同的球：：&quot;</span> + lastBalls[<span class="hljs-number">0</span>].hashCode());<br><span class="hljs-keyword">return</span>;<br>&#125;<br>searchBall(lastBalls, findValue);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (preBalls.length == <span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;已找到不同的球：：&quot;</span> + lastBalls[<span class="hljs-number">0</span>].hashCode());<br><span class="hljs-keyword">return</span>;<br>&#125;<br>searchBall(preBalls, findValue);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 称重方法</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> balls</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">(Boolean[] balls)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : balls) &#123;<br><span class="hljs-keyword">if</span> (!b) &#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果为"><a href="#运行结果为" class="headerlink" title="运行结果为:"></a>运行结果为:</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">已知的空球为:<span class="hljs-number">1231</span><br>称重.....<br>称重.....<br>已找到不同的球：：<span class="hljs-number">1231</span><br></code></pre></td></tr></table></figure><p>可以看出来2次称重，找到不规则的球。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法基础题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub 第三方登录示例教程！</title>
    <link href="/2022/12/10/GitHub%20OAuth%20%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/10/GitHub%20OAuth%20%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/">2019年4月21日</a></p><p>这组 OAuth 系列教程，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html">第一篇</a>介绍了基本概念，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">第二篇</a>介绍了获取令牌的四种方式，今天演示一个实例，如何通过 OAuth 获取 API 数据。</p><p>很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042101.jpg"></p><p>下面就以 GitHub 为例，写一个最简单的应用，演示第三方登录。</p><h2 id="一、第三方登录的原理"><a href="#一、第三方登录的原理" class="headerlink" title="一、第三方登录的原理"></a>一、第三方登录的原理</h2><p>所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li><p>A 网站让用户跳转到 GitHub。</p></li><li><p>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</p></li><li><p>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</p></li><li><p>A 网站使用授权码，向 GitHub 请求令牌。</p></li><li><p>GitHub 返回令牌.</p></li><li><p>A 网站使用令牌，向 GitHub 请求用户数据。</p></li></ol></blockquote><p>下面就是这个流程的代码实现。</p><h2 id="二、应用登记"><a href="#二、应用登记" class="headerlink" title="二、应用登记"></a>二、应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，你要先去 GitHub 登记一下。当然，我已经登记过了，你使用我的登记信息也可以，但为了完整走一遍流程，还是建议大家自己登记。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new">网址</a>，填写登记表。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042102.jpg"></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><h2 id="三、示例仓库"><a href="#三、示例仓库" class="headerlink" title="三、示例仓库"></a>三、示例仓库</h2><p>我写了一个<a href="https://github.com/ruanyf/node-oauth-demo">代码仓库</a>，请将它克隆到本地。</p><blockquote><p>$ git clone <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a>:ruanyf&#x2F;node-oauth-demo.git<br>$ cd node-oauth-demo</p></blockquote><p>两个配置项要改一下，写入上一步的身份识别码。</p><blockquote><ul><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L3"><code>index.js</code></a>：改掉变量<code>clientID</code> and <code>clientSecret</code></p></li><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/public/index.html#L16"><code>public/index.html</code></a>：改掉变量<code>client_id</code></p></li></ul></blockquote><p>然后，安装依赖。</p><blockquote><p>$ npm install</p></blockquote><p>启动服务。</p><blockquote><p>$ node index.js</p></blockquote><p>浏览器访问<code>http://localhost:8080</code>，就可以看到这个示例了。</p><h2 id="四、浏览器跳转-GitHub"><a href="#四、浏览器跳转-GitHub" class="headerlink" title="四、浏览器跳转 GitHub"></a>四、浏览器跳转 GitHub</h2><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042103.jpg"></p><p>跳转的 URL 如下。</p><blockquote><p><a href="https://github.com/login/oauth/authorize">https://github.com/login/oauth/authorize</a>?<br>  client_id&#x3D;7e015d8ce32370079895&amp;<br>  redirect_uri&#x3D;<a href="http://localhost:8080/oauth/redirect">http://localhost:8080/oauth/redirect</a></p></blockquote><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址。</p><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p><h2 id="五、授权码"><a href="#五、授权码" class="headerlink" title="五、授权码"></a>五、授权码</h2><p>登录后，GitHub 询问用户，该应用正在请求数据，你是否同意授权。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042104.png"></p><p>用户同意授权， GitHub 就会跳转到<code>redirect_uri</code>指定的跳转网址，并且带上授权码，跳转回来的 URL 就是下面的样子。</p><blockquote><p><a href="http://localhost:8080/oauth/redirect">http://localhost:8080/oauth/redirect</a>?<br>  code&#x3D;859310e7cecc9196f4af</p></blockquote><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）。</p><h2 id="六、后端实现"><a href="#六、后端实现" class="headerlink" title="六、后端实现"></a>六、后端实现</h2><p>示例的<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js">后端</a>采用 Koa 框架编写，具体语法请看<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html">教程</a>。</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L16">路由</a>，完成 OAuth 认证。</p><blockquote><p>const oauth &#x3D; async ctx &#x3D;&gt; {<br>  &#x2F;&#x2F; …};app.use(route.get(‘&#x2F;oauth&#x2F;redirect’, oauth));</p></blockquote><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><blockquote><p>const requestToken &#x3D; ctx.request.query.code;</p></blockquote><h2 id="七、令牌"><a href="#七、令牌" class="headerlink" title="七、令牌"></a>七、令牌</h2><p>后端使用这个授权码，向 GitHub 请求令牌。</p><blockquote><p>const tokenResponse &#x3D; await axios({<br>  method: ‘post’,<br>  url: ‘<a href="https://github.com/login/oauth/access_token?&#39;">https://github.com/login/oauth/access_token?&#39;</a> +<br>    `client_id&#x3D;${clientID}&amp;` +<br>    `client_secret&#x3D;${clientSecret}&amp;` +<br>    `code&#x3D;${requestToken}`,<br>  headers: {<br>    accept: ‘application&#x2F;json’<br>  }});</p></blockquote><p>上面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><p><code>client_id</code>：客户端的 ID</p></li><li><p><code>client_secret</code>：客户端的密钥</p></li><li><p><code>code</code>：授权码</p></li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><blockquote><p>const accessToken &#x3D; tokenResponse.data.access_token;</p></blockquote><h2 id="八、API-数据"><a href="#八、API-数据" class="headerlink" title="八、API 数据"></a>八、API 数据</h2><p>有了令牌以后，就可以向 API 请求数据了。</p><blockquote><p>const result &#x3D; await axios({<br>  method: ‘get’,<br>  url: `<a href="https://api.github.com/user/%60">https://api.github.com/user\`</a>,<br>  headers: {<br>    accept: ‘application&#x2F;json’,<br>    Authorization: `token ${accessToken}`  }});</p></blockquote><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code>。</p><p>然后，就可以拿到用户数据，得到用户的身份。</p><blockquote><p>const name &#x3D; result.data.name;ctx.response.redirect(<code>/welcome.html?name=$&#123;name&#125;</code>);</p></blockquote><p>（完）</p>]]></content>
    
    
    
    <tags>
      
      <tag>认证授权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo 面试18问</title>
    <link href="/2022/12/10/Dubbo%20%E9%9D%A2%E8%AF%9518%E9%97%AE/"/>
    <url>/2022/12/10/Dubbo%20%E9%9D%A2%E8%AF%9518%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="dubbo是什么"><a href="#dubbo是什么" class="headerlink" title="dubbo是什么"></a>dubbo是什么</h2><p>dubbo是一个分布式框架，远程服务调用的分布式框架，其核心部分包含：</p><ul><li><p><strong>集群容错</strong>：提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</p></li><li><p><strong>远程通讯</strong>：提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</p></li><li><p><strong>自动发现</strong>：基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</p></li></ul><h2 id="dubbo能做什么"><a href="#dubbo能做什么" class="headerlink" title="dubbo能做什么"></a>dubbo能做什么</h2><p>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。</p><p>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</p><h3 id="1、默认使用的是什么通信框架，还有别的选择吗"><a href="#1、默认使用的是什么通信框架，还有别的选择吗" class="headerlink" title="1、默认使用的是什么通信框架，还有别的选择吗?"></a>1、默认使用的是什么通信框架，还有别的选择吗?</h3><p>答：默认也推荐使用 netty 框架，还有 mina。</p><h3 id="2、服务调用是阻塞的吗？"><a href="#2、服务调用是阻塞的吗？" class="headerlink" title="2、服务调用是阻塞的吗？"></a>2、服务调用是阻塞的吗？</h3><p>答：默认是阻塞的，可以异步调用，没有返回值的可以这么做。</p><h3 id="3、一般使用什么注册中心？还有别的选择吗？"><a href="#3、一般使用什么注册中心？还有别的选择吗？" class="headerlink" title="3、一般使用什么注册中心？还有别的选择吗？"></a>3、一般使用什么注册中心？还有别的选择吗？</h3><p>答：推荐使用 zookeeper 注册中心，还有 Multicast注册中心, Redis注册中心, Simple注册中心.</p><p>ZooKeeper的节点是通过像树一样的结构来进行维护的，并且每一个节点通过路径来标示以及访问。除此之外，每一个节点还拥有自身的一些信息，包括：数据、数据长度、创建时间、修改时间等等。</p><h3 id="4、默认使用什么序列化框架，你知道的还有哪些？"><a href="#4、默认使用什么序列化框架，你知道的还有哪些？" class="headerlink" title="4、默认使用什么序列化框架，你知道的还有哪些？"></a>4、默认使用什么序列化框架，你知道的还有哪些？</h3><p>答：默认使用 Hessian 序列化，还有 Duddo、FastJson、Java 自带序列化。hessian是一个采用二进制格式传输的服务框架，相对传统soap web service，更轻量，更快速。</p><p><strong>Hessian原理与协议简析：</strong></p><p>http的协议约定了数据传输的方式，hessian也无法改变太多：</p><ul><li><p>hessian中client与server的交互，基于http-post方式。</p></li><li><p>hessian将辅助信息，封装在http header中，比如“授权token”等，我们可以基于http-header来封装关于“安全校验”“meta数据”等。hessian提供了简单的”校验”机制。</p></li><li><p>对于hessian的交互核心数据，比如“调用的方法”和参数列表信息，将通过post请求的body体直接发送，格式为字节流。</p></li><li><p>对于hessian的server端响应数据，将在response中通过字节流的方式直接输出。</p></li></ul><p>hessian的协议本身并不复杂，在此不再赘言；所谓协议(protocol)就是约束数据的格式，client按照协议将请求信息序列化成字节序列发送给server端，server端根据协议，将数据反序列化成“对象”，然后执行指定的方法，并将方法的返回值再次按照协议序列化成字节流，响应给client，client按照协议将字节流反序列化成”对象”。</p><h3 id="5、服务提供者能实现失效踢出是什么原理？"><a href="#5、服务提供者能实现失效踢出是什么原理？" class="headerlink" title="5、服务提供者能实现失效踢出是什么原理？"></a>5、服务提供者能实现失效踢出是什么原理？</h3><p>答：服务失效踢出基于 zookeeper 的临时节点原理。</p><h3 id="6、服务上线怎么不影响旧版本？"><a href="#6、服务上线怎么不影响旧版本？" class="headerlink" title="6、服务上线怎么不影响旧版本？"></a>6、服务上线怎么不影响旧版本？</h3><p>答：采用多版本开发，不影响旧版本。在配置中添加version来作为版本区分</p><h3 id="7、如何解决服务调用链过长的问题？"><a href="#7、如何解决服务调用链过长的问题？" class="headerlink" title="7、如何解决服务调用链过长的问题？"></a>7、如何解决服务调用链过长的问题？</h3><p>答：可以结合 zipkin 实现分布式服务追踪。</p><h3 id="8、说说核心的配置有哪些？"><a href="#8、说说核心的配置有哪些？" class="headerlink" title="8、说说核心的配置有哪些？"></a>8、说说核心的配置有哪些？</h3><p>核心配置有</p><ul><li><p>dubbo:service&#x2F;</p></li><li><p>dubbo:reference&#x2F;</p></li><li><p>dubbo:protocol&#x2F;</p></li><li><p>dubbo:registry&#x2F;</p></li><li><p>dubbo:application&#x2F;</p></li><li><p>dubbo:provider&#x2F;</p></li><li><p>dubbo:consumer&#x2F;</p></li><li><p>dubbo:method&#x2F;</p></li></ul><h3 id="9、dubbo-推荐用什么协议？"><a href="#9、dubbo-推荐用什么协议？" class="headerlink" title="9、dubbo 推荐用什么协议？"></a>9、dubbo 推荐用什么协议？</h3><p>答：默认使用 dubbo 协议。</p><h3 id="10、同一个服务多个注册的情况下可以直连某一个服务吗？"><a href="#10、同一个服务多个注册的情况下可以直连某一个服务吗？" class="headerlink" title="10、同一个服务多个注册的情况下可以直连某一个服务吗？"></a>10、同一个服务多个注册的情况下可以直连某一个服务吗？</h3><p>答：可以直连，修改配置即可，也可以通过 telnet 直接某个服务。</p><h3 id="11、dubbo-在安全机制方面如何解决的？"><a href="#11、dubbo-在安全机制方面如何解决的？" class="headerlink" title="11、dubbo 在安全机制方面如何解决的？"></a>11、dubbo 在安全机制方面如何解决的？</h3><p>dubbo 通过 token 令牌防止用户绕过注册中心直连，然后在注册中心管理授权，dubbo 提供了黑白名单，控制服务所允许的调用方。</p><h3 id="12、集群容错怎么做？"><a href="#12、集群容错怎么做？" class="headerlink" title="12、集群容错怎么做？"></a>12、集群容错怎么做？</h3><p>答：读操作建议使用 Failover 失败自动切换，默认重试两次其他服务器。写操作建议使用 Failfast 快速失败，发一次调用失败就立即报错。</p><h3 id="13、在使用过程中都遇到了些什么问题？如何解决的？"><a href="#13、在使用过程中都遇到了些什么问题？如何解决的？" class="headerlink" title="13、在使用过程中都遇到了些什么问题？如何解决的？"></a>13、在使用过程中都遇到了些什么问题？如何解决的？</h3><p><strong>1.同时配置了 XML 和 properties 文件，则 properties 中的配置无效</strong></p><p>只有 XML 没有配置时，properties 才生效。</p><p><strong>2.dubbo 缺省会在启动时检查依赖是否可用，不可用就抛出异常，阻止 spring 初始化完成，check 属性默认为 true。</strong></p><p>测试时有些服务不关心或者出现了循环依赖，将 check 设置为 false</p><p><strong>3.为了方便开发测试，线下有一个所有服务可用的注册中心，这时，如果有一个正在开发中的服务提供者注册，可能会影响消费者不能正常运行。</strong></p><p>解决：让服务提供者开发方，只订阅服务，而不注册正在开发的服务，通过直连测试正在开发的服务。设置 dubbo:registry 标签的 register 属性为 false。</p><p><strong>4.spring 2.x 初始化死锁问题。</strong></p><p>在 spring 解析到 dubbo:service 时，就已经向外暴露了服务，而 spring 还在接着初始化其他 bean，如果这时有请求进来，并且服务的实现类里有调用applicationContext.getBean() 的用法。getBean 线程和 spring 初始化线程的锁的顺序不一样，导致了线程死锁，不能提供服务，启动不了。</p><p>解决：不要在服务的实现类中使用 applicationContext.getBean(); 如果不想依赖配置顺序，可以将 dubbo:provider 的 deplay 属性设置为 - 1，使 dubbo 在容器初始化完成后再暴露服务。</p><p><strong>5.服务注册不上</strong></p><p>检查 dubbo 的 jar 包有没有在 classpath 中，以及有没有重复的 jar 包</p><p>检查暴露服务的 spring 配置有没有加载</p><p>在服务提供者机器上测试与注册中心的网络是否通</p><p><strong>6.出现 RpcException: No provider available for remote service 异常，表示没有可用的服务提供者，</strong></p><ul><li><p>检查连接的注册中心是否正确</p></li><li><p>到注册中心查看相应的服务提供者是否存在</p></li><li><p>检查服务提供者是否正常运行</p></li></ul><p><strong>7.出现” 消息发送失败” 异常</strong></p><p>通常是接口方法的传入传出参数未实现 Serializable 接口。</p><h3 id="14、dubbo-和-dubbox-之间的区别？"><a href="#14、dubbo-和-dubbox-之间的区别？" class="headerlink" title="14、dubbo 和 dubbox 之间的区别？"></a>14、dubbo 和 dubbox 之间的区别？</h3><p>答：dubbox 是当当网基于 dubbo 上做了一些扩展，如加了服务可 restful 调用，更新了开源组件等。</p><h3 id="15、你还了解别的分布式框架吗？"><a href="#15、你还了解别的分布式框架吗？" class="headerlink" title="15、你还了解别的分布式框架吗？"></a>15、你还了解别的分布式框架吗？</h3><p>答：别的还有 spring 的 spring cloud，facebook 的 thrift，twitter 的 finagle 等。</p><h3 id="16、Dubbo-支持哪些协议，每种协议的应用场景，优缺点？"><a href="#16、Dubbo-支持哪些协议，每种协议的应用场景，优缺点？" class="headerlink" title="16、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？"></a>16、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？</h3><p><strong>dubbo</strong>：单一长连接和 NIO 异步通讯，适合大并发小数据量的服务调用，以及消费者远大于提供者。传输协议 TCP，异步，Hessian 序列化；</p><p><strong>rmi</strong>：采用 JDK 标准的 rmi 协议实现，传输参数和返回参数对象需要实现 Serializable 接口，使用 java 标准序列化机制，使用阻塞式短连接，传输数据包大小混合，消费者和提供者个数差不多，可传文件，传输协议 TCP。多个短连接，TCP 协议传输，同步传输，适用常规的远程服务调用和 rmi 互操作。在依赖低版本的 Common-Collections 包，java 序列化存在安全漏洞；</p><p><strong>webservice</strong>：基于 WebService 的远程调用协议，集成 CXF 实现，提供和原生 WebService 的互操作。多个短连接，基于 HTTP 传输，同步传输，适用系统集成和跨语言调用；</p><p><strong>http</strong>：基于 Http 表单提交的远程调用协议，使用 Spring 的 HttpInvoke 实现。多个短连接，传输协议 HTTP，传入参数大小混合，提供者个数多于消费者，需要给应用程序和浏览器 JS 调用；</p><p><strong>hessian</strong>：集成 Hessian 服务，基于 HTTP 通讯，采用 Servlet 暴露服务，Dubbo 内嵌 Jetty 作为服务器时默认实现，提供与 Hession 服务互操作。多个短连接，同步 HTTP 传输，Hessian 序列化，传入参数较大，提供者大于消费者，提供者压力较大，可传文件；</p><p><strong>memcache</strong>：基于 memcached 实现的 RPC 协议 redis：基于 redis 实现的 RPC 协议</p><h3 id="17、Dubbo-集群的负载均衡有哪些策略"><a href="#17、Dubbo-集群的负载均衡有哪些策略" class="headerlink" title="17、Dubbo 集群的负载均衡有哪些策略"></a>17、Dubbo 集群的负载均衡有哪些策略</h3><p>Dubbo 提供了常见的集群策略实现，并预扩展点予以自行实现。</p><p><strong>Random LoadBalance</strong>：随机选取提供者策略，有利于动态调整提供者权重。截面碰撞率高，调用次数越多，分布越均匀；</p><p><strong>RoundRobin LoadBalance</strong>：轮循选取提供者策略，平均分布，但是存在请求累积的问题；</p><p>**LeastActive LoadBalance:**：最少活跃调用策略，解决慢提供者接收更少的请求；</p><p>**ConstantHash LoadBalance:**：一致性 Hash 策略，使相同参数请求总是发到同一提供者，一台机器宕机，可以基于虚拟节点，分摊至其他提供者，避免引起提供者的剧烈变动；</p><h3 id="18-服务调用超时问题怎么解决"><a href="#18-服务调用超时问题怎么解决" class="headerlink" title="18. 服务调用超时问题怎么解决"></a>18. 服务调用超时问题怎么解决</h3><p>dubbo在调用服务不成功时，默认是会重试两次的。这样在服务端的处理时间超过了设定的超时时间时，就会有重复请求，比如在发邮件时，可能就会发出多份重复邮件，执行注册请求时，就会插入多条重复的注册数据，那么怎么解决超时问题呢？如下</p><p>对于核心的服务中心，去除dubbo超时重试机制，并重新评估设置超时时间。业务处理代码必须放在服务端，客户端只做参数验证和服务调用，不涉及业务流程处理 全局配置实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:provider</span> <span class="hljs-attr">delay</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;6000&quot;</span> <span class="hljs-attr">retries</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>当然Dubbo的重试机制其实是非常好的QOS保证，它的路由机制，是会帮你把超时的请求路由到其他机器上，而不是本机尝试，所以 dubbo的重试机器也能一定程度的保证服务的质量。但是请一定要综合线上的访问情况，给出综合的评估。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg 视频处理入门教程</title>
    <link href="/2022/12/10/FFmpeg%20%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/10/FFmpeg%20%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2020/01/">2020年1月14日</a></p><p><a href="https://www.ffmpeg.org/">FFmpeg</a> 是视频处理最常用的开源软件。</p><p>它功能强大，用途广泛，大量用于视频网站和商业软件（比如 Youtube 和 iTunes），也是许多音频和视频格式的标准编码&#x2F;解码实现。</p><p><img src="https://www.wangbase.com/blogimg/asset/202001/bg2020011401.jpg"></p><p>FFmpeg 本身是一个庞大的项目，包含许多组件和库文件，最常用的是它的命令行工具。本文介绍 FFmpeg 命令行如何处理视频，比桌面视频处理软件更简洁高效。</p><p>如果你还没安装，可以根据<a href="https://www.ffmpeg.org/download.html">官方文档</a> 先完成安装。</p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>介绍 FFmpeg 用法之前，需要了解一些视频处理的基本概念。</p><h3 id="1-1-容器"><a href="#1-1-容器" class="headerlink" title="1.1 容器"></a>1.1 容器</h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</p><p>常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><blockquote><ul><li><p>MP4</p></li><li><p>MKV</p></li><li><p>WebM</p></li><li><p>AVI</p></li></ul></blockquote><p>下面的命令查看 FFmpeg 支持的容器。</p><blockquote><p>$ ffmpeg -formats</p></blockquote><h3 id="1-2-编码格式"><a href="#1-2-编码格式" class="headerlink" title="1.2 编码格式"></a>1.2 编码格式</h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><blockquote><ul><li><p>H.262</p></li><li><p>H.264</p></li><li><p>H.265</p></li></ul></blockquote><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><blockquote><ul><li><p>VP8</p></li><li><p>VP9</p></li><li><p>AV1</p></li></ul></blockquote><p>常用的音频编码格式如下。</p><blockquote><ul><li><p>MP3</p></li><li><p>AAC</p></li></ul></blockquote><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。</p><p>下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><blockquote><p>$ ffmpeg -codecs</p></blockquote><h3 id="1-3-编码器"><a href="#1-3-编码器" class="headerlink" title="1.3 编码器"></a>1.3 编码器</h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频&#x2F;音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><blockquote><ul><li><p>libx264：最流行的开源 H.264 编码器</p></li><li><p>NVENC：基于 NVIDIA GPU 的 H.264 编码器</p></li><li><p>libx265：开源的 HEVC 编码器</p></li><li><p>libvpx：谷歌的 VP8 和 VP9 编码器</p></li><li><p>libaom：AV1 编码器</p></li></ul></blockquote><p>音频编码器如下。</p><blockquote><ul><li><p>libfdk-aac</p></li><li><p>aac</p></li></ul></blockquote><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><blockquote><p>$ ffmpeg -encoders</p></blockquote><h2 id="二、FFmpeg-的使用格式"><a href="#二、FFmpeg-的使用格式" class="headerlink" title="二、FFmpeg 的使用格式"></a>二、FFmpeg 的使用格式</h2><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><blockquote><p>$ ffmpeg {1} {2} -i {3} {4} {5}</p></blockquote><p>上面命令中，五个部分的参数依次如下。</p><blockquote><ol><li><p>全局参数</p></li><li><p>输入文件参数</p></li><li><p>输入文件</p></li><li><p>输出文件参数</p></li><li><p>输出文件</p></li></ol></blockquote><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><blockquote><p>$ ffmpeg \[全局参数] \[输入文件参数] \-i [输入文件] \[输出文件参数] \[输出文件]</p></blockquote><p>下面是一个例子。</p><blockquote><p>$ ffmpeg \-y \ # 全局参数-c:a libfdk_aac -c:v libx264 \ # 输入文件参数-i input.mp4 \ # 输入文件-c:v libvpx-vp9 -c:a libvorbis \ # 输出文件参数output.webm # 输出文件</p></blockquote><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><blockquote><p>$ ffmpeg -i input.avi output.mp4</p></blockquote><h2 id="三、常用命令行参数"><a href="#三、常用命令行参数" class="headerlink" title="三、常用命令行参数"></a>三、常用命令行参数</h2><p>FFmpeg 常用的命令行参数如下。</p><blockquote><ul><li><p><code>-c</code>：指定编码器</p></li><li><p><code>-c copy</code>：直接复制，不经过重新编码（这样比较快）</p></li><li><p><code>-c:v</code>：指定视频编码器</p></li><li><p><code>-c:a</code>：指定音频编码器</p></li><li><p><code>-i</code>：指定输入文件</p></li><li><p><code>-an</code>：去除音频流</p></li><li><p><code>-vn</code>： 去除视频流</p></li><li><p><code>-preset</code>：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</p></li><li><p><code>-y</code>：不经过确认，输出时直接覆盖同名文件。</p></li></ul></blockquote><h2 id="四、常见用法"><a href="#四、常见用法" class="headerlink" title="四、常见用法"></a>四、常见用法</h2><p>下面介绍 FFmpeg 几种常见用法。</p><h3 id="4-1-查看文件信息"><a href="#4-1-查看文件信息" class="headerlink" title="4.1 查看文件信息"></a>4.1 查看文件信息</h3><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用<code>-i</code>参数。</p><blockquote><p>$ ffmpeg -i input.mp4</p></blockquote><p>上面命令会输出很多冗余信息，加上<code>-hide_banner</code>参数，可以只显示元信息。</p><blockquote><p>$ ffmpeg -i input.mp4 -hide_banner</p></blockquote><h3 id="4-2-转换编码格式"><a href="#4-2-转换编码格式" class="headerlink" title="4.2 转换编码格式"></a>4.2 转换编码格式</h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器<code>libx264</code>，所以只需指定输出文件的视频编码器即可。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx264 output.mp4</p></blockquote><p>下面是转成 H.265 编码的写法。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx265 output.mp4</p></blockquote><h3 id="4-3-转换容器格式"><a href="#4-3-转换容器格式" class="headerlink" title="4.3 转换容器格式"></a>4.3 转换容器格式</h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><blockquote><p>$ ffmpeg -i input.mp4 -c copy output.webm</p></blockquote><p>上面例子中，只是转一下容器，内部的编码格式不变，所以使用<code>-c copy</code>指定直接拷贝，不经过转码，这样比较快。</p><h3 id="4-4-调整码率"><a href="#4-4-调整码率" class="headerlink" title="4.4 调整码率"></a>4.4 调整码率</h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-minrate 964K -maxrate 3856K -bufsize 2000K <br>output.mp4</p></blockquote><h3 id="4-5-改变分辨率（transsizing）"><a href="#4-5-改变分辨率（transsizing）" class="headerlink" title="4.5 改变分辨率（transsizing）"></a>4.5 改变分辨率（transsizing）</h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vf scale&#x3D;480:-1 <br>output.mp4</p></blockquote><h3 id="4-6-提取音频"><a href="#4-6-提取音频" class="headerlink" title="4.6 提取音频"></a>4.6 提取音频</h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vn -c:a copy <br>output.aac</p></blockquote><p>上面例子中，<code>-vn</code>表示去掉视频，<code>-c:a copy</code>表示不改变音频编码，直接拷贝。</p><h3 id="4-7-添加音轨"><a href="#4-7-添加音轨" class="headerlink" title="4.7 添加音轨"></a>4.7 添加音轨</h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><blockquote><p>$ ffmpeg \-i input.aac -i input.mp4 <br>output.mp4</p></blockquote><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="4-8-截图"><a href="#4-8-截图" class="headerlink" title="4.8 截图"></a>4.8 截图</h3><p>下面的例子是从指定时间开始，连续对1秒钟的视频进行截图。</p><blockquote><p>$ ffmpeg \-y \-i input.mp4 \-ss 00:01:24 -t 00:00:01 <br>output_%3d.jpg</p></blockquote><p>如果只需要截一张图，可以指定只截取一帧。</p><blockquote><p>$ ffmpeg \-ss 01:23:45 \-i input \-vframes 1 -q:v 2 <br>output.jpg</p></blockquote><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="4-9-裁剪"><a href="#4-9-裁剪" class="headerlink" title="4.9 裁剪"></a>4.9 裁剪</h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><blockquote><p>$ ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]$ ffmpeg -ss [start] -i [input] -to [end] -c copy [output]</p></blockquote><p>下面是实际的例子。</p><blockquote><p>$ ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]$ ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output]</p></blockquote><p>上面例子中，<code>-c copy</code>表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="4-10-为音频添加封面"><a href="#4-10-为音频添加封面" class="headerlink" title="4.10 为音频添加封面"></a>4.10 为音频添加封面</h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。</p><p>下面命令可以将音频文件，转为带封面的视频文件。</p><blockquote><p>$ ffmpeg \-loop 1 \-i cover.jpg -i input.mp3 \-c:v libx264 -c:a aac -b:a 192k -shortest <br>output.mp4</p></blockquote><p>上面命令中，有两个输入文件，一个是封面图片<code>cover.jpg</code>，另一个是音频文件<code>input.mp3</code>。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><p><a href="https://github.com/leandromoreira/ffmpeg-libav-tutorial#chapter-3---transcoding">FFmpeg libav tutorial</a></p></li><li><p><a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/encoding_pratical_examples.md#split-and-merge-smoothly">Digital video introduction</a></p></li><li><p><a href="http://slhck.info/ffmpeg-encoding-course/">FFmpeg encoding and editing course</a></p></li><li><p><a href="http://dragonquest64.blogspot.com/2019/10/making-slideshows-wffmpeg.html">Making Slideshows w&#x2F;FFMpeg</a></p></li><li><p><a href="https://itsfoss.com/ffmpeg/">The Complete Guide for Using ffmpeg in Linux</a></p></li></ul><p>（完）</p>]]></content>
    
    
    
    <tags>
      
      <tag>视频处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API接口设计该如何设计？如何保证安全？</title>
    <link href="/2022/12/10/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/"/>
    <url>/2022/12/10/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？除了https的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？  </p><p>下面我们就来讨论下常用的一些API设计的安全方法，可能不一定是最好的，有更牛逼的实现方式，但是这篇是我自己的经验分享.<br><strong>一、token 简介</strong><br>Token：访问令牌access token, 用于接口中, 用于标识接口调用者的身份、凭证，减少用户名和密码的传输次数。一般情况下客户端(接口调用方)需要先向服务器端申请一个接口调用的账号，服务器会给出一个appId和一个key, key用于参数签名使用，注意key保存到客户端，需要做一些安全处理，防止泄露。<br>Token的值一般是UUID，服务端生成Token后需要将token做为key，将一些和token关联的信息作为value保存到缓存服务器中(redis)，当一个请求过来后，服务器就去缓存服务器中查询这个Token是否存在，存在则调用接口，不存在返回接口错误，一般通过拦截器或者过滤器来实现，Token分为两种：  </p><ul><li><p>API Token(接口令牌): 用于访问不需要用户登录的接口，如登录、注册、一些基本数据的获取等。获取接口令牌需要拿appId、timestamp和sign来换，sign&#x3D;加密(timestamp+key)</p></li><li><p>USER Token(用户令牌): 用于访问需要用户登录之后的接口，如：获取我的基本信息、保存、修改、删除等操作。获取用户令牌需要拿用户名和密码来换</p></li></ul><p>关于Token的时效性：token可以是一次性的、也可以在一段时间范围内是有效的，具体使用哪种看业务需要。<br>一般情况下接口最好使用https协议，如果使用http协议，Token机制只是一种减少被黑的可能性，其实只能防君子不能防小人。<br>一般token、timestamp和sign 三个参数会在接口中会同时作为参数传递，每个参数都有各自的用途。</p><p><strong>二、timestamp 简介</strong><br>timestamp: 时间戳，是客户端调用接口时对应的当前时间戳，时间戳用于防止DoS攻击。当黑客劫持了请求的url去DoS攻击，每次调用接口时接口都会判断服务器当前系统时间和接口中传的的timestamp的差值，如果这个差值超过某个设置的时间(假如5分钟)，那么这个请求将被拦截掉，如果在设置的超时时间范围内，是不能阻止DoS攻击的。timestamp机制只能减轻DoS攻击的时间，缩短攻击时间。如果黑客修改了时间戳的值可通过sign签名机制来处理。<br>DoS<br>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络带宽攻击和连通性攻击。<br>DoS攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。  </p><ul><li><p>Pingflood: 该攻击在短时间内向目的主机发送大量ping包，造成网络堵塞或主机资源耗尽。  </p></li><li><p>Synflood: 该攻击以多个随机的源主机地址向目的主机发送SYN包，而在收到目的主机的SYN ACK后并不回应，这样，目的主机就为这些源主机建立了大量的连接队列，而且由于没有收到ACK一直维护着这些队列，造成了资源的大量消耗而不能向正常请求提供服务。  </p></li><li><p>Smurf：该攻击向一个子网的广播地址发一个带有特定请求（如ICMP回应请求）的包，并且将源地址伪装成想要攻击的主机地址。子网上所有主机都回应广播包请求而向被攻击主机发包，使该主机受到攻击。  </p></li><li><p>Land-based：攻击者将一个包的源地址和目的地址都设置为目标主机的地址，然后将该包通过IP欺骗的方式发送给被攻击主机，这种包可以造成被攻击主机因试图与自己建立连接而陷入死循环，从而很大程度地降低了系统性能。  </p></li><li><p>Ping of Death：根据TCP&#x2F;IP的规范，一个包的长度最大为65536字节。尽管一个包的长度不能超过65536字节，但是一个包分成的多个片段的叠加却能做到。当一个主机收到了长度大于65536字节的包时，就是受到了Ping of Death攻击，该攻击会造成主机的宕机。  </p></li><li><p>Teardrop：IP数据包在网络传递时，数据包可以分成更小的片段。攻击者可以通过发送两段（或者更多）数据包来实现TearDrop攻击。第一个包的偏移量为0，长度为N，第二个包的偏移量小于N。为了合并这些数据段，TCP&#x2F;IP堆栈会分配超乎寻常的巨大资源，从而造成系统资源的缺乏甚至机器的重新启动。  </p></li><li><p>PingSweep：使用ICMP Echo轮询多个主机。</p></li></ul><p><strong>三、sign 简介</strong><br>nonce：随机值，是客户端随机生成的值，作为参数传递过来，随机值的目的是增加sign签名的多变性。随机值一般是数字和字母的组合，6位长度，随机值的组成和长度没有固定规则。<br>sign: 一般用于参数签名，防止参数被非法篡改，最常见的是修改金额等重要敏感参数， sign的值一般是将所有非空参数按照升续排序然后+token+key+timestamp+nonce(随机数)拼接在一起，然后使用某种加密算法进行加密，作为接口中的一个参数sign来传递，也可以将sign放到请求头中。接口在网络传输过程中如果被黑客挟持，并修改其中的参数值，然后再继续调用接口，虽然参数的值被修改了，但是因为黑客不知道sign是如何计算出来的，不知道sign都有哪些值构成，不知道以怎样的顺序拼接在一起的，最重要的是不知道签名字符串中的key是什么，所以黑客可以篡改参数的值，但没法修改sign的值，当服务器调用接口前会按照sign的规则重新计算出sign的值然后和接口传递的sign参数的值做比较，如果相等表示参数值没有被篡改，如果不等，表示参数被非法篡改了，就不执行接口了。<br><strong>四、防止重复提交</strong>  </p><p>对于一些重要的操作需要防止客户端重复提交的(如非幂等性重要操作)，具体办法是当请求第一次提交时将sign作为key保存到redis，并设置超时时间，超时时间和Timestamp中设置的差值相同。当同一个请求第二次访问时会先检测redis是否存在该sign，如果存在则证明重复提交了，接口就不再继续调用了。如果sign在缓存服务器中因过期时间到了，而被删除了，此时当这个url再次请求服务器时，因token的过期时间和sign的过期时间一直，sign过期也意味着token过期，那样同样的url再访问服务器会因token错误会被拦截掉，这就是为什么sign和token的过期时间要保持一致的原因。拒绝重复调用机制确保URL被别人截获了也无法使用（如抓取数据）。<br>对于哪些接口需要防止重复提交可以自定义个注解来标记。<br>注意：所有的安全措施都用上的话有时候难免太过复杂，在实际项目中需要根据自身情况作出裁剪，比如可以只使用签名机制就可以保证信息不会被篡改，或者定向提供服务的时候只用Token机制就可以了。如何裁剪，全看项目实际情况和对接口安全性的要求。<br><strong>五、使用流程</strong><br>1.接口调用方(客户端)向接口提供方(服务器)申请接口调用账号，申请成功后，接口提供方会给接口调用方一个appId和一个key参数<br>2.客户端携带参数appId、timestamp、sign去调用服务器端的API token，其中sign&#x3D;加密(appId + timestamp + key)<br>3.客户端拿着api_token 去访问不需要登录就能访问的接口<br>4.当访问用户需要登录的接口时，客户端跳转到登录页面，通过用户名和密码调用登录接口，登录接口会返回一个usertoken, 客户端拿着usertoken 去访问需要登录才能访问的接口<br>sign的作用是防止参数被篡改，客户端调用服务端时需要传递sign参数，服务器响应客户端时也可以返回一个sign用于客户度校验返回的值是否被非法篡改了。客户端传的sign和服务器端响应的sign算法可能会不同。</p><p><strong>六、示例代码</strong><br>1. dependency  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2. RedisConfiguration  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">JedisConnectionFactory</span> <span class="hljs-title function_">jedisConnectionFactory</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisConnectionFactory</span>();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支持存储对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">redisTemplate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br>        redisTemplate.<span class="hljs-title function_">setConnectionFactory</span>(<span class="hljs-title function_">jedisConnectionFactory</span>());<br>        <span class="hljs-title class_">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">class</span>);<br>        <span class="hljs-title class_">ObjectMapper</span> objectMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.<span class="hljs-title function_">setVisibility</span>(<span class="hljs-title class_">PropertyAccessor</span>.<span class="hljs-property">ALL</span>, <span class="hljs-title class_">JsonAutoDetect</span>.<span class="hljs-property">Visibility</span>.<span class="hljs-property">ANY</span>);<br>        objectMapper.<span class="hljs-title function_">enableDefaultTyping</span>(<span class="hljs-title class_">ObjectMapper</span>.<span class="hljs-property">DefaultTyping</span>.<span class="hljs-property">NON_FINAL</span>);<br><br><br>        jackson2JsonRedisSerializer.<span class="hljs-title function_">setObjectMapper</span>(objectMapper);<br>        redisTemplate.<span class="hljs-title function_">setValueSerializer</span>(jackson2JsonRedisSerializer);<br>        redisTemplate.<span class="hljs-title function_">afterPropertiesSet</span>();<br><br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3. TokenController  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/api/token&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenController</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisTemplate</span> redisTemplate;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * API Token</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">sign</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;/api_token&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ApiResponse</span>&lt;<span class="hljs-title class_">AccessToken</span>&gt; <span class="hljs-title function_">apiToken</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> appId, <span class="hljs-meta">@RequestHeader</span>(<span class="hljs-string">&quot;timestamp&quot;</span>) <span class="hljs-built_in">String</span> timestamp, <span class="hljs-meta">@RequestHeader</span>(<span class="hljs-string">&quot;sign&quot;</span>) <span class="hljs-built_in">String</span> sign</span>) &#123;<br>        <span class="hljs-title class_">Assert</span>.<span class="hljs-title function_">isTrue</span>(!<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isEmpty</span>(appId) &amp;&amp; !<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isEmpty</span>(timestamp) &amp;&amp; !<span class="hljs-title class_">StringUtils</span>.<span class="hljs-title function_">isEmpty</span>(sign), <span class="hljs-string">&quot;参数错误&quot;</span>);<br><br><br>        long reqeustInterval = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>() - <span class="hljs-title class_">Long</span>.<span class="hljs-title function_">valueOf</span>(timestamp);<br>        <span class="hljs-title class_">Assert</span>.<span class="hljs-title function_">isTrue</span>(reqeustInterval &lt; <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;请求过期，请重新请求&quot;</span>);<br><br><br>        <span class="hljs-comment">// 1. 根据appId查询数据库获取appSecret</span><br>        <span class="hljs-title class_">AppInfo</span> appInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppInfo</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;12345678954556&quot;</span>);<br><br><br>        <span class="hljs-comment">// 2. 校验签名</span><br>        <span class="hljs-title class_">String</span> signString = timestamp + appId + appInfo.<span class="hljs-title function_">getKey</span>();<br>        <span class="hljs-title class_">String</span> signature = <span class="hljs-title class_">MD5Util</span>.<span class="hljs-title function_">encode</span>(signString);<br>        log.<span class="hljs-title function_">info</span>(signature);<br>        <span class="hljs-title class_">Assert</span>.<span class="hljs-title function_">isTrue</span>(signature.<span class="hljs-title function_">equals</span>(sign), <span class="hljs-string">&quot;签名错误&quot;</span>);<br><br><br>        <span class="hljs-comment">// 3. 如果正确生成一个token保存到redis中，如果错误返回错误信息</span><br>        <span class="hljs-title class_">AccessToken</span> accessToken = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveToken</span>(<span class="hljs-number">0</span>, appInfo, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">ApiResponse</span>.<span class="hljs-title function_">success</span>(accessToken);<br>    &#125;<br><br><br><br><br>    <span class="hljs-meta">@NotRepeatSubmit</span>(<span class="hljs-number">5000</span>)<br>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">&quot;user_token&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ApiResponse</span>&lt;<span class="hljs-title class_">UserInfo</span>&gt; <span class="hljs-title function_">userToken</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username, <span class="hljs-built_in">String</span> password</span>) &#123;<br>        <span class="hljs-comment">// 根据用户名查询密码, 并比较密码(密码可以RSA加密一下)</span><br>        <span class="hljs-title class_">UserInfo</span> userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>(username, <span class="hljs-string">&quot;81255cb0dca1a5f304328a70ac85dcbd&quot;</span>, <span class="hljs-string">&quot;111111&quot;</span>);<br>        <span class="hljs-title class_">String</span> pwd = password + userInfo.<span class="hljs-title function_">getSalt</span>();<br>        <span class="hljs-title class_">String</span> passwordMD5 = <span class="hljs-title class_">MD5Util</span>.<span class="hljs-title function_">encode</span>(pwd);<br>        <span class="hljs-title class_">Assert</span>.<span class="hljs-title function_">isTrue</span>(passwordMD5.<span class="hljs-title function_">equals</span>(userInfo.<span class="hljs-title function_">getPassword</span>()), <span class="hljs-string">&quot;密码错误&quot;</span>);<br><br><br>        <span class="hljs-comment">// 2. 保存Token</span><br>        <span class="hljs-title class_">AppInfo</span> appInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppInfo</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;12345678954556&quot;</span>);<br>        <span class="hljs-title class_">AccessToken</span> accessToken = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveToken</span>(<span class="hljs-number">1</span>, appInfo, userInfo);<br>        userInfo.<span class="hljs-title function_">setAccessToken</span>(accessToken);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">ApiResponse</span>.<span class="hljs-title function_">success</span>(userInfo);<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">AccessToken</span> <span class="hljs-title function_">saveToken</span>(<span class="hljs-params">int tokenType, AppInfo appInfo,  UserInfo userInfo</span>) &#123;<br>        <span class="hljs-title class_">String</span> token = <span class="hljs-variable constant_">UUID</span>.<span class="hljs-title function_">randomUUID</span>().<span class="hljs-title function_">toString</span>();<br><br><br>        <span class="hljs-comment">// token有效期为2小时</span><br>        <span class="hljs-title class_">Calendar</span> calendar = <span class="hljs-title class_">Calendar</span>.<span class="hljs-title function_">getInstance</span>();<br>        calendar.<span class="hljs-title function_">setTime</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        calendar.<span class="hljs-title function_">add</span>(<span class="hljs-title class_">Calendar</span>.<span class="hljs-property">SECOND</span>, <span class="hljs-number">7200</span>);<br>        <span class="hljs-title class_">Date</span> expireTime = calendar.<span class="hljs-title function_">getTime</span>();<br><br><br>        <span class="hljs-comment">// 4. 保存token</span><br>        <span class="hljs-title class_">ValueOperations</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">TokenInfo</span>&gt; operations = redisTemplate.<span class="hljs-title function_">opsForValue</span>();<br>        <span class="hljs-title class_">TokenInfo</span> tokenInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenInfo</span>();<br>        tokenInfo.<span class="hljs-title function_">setTokenType</span>(tokenType);<br>        tokenInfo.<span class="hljs-title function_">setAppInfo</span>(appInfo);<br><br><br>        <span class="hljs-keyword">if</span> (tokenType == <span class="hljs-number">1</span>) &#123;<br>            tokenInfo.<span class="hljs-title function_">setUserInfo</span>(userInfo);<br>        &#125;<br><br><br>        operations.<span class="hljs-title function_">set</span>(token, tokenInfo, <span class="hljs-number">7200</span>, <span class="hljs-title class_">TimeUnit</span>.<span class="hljs-property">SECONDS</span>);<br><br><br>        <span class="hljs-title class_">AccessToken</span> accessToken = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessToken</span>(token, expireTime);<br><br><br>        <span class="hljs-keyword">return</span> accessToken;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        long timestamp = <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>();<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(timestamp);<br>        <span class="hljs-title class_">String</span> signString = timestamp + <span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-string">&quot;12345678954556&quot;</span>;<br>        <span class="hljs-title class_">String</span> sign = <span class="hljs-title class_">MD5Util</span>.<span class="hljs-title function_">encode</span>(signString);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sign);<br><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;-------------------&quot;</span>);<br>        signString = <span class="hljs-string">&quot;password=123456&amp;username=1&amp;12345678954556&quot;</span> + <span class="hljs-string">&quot;ff03e64b-427b-45a7-b78b-47d9e8597d3b1529815393153sdfsdfsfs&quot;</span> + timestamp + <span class="hljs-string">&quot;A1scr6&quot;</span>;<br>        sign = <span class="hljs-title class_">MD5Util</span>.<span class="hljs-title function_">encode</span>(signString);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sign);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4. WebMvcConfiguration  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] excludePathPatterns  = &#123;<span class="hljs-string">&quot;/api/token/api_token&quot;</span>&#125;;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenInterceptor tokenInterceptor;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-built_in">super</span>.addInterceptors(registry);<br>        registry.addInterceptor(tokenInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/api/**&quot;</span>)<br>                .excludePathPatterns(excludePathPatterns);<br>    &#125;<br>&#125;<br><span class="hljs-number">5.</span> TokenInterceptor<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptorAdapter</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 访问的目标方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;timestamp&quot;</span>);<br>        <span class="hljs-comment">// 随机字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nonce</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;nonce&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sign</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;sign&quot;</span>);<br>        Assert.isTrue(!StringUtils.isEmpty(token) &amp;&amp; !StringUtils.isEmpty(timestamp) &amp;&amp; !StringUtils.isEmpty(sign), <span class="hljs-string">&quot;参数错误&quot;</span>);<br><br><br>        <span class="hljs-comment">// 获取超时时间</span><br>        <span class="hljs-type">NotRepeatSubmit</span> <span class="hljs-variable">notRepeatSubmit</span> <span class="hljs-operator">=</span> ApiUtil.getNotRepeatSubmit(handler);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> notRepeatSubmit == <span class="hljs-literal">null</span> ? <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> : notRepeatSubmit.value();<br><br><br>        <span class="hljs-comment">// 2. 请求时间间隔</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">reqeustInterval</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - Long.valueOf(timestamp);<br>        Assert.isTrue(reqeustInterval &lt; expireTime, <span class="hljs-string">&quot;请求超时，请重新请求&quot;</span>);<br><br><br>        <span class="hljs-comment">// 3. 校验Token是否存在</span><br>        ValueOperations&lt;String, TokenInfo&gt; tokenRedis = redisTemplate.opsForValue();<br>        <span class="hljs-type">TokenInfo</span> <span class="hljs-variable">tokenInfo</span> <span class="hljs-operator">=</span> tokenRedis.get(token);<br>        Assert.notNull(tokenInfo, <span class="hljs-string">&quot;token错误&quot;</span>);<br><br><br>        <span class="hljs-comment">// 4. 校验签名(将所有的参数加进来，防止别人篡改参数) 所有参数看参数名升续排序拼接成url</span><br>        <span class="hljs-comment">// 请求参数 + token + timestamp + nonce</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signString</span> <span class="hljs-operator">=</span> ApiUtil.concatSignString(request) + tokenInfo.getAppInfo().getKey() + token + timestamp + nonce;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> MD5Util.encode(signString);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> signature.equals(sign);<br>        Assert.isTrue(flag, <span class="hljs-string">&quot;签名错误&quot;</span>);<br><br><br>        <span class="hljs-comment">// 5. 拒绝重复调用(第一次访问时存储，过期时间和请求超时时间保持一致), 只有标注不允许重复提交注解的才会校验</span><br>        <span class="hljs-keyword">if</span> (notRepeatSubmit != <span class="hljs-literal">null</span>) &#123;<br>            ValueOperations&lt;String, Integer&gt; signRedis = redisTemplate.opsForValue();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(sign);<br>            Assert.isTrue(!exists, <span class="hljs-string">&quot;请勿重复提交&quot;</span>);<br>            signRedis.set(sign, <span class="hljs-number">0</span>, expireTime, TimeUnit.MILLISECONDS);<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6. MD5Util —-MD5工具类，加密生成数字签名  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final String hexDigits[] = &#123; <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>,<br>            <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span> &#125;;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteArrayToHexString</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span> b[]</span>)</span> &#123;<br>        StringBuffer resultSb = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++)<br>            resultSb.append(byteToHexString(b[i]));<br><br><br>        <span class="hljs-keyword">return</span> resultSb.toString();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteToHexString</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span> b</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> n = b;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>            n += <span class="hljs-number">256</span>;<br>        <span class="hljs-built_in">int</span> d1 = n / <span class="hljs-number">16</span>;<br>        <span class="hljs-built_in">int</span> d2 = n % <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> hexDigits[d1] + hexDigits[d2];<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span>(<span class="hljs-params">String origin</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> encode(origin, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span>(<span class="hljs-params">String origin, String charsetname</span>)</span> &#123;<br>        String resultString = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resultString = <span class="hljs-keyword">new</span> String(origin);<br>            MessageDigest md = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            <span class="hljs-keyword">if</span> (charsetname == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-keyword">equals</span>(charsetname))<br>                resultString = byteArrayToHexString(md.digest(resultString<br>                        .getBytes()));<br>            <span class="hljs-keyword">else</span><br>                resultString = byteArrayToHexString(md.digest(resultString<br>                        .getBytes(charsetname)));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception exception) &#123;<br>        &#125;<br>        <span class="hljs-keyword">return</span> resultString;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7. @NotRepeatSubmit   —–自定义注解，防止重复提交。  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 禁止重复提交</span><br><span class="hljs-comment"> */</span><br>@Target(ElementType.METHOD)<br>@Retention(RetentionPolicy.RUNTIME)<br><span class="hljs-keyword">public</span> @interface NotRepeatSubmit &#123;<br>    <span class="hljs-comment">/** 过期时间，单位毫秒 **/</span><br>    <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">value</span>() <span class="hljs-literal">default</span> 5000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8. AccessToken  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessToken</span> &#123;<br>    <span class="hljs-comment">/** token */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> token;<br><br><br>    <span class="hljs-comment">/** 失效时间 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Date</span> expireTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>9. AppInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInfo</span> &#123;<br>    <span class="hljs-comment">/** App id */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> appId;<br>    <span class="hljs-comment">/** API 秘钥 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> key;<br>&#125;<br></code></pre></td></tr></table></figure><p>10. TokenInfo  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cs">@Data<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TokenInfo</span> &#123;<br>    <span class="hljs-comment">/** token类型: api:0 、user:1 */</span><br>    <span class="hljs-keyword">private</span> Integer tokenType;<br><br><br>    <span class="hljs-comment">/** App 信息 */</span><br>    <span class="hljs-keyword">private</span> AppInfo appInfo;<br><br><br>    <span class="hljs-comment">/** 用户其他数据 */</span><br>    <span class="hljs-keyword">private</span> UserInfo userInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>11. UserInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    <span class="hljs-comment">/** 用户名 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> username;<br>    <span class="hljs-comment">/** 手机号 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> mobile;<br>    <span class="hljs-comment">/** 邮箱 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> email;<br>    <span class="hljs-comment">/** 密码 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br>    <span class="hljs-comment">/** 盐 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> salt;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">AccessToken</span> accessToken;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserInfo</span>(<span class="hljs-title class_">String</span> username, <span class="hljs-title class_">String</span> password, <span class="hljs-title class_">String</span> salt) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = username;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">salt</span> = salt;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>12. ApiCodeEnum  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误码code可以使用纯数字,使用不同区间标识一类错误，也可以使用纯字符，也可以使用前缀+编号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 错误码：ERR + 编号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 可以使用日志级别的前缀作为错误类型区分 Info(I) Error(E) Warning(W)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 或者以业务模块 + 错误号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * TODO 错误码设计</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Alipay 用了两个code，两个msg(https://docs.open.alipay.com/api_1/alipay.trade.pay)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ApiCodeEnum</span> &#123;<br>    <span class="hljs-title function_">SUCCESS</span>(<span class="hljs-string">&quot;10000&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>),<br>    <span class="hljs-title function_">UNKNOW_ERROR</span>(<span class="hljs-string">&quot;ERR0001&quot;</span>,<span class="hljs-string">&quot;未知错误&quot;</span>),<br>    <span class="hljs-title function_">PARAMETER_ERROR</span>(<span class="hljs-string">&quot;ERR0002&quot;</span>,<span class="hljs-string">&quot;参数错误&quot;</span>),<br>    <span class="hljs-title function_">TOKEN_EXPIRE</span>(<span class="hljs-string">&quot;ERR0003&quot;</span>,<span class="hljs-string">&quot;认证过期&quot;</span>),<br>    <span class="hljs-title function_">REQUEST_TIMEOUT</span>(<span class="hljs-string">&quot;ERR0004&quot;</span>,<span class="hljs-string">&quot;请求超时&quot;</span>),<br>    <span class="hljs-title function_">SIGN_ERROR</span>(<span class="hljs-string">&quot;ERR0005&quot;</span>,<span class="hljs-string">&quot;签名错误&quot;</span>),<br>    <span class="hljs-title function_">REPEAT_SUBMIT</span>(<span class="hljs-string">&quot;ERR0006&quot;</span>,<span class="hljs-string">&quot;请不要频繁操作&quot;</span>),<br>    ;<br><br><br>    <span class="hljs-comment">/** 代码 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> code;<br><br><br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> msg;<br><br><br>    <span class="hljs-title class_">ApiCodeEnum</span>(<span class="hljs-title class_">String</span> code, <span class="hljs-title class_">String</span> msg) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = msg;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMsg</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>13. ApiResult  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiResult</span> &#123;<br><br><br>    <span class="hljs-comment">/** 代码 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> code;<br><br><br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><p>14. ApiUtil  ——-这个参考支付宝加密的算法写的.我直接Copy过来了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiUtil</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按参数名升续拼接参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">request</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">concatSignString</span>(<span class="hljs-params">HttpServletRequest request</span>) &#123;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; paramterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        request.<span class="hljs-title function_">getParameterMap</span>().<span class="hljs-title function_">forEach</span>((key, value) -&gt; paramterMap.<span class="hljs-title function_">put</span>(key, value[<span class="hljs-number">0</span>]));<br>        <span class="hljs-comment">// 按照key升续排序，然后拼接参数</span><br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">String</span>&gt; keySet = paramterMap.<span class="hljs-title function_">keySet</span>();<br>        <span class="hljs-title class_">String</span>[] keyArray = keySet.<span class="hljs-title function_">toArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[keySet.<span class="hljs-title function_">size</span>()]);<br>        <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">sort</span>(keyArray);<br>        <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">String</span> k : keyArray) &#123;<br>            <span class="hljs-comment">// 或略掉的字段</span><br>            <span class="hljs-keyword">if</span> (k.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;sign&quot;</span>)) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (paramterMap.<span class="hljs-title function_">get</span>(k).<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">length</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 参数值为空，则不参与签名</span><br>                sb.<span class="hljs-title function_">append</span>(k).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;=&quot;</span>).<span class="hljs-title function_">append</span>(paramterMap.<span class="hljs-title function_">get</span>(k).<span class="hljs-title function_">trim</span>()).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">concatSignString</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; map</span>) &#123;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; paramterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.<span class="hljs-title function_">forEach</span>((key, value) -&gt; paramterMap.<span class="hljs-title function_">put</span>(key, value));<br>        <span class="hljs-comment">// 按照key升续排序，然后拼接参数</span><br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">String</span>&gt; keySet = paramterMap.<span class="hljs-title function_">keySet</span>();<br>        <span class="hljs-title class_">String</span>[] keyArray = keySet.<span class="hljs-title function_">toArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[keySet.<span class="hljs-title function_">size</span>()]);<br>        <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">sort</span>(keyArray);<br>        <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">String</span> k : keyArray) &#123;<br>            <span class="hljs-keyword">if</span> (paramterMap.<span class="hljs-title function_">get</span>(k).<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">length</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 参数值为空，则不参与签名</span><br>                sb.<span class="hljs-title function_">append</span>(k).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;=&quot;</span>).<span class="hljs-title function_">append</span>(paramterMap.<span class="hljs-title function_">get</span>(k).<span class="hljs-title function_">trim</span>()).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取方法上的<span class="hljs-doctag">@NotRepeatSubmit</span>注解</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">handler</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">NotRepeatSubmit</span> <span class="hljs-title function_">getNotRepeatSubmit</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> handler</span>) &#123;<br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HandlerMethod</span>) &#123;<br>            <span class="hljs-title class_">HandlerMethod</span> handlerMethod = (<span class="hljs-title class_">HandlerMethod</span>) handler;<br>            <span class="hljs-title class_">Method</span> method = handlerMethod.<span class="hljs-title function_">getMethod</span>();<br>            <span class="hljs-title class_">NotRepeatSubmit</span> annotation = method.<span class="hljs-title function_">getAnnotation</span>(<span class="hljs-title class_">NotRepeatSubmit</span>.<span class="hljs-property">class</span>);<br><br><br>            <span class="hljs-keyword">return</span> annotation;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>15. ApiResponse</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiResponse</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">/** 结果 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ApiResult</span> result;<br><br><br>    <span class="hljs-comment">/** 数据 */</span><br>    <span class="hljs-keyword">private</span> T data;<br><br><br>    <span class="hljs-comment">/** 签名 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> sign;<br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title class_">ApiResponse</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">T data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">response</span>(<span class="hljs-title class_">ApiCodeEnum</span>.<span class="hljs-property">SUCCESS</span>.<span class="hljs-title function_">getCode</span>(), <span class="hljs-title class_">ApiCodeEnum</span>.<span class="hljs-property">SUCCESS</span>.<span class="hljs-title function_">getMsg</span>(), data);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">ApiResponse</span> <span class="hljs-title function_">error</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> code, <span class="hljs-built_in">String</span> msg</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">response</span>(code, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title class_">ApiResponse</span> <span class="hljs-title function_">response</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> code, <span class="hljs-built_in">String</span> msg, T data</span>) &#123;<br>        <span class="hljs-title class_">ApiResult</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResult</span>(code, msg);<br>        <span class="hljs-title class_">ApiResponse</span> response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiResponse</span>();<br>        response.<span class="hljs-title function_">setResult</span>(result);<br>        response.<span class="hljs-title function_">setData</span>(data);<br><br><br>        <span class="hljs-title class_">String</span> sign = <span class="hljs-title function_">signData</span>(data);<br>        response.<span class="hljs-title function_">setSign</span>(sign);<br><br><br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title class_">String</span> <span class="hljs-title function_">signData</span>(<span class="hljs-params">T data</span>) &#123;<br>        <span class="hljs-comment">// TODO 查询key</span><br>        <span class="hljs-title class_">String</span> key = <span class="hljs-string">&quot;12345678954556&quot;</span>;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; responseMap = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            responseMap = <span class="hljs-title function_">getFields</span>(data);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IllegalAccessException</span> e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-title class_">String</span> urlComponent = <span class="hljs-title class_">ApiUtil</span>.<span class="hljs-title function_">concatSignString</span>(responseMap);<br>        <span class="hljs-title class_">String</span> signature = urlComponent + <span class="hljs-string">&quot;key=&quot;</span> + key;<br>        <span class="hljs-title class_">String</span> sign = <span class="hljs-title class_">MD5Util</span>.<span class="hljs-title function_">encode</span>(signature);<br><br><br>        <span class="hljs-keyword">return</span> sign;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 反射的对象,获取对象的字段名和值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">IllegalArgumentException</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">IllegalAccessException</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getFields</span>(<span class="hljs-title class_">Object</span> data) throws <span class="hljs-title class_">IllegalAccessException</span>, <span class="hljs-title class_">IllegalArgumentException</span> &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-title class_">Field</span>[] fields = data.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getDeclaredFields</span>();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; fields.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-title class_">Field</span> field = fields[i];<br>            field.<span class="hljs-title function_">setAccessible</span>(<span class="hljs-literal">true</span>);<br><br><br>            <span class="hljs-title class_">String</span> name = field.<span class="hljs-title function_">getName</span>();<br>            <span class="hljs-title class_">Object</span> value = field.<span class="hljs-title function_">get</span>(data);<br>            <span class="hljs-keyword">if</span> (field.<span class="hljs-title function_">get</span>(data) != <span class="hljs-literal">null</span>) &#123;<br>                map.<span class="hljs-title function_">put</span>(name, value.<span class="hljs-title function_">toString</span>());<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>七、ThreadLocal</strong><br>ThreadLocal是线程内的全局上下文。就是在单个线程中，方法之间共享的内存，每个方法都可以从该上下文中获取值和修改值。<br>实际案例：<br>在调用api时都会传一个token参数，通常会写一个拦截器来校验token是否合法，我们可以通过token找到对应的用户信息(User)，如果token合法，然后将用户信息存储到ThreadLocal中，这样无论是在controller、service、dao的哪一层都能访问到该用户的信息。作用类似于Web中的request作用域。<br>传统方式我们要在方法中访问某个变量，可以通过传参的形式往方法中传参，如果多个方法都要使用那么每个方法都要传参；如果使用ThreadLocal所有方法就不需要传该参数了，每个方法都可以通过ThreadLocal来访问该值。  </p><ul><li><p>ThreadLocalUtil.set(“key”, value); 保存值</p></li><li><p>T value &#x3D; ThreadLocalUtil.get(“key”); 获取值</p></li></ul><p>ThreadLocalUtil</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs javascript">public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalUtil</span>&lt;T&gt; &#123;<br>    private <span class="hljs-keyword">static</span> final <span class="hljs-title class_">ThreadLocal</span>&lt;<span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>() &#123;<br>        @<span class="hljs-title class_">Override</span><br>        protected <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">initialValue</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>        &#125;<br>    &#125;;<br><br><br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">getThreadLocal</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> threadLocal.<span class="hljs-title function_">get</span>();<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">get</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        <span class="hljs-keyword">return</span> (T)map.<span class="hljs-title function_">get</span>(key);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">get</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key,T defaultValue</span>) &#123;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        <span class="hljs-keyword">return</span> (T)map.<span class="hljs-title function_">get</span>(key) == <span class="hljs-literal">null</span> ? defaultValue : (T)map.<span class="hljs-title function_">get</span>(key);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value</span>) &#123;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        map.<span class="hljs-title function_">put</span>(key, value);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; keyValueMap</span>) &#123;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        map.<span class="hljs-title function_">putAll</span>(keyValueMap);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params"></span>) &#123;<br>        threadLocal.<span class="hljs-title function_">remove</span>();<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,T&gt; <span class="hljs-title function_">fetchVarsByPrefix</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> prefix</span>) &#123;<br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,T&gt; vars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>( prefix == <span class="hljs-literal">null</span> )&#123;<br>            <span class="hljs-keyword">return</span> vars;<br>        &#125;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span>&gt; set = map.<span class="hljs-title function_">entrySet</span>();<br><br><br>        <span class="hljs-keyword">for</span>( <span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span> entry : set)&#123;<br>            <span class="hljs-title class_">Object</span> key = entry.<span class="hljs-title function_">getKey</span>();<br>            <span class="hljs-keyword">if</span>( key <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> )&#123;<br>                <span class="hljs-keyword">if</span>( ((<span class="hljs-title class_">String</span>) key).<span class="hljs-title function_">startsWith</span>(prefix) )&#123;<br>                    vars.<span class="hljs-title function_">put</span>((<span class="hljs-title class_">String</span>)key,(T)entry.<span class="hljs-title function_">getValue</span>());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vars;<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">remove</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        <span class="hljs-keyword">return</span> (T)map.<span class="hljs-title function_">remove</span>(key);<br>    &#125;<br><br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> prefix</span>) &#123;<br>        <span class="hljs-keyword">if</span>( prefix == <span class="hljs-literal">null</span> )&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-title class_">Map</span> map = (<span class="hljs-title class_">Map</span>)threadLocal.<span class="hljs-title function_">get</span>();<br>        <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span>&gt; set = map.<span class="hljs-title function_">entrySet</span>();<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; removeKeys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><br>        <span class="hljs-keyword">for</span>( <span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span> entry : set )&#123;<br>            <span class="hljs-title class_">Object</span> key = entry.<span class="hljs-title function_">getKey</span>();<br>            <span class="hljs-keyword">if</span>( key <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span> )&#123;<br>                <span class="hljs-keyword">if</span>( ((<span class="hljs-title class_">String</span>) key).<span class="hljs-title function_">startsWith</span>(prefix) )&#123;<br>                    removeKeys.<span class="hljs-title function_">add</span>((<span class="hljs-title class_">String</span>)key);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>( <span class="hljs-title class_">String</span> key : removeKeys )&#123;<br>            map.<span class="hljs-title function_">remove</span>(key);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结:这个是目前第三方数据接口交互过程中常用的一些参数与使用示例，希望对大家有点帮助。<br>当然如果为了保证更加的安全，可以加上RSA,RSA2，AES等等加密方式，保证了数据的更加的安全，但是唯一的缺点是加密与解密比较耗费CPU的资源。  </p><blockquote><p>来源：<a href="https://www.cnblogs.com/jurendage/p/12653865.html">https://www.cnblogs.com/jurendage/p/12653865.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>JAVA安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
